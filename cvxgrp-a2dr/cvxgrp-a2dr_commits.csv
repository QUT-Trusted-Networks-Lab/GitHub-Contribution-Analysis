Hash,Commit Message,Author Name,Author Email,Committor Name,Committor Email,Author Date,Author Timezone,Committor Date,Committor Timezone,in_main_branch,merge,modified_files,parents,deletions,insertions,lines,files,dmm_unit_size,dmm_unit_complexity,dmm_unit_interfacing
7840dfae7f1fe7ae6a5a060c5f548bf8bbfd8c67,Initial commit,Anqi Fu,anqi.fu.1987@gmail.com,Anqi Fu,anqi.fu.1987@gmail.com,2018-07-05 19:23:53-07:00,25200,2018-07-05 19:23:53-07:00,25200,True,False,"['.gitignore', 'LICENSE', 'MANIFEST.in', 'README.md', '__init__.py', 'consensus.py', 'problems.py', '__init__.py', 'test_basic.py', 'setup.py']",[],0,1076,1076,10,0.4767123287671233,0.7342465753424657,0.6191780821917808
4f3efd538bd625d81a6a20196aa527f9853e571b,Mathematical corrections to ADMM code,anqif,anqi@0xdata.com,anqif,anqi@0xdata.com,2018-07-06 02:24:30-07:00,25200,2018-07-06 02:24:30-07:00,25200,True,False,['consensus.py'],['7840dfae7f1fe7ae6a5a060c5f548bf8bbfd8c67'],45,39,84,1,1.0,0.0,1.0
c65e7f0439dde64f62656a196db95227c0db4a5a,Changes to streamline testing,Anqi Fu,anqi.fu.1987@gmail.com,Anqi Fu,anqi.fu.1987@gmail.com,2018-07-06 03:27:23-07:00,25200,2018-07-06 03:27:23-07:00,25200,True,False,"['base_test.py', 'test_basic.py']",['4f3efd538bd625d81a6a20196aa527f9853e571b'],8,74,82,2,0.5757575757575758,0.0,0.6060606060606061
be9811156e744420f2ecda6506ee629a52254acb,Fix averaging scheme to incorporate different step sizes across nodes,anqif,anqif@stanford.edu,anqif,anqif@stanford.edu,2018-07-06 15:18:28-07:00,25200,2018-07-06 15:18:28-07:00,25200,True,False,['consensus.py'],['c65e7f0439dde64f62656a196db95227c0db4a5a'],7,10,17,1,1.0,1.0,1.0
62de06a0e0ee9f52da05a22dfe4fdaacdde6f4f0,Fix a sign flip error,anqif,anqif@stanford.edu,anqif,anqif@stanford.edu,2018-07-06 15:33:01-07:00,25200,2018-07-06 15:33:01-07:00,25200,True,False,"['consensus.py', 'base_test.py', 'test_basic.py']",['be9811156e744420f2ecda6506ee629a52254acb'],8,8,16,3,1.0,0.0,0.0
5d59c47ad5f92aad4ed1e381a2a9cbee406b5f17,Fix up tests so all now pass,anqif,anqif@stanford.edu,anqif,anqif@stanford.edu,2018-07-06 16:01:33-07:00,25200,2018-07-06 16:01:33-07:00,25200,True,False,['test_basic.py'],['62de06a0e0ee9f52da05a22dfe4fdaacdde6f4f0'],3,2,5,1,1.0,1.0,0.0
654082053653b934c53aed2fa6fc50be9ed34f28,Add a few simple examples,anqif,anqif@stanford.edu,anqif,anqif@stanford.edu,2018-07-06 18:28:58-07:00,25200,2018-07-06 18:28:58-07:00,25200,True,False,"['consensus.py', 'problems.py', 'test_basic.py', 'lasso_example.py', 'ols_example.py', 'svm_example.py']",['5d59c47ad5f92aad4ed1e381a2a9cbee406b5f17'],12,105,117,6,0.54,0.96,0.96
1f284fbf3b70a46ab83979e22f1aed038512f0ed,Minor bug fixes and cleanup. Additional flow control example.,Anqi Fu,anqi.fu.1987@gmail.com,Anqi Fu,anqi.fu.1987@gmail.com,2018-07-16 14:24:12-07:00,25200,2018-07-16 14:24:12-07:00,25200,True,False,"['consensus.py', 'problems.py', 'test_basic.py', 'flow_control.py']",['654082053653b934c53aed2fa6fc50be9ed34f28'],3,52,55,4,0.0,1.0,1.0
31f9217b8c35478667abfa2be7dff8d2dc188fad,Fix a bug in proximal problem definition. Add vehicle formation control example,Anqi Fu,anqi.fu.1987@gmail.com,Anqi Fu,anqi.fu.1987@gmail.com,2018-07-16 23:42:09-07:00,25200,2018-07-16 23:42:09-07:00,25200,True,False,"['consensus.py', 'vehicle_formation.py']",['1f284fbf3b70a46ab83979e22f1aed038512f0ed'],3,88,91,2,0.2903225806451613,1.0,0.7096774193548387
9a2ab5993b12e260f712bb63345ae22c65b1858f,Add references for vehicle formation problem,Anqi Fu,anqi.fu.1987@gmail.com,Anqi Fu,anqi.fu.1987@gmail.com,2018-07-16 23:47:53-07:00,25200,2018-07-16 23:47:53-07:00,25200,True,False,['vehicle_formation.py'],['31f9217b8c35478667abfa2be7dff8d2dc188fad'],0,7,7,1,,,
8a9390a00ad562c1a9954207739972d26e971e1a,WIP dual acceleration step for consensus ADMM,anqif,anqif@stanford.edu,anqif,anqif@stanford.edu,2018-07-18 18:14:33-07:00,25200,2018-07-18 18:14:33-07:00,25200,True,False,"['acceleration.py', 'problems.py']",['9a2ab5993b12e260f712bb63345ae22c65b1858f'],3,89,92,2,1.0,1.0,0.7272727272727273
5d758abbb53980dd2087b6440955d2fd2e56ad98,Experimenting with Anderson accelerated dual update,Anqi Fu,anqi.fu.1987@gmail.com,Anqi Fu,anqi.fu.1987@gmail.com,2018-07-19 18:59:50-07:00,25200,2018-07-19 18:59:50-07:00,25200,True,False,"['base_test.py', 'test_acceleration.py', 'test_basic.py']",['8a9390a00ad562c1a9954207739972d26e971e1a'],9,79,88,3,0.13333333333333333,1.0,1.0
fb214caa4c1a61481028613b2ae0d2d99f9d9b0b,Remove some debug print statements,Anqi Fu,anqi.fu.1987@gmail.com,Anqi Fu,anqi.fu.1987@gmail.com,2018-07-19 19:04:32-07:00,25200,2018-07-19 19:04:32-07:00,25200,True,False,"['acceleration.py', 'consensus.py']",['5d758abbb53980dd2087b6440955d2fd2e56ad98'],17,102,119,2,0.5757575757575758,0.5757575757575758,0.0
475078d164386d035080e7825d302a44503e514a,Account for varying step size in acceleration computation,Anqi Fu,anqi.fu.1987@gmail.com,Anqi Fu,anqi.fu.1987@gmail.com,2018-07-19 20:43:45-07:00,25200,2018-07-19 20:43:45-07:00,25200,True,False,"['acceleration.py', 'consensus.py', 'test_acceleration.py']",['fb214caa4c1a61481028613b2ae0d2d99f9d9b0b'],70,37,107,3,0.0,0.0,1.0
e2717faeb8b8b7e8bf57d8c06520ca72d6f6e8ae,Fix some of the math for the unconstrained least squares problem,Anqi Fu,anqi.fu.1987@gmail.com,Anqi Fu,anqi.fu.1987@gmail.com,2018-07-19 20:51:52-07:00,25200,2018-07-19 20:51:52-07:00,25200,True,False,['acceleration.py'],['475078d164386d035080e7825d302a44503e514a'],3,3,6,1,,,
bb4fdbda54421d3010c7e1586c169717d3379bc0,Add a to-do list,Anqi Fu,anqi.fu.1987@gmail.com,Anqi Fu,anqi.fu.1987@gmail.com,2018-07-26 12:24:52-07:00,25200,2018-07-26 12:24:52-07:00,25200,True,False,['TODO'],['9a2ab5993b12e260f712bb63345ae22c65b1858f'],0,5,5,1,,,
2f53d663a27c266d540567b71782605bbb7c98e7,"Allow step sizes to be set according to variable ID, not node ID.",anqif,anqif@stanford.edu,anqif,anqif@stanford.edu,2018-10-17 11:37:15-07:00,25200,2018-10-17 11:37:15-07:00,25200,True,False,"['consensus.py', 'base_test.py', 'test_basic.py', 'test_functions.py']",['bb4fdbda54421d3010c7e1586c169717d3379bc0'],43,141,184,4,0.26666666666666666,0.9,0.9
5410bd75ec969ce498910fb13b035baa22cc382d,"Change spectral step size update to apply per variable, rather than over all variables.",anqif,anqif@stanford.edu,anqif,anqif@stanford.edu,2018-10-17 13:44:48-07:00,25200,2018-10-17 13:44:48-07:00,25200,True,False,"['consensus.py', 'base_test.py', 'test_basic.py']",['2f53d663a27c266d540567b71782605bbb7c98e7'],73,38,111,3,1.0,1.0,1.0
a1bf7791252666ac485f429ed2a0ac7ef9bdfbea,Refactor a few functions into separate utilities file,anqif,anqif@stanford.edu,anqif,anqif@stanford.edu,2018-10-17 14:31:25-07:00,25200,2018-10-17 14:31:25-07:00,25200,True,False,"['consensus.py', 'base_test.py', 'test_basic.py', 'test_functions.py', 'utilities.py']",['5410bd75ec969ce498910fb13b035baa22cc382d'],27,61,88,5,0.9230769230769231,0.0,0.9230769230769231
a89241fe1140b64be5c7f034fe5f229a23ed249f,WIP Reduce communication cost by only sending shared variable values for averaging step,anqif,anqif@stanford.edu,anqif,anqif@stanford.edu,2018-10-17 15:45:13-07:00,25200,2018-10-17 15:45:13-07:00,25200,True,False,"['consensus.py', 'utilities.py']",['a1bf7791252666ac485f429ed2a0ac7ef9bdfbea'],14,29,43,2,1.0,0.0,1.0
07c3d8d43095439ec75eb374c7b507edfb521d19,Reduce some code clutter,anqif,anqif@stanford.edu,anqif,anqif@stanford.edu,2018-10-19 01:55:04-07:00,25200,2018-10-19 01:55:04-07:00,25200,True,False,"['TODO', 'consensus.py', 'test_basic.py']",['a89241fe1140b64be5c7f034fe5f229a23ed249f'],15,18,33,3,1.0,1.0,1.0
25a05c009d431ba8f6c127f98c77085b27abb240,Each thread sends only public (shared) variable values to central node for averaging. Private variable values are gathered after ADMM loop terminates.,anqif,anqif@stanford.edu,anqif,anqif@stanford.edu,2018-10-21 01:12:05-07:00,25200,2018-10-21 01:12:05-07:00,25200,True,False,"['TODO', 'consensus.py', 'test_functions.py', 'test_step_size.py', 'utilities.py']",['07c3d8d43095439ec75eb374c7b507edfb521d19'],43,148,191,5,0.746031746031746,0.6349206349206349,0.7936507936507936
86e5e7db3fb72e9859b316a11fa972018f1993a8,Updated to-do examples,anqif,anqif@stanford.edu,anqif,anqif@stanford.edu,2018-10-22 01:32:28-07:00,25200,2018-10-22 01:32:28-07:00,25200,True,False,['TODO'],['25a05c009d431ba8f6c127f98c77085b27abb240'],3,2,5,1,,,
1766a156ca3d4e7577315f5e344c0cc689de5973,Add tests for examples,anqif,anqif@stanford.edu,anqif,anqif@stanford.edu,2018-10-22 01:45:47-07:00,25200,2018-10-22 01:45:47-07:00,25200,True,False,['test_examples.py'],['86e5e7db3fb72e9859b316a11fa972018f1993a8'],0,240,240,1,0.3355263157894737,1.0,0.8947368421052632
8b64042c244871d5e7baf6fef62b77b4dfc17bf7,Update README.md,Anqi,anqif@stanford.edu,GitHub,noreply@github.com,2018-10-28 22:27:39-07:00,25200,2018-10-28 22:27:39-07:00,25200,True,False,['README.md'],['1766a156ca3d4e7577315f5e344c0cc689de5973'],1,1,2,1,,,
6a75393817016faf2f1491c3c468dc12c3aa22f3,WIP Attempting to implement Douglas-Rachford splitting algorithm for consensus optimization problem,Anqi Fu,anqi.fu.1987@gmail.com,Anqi Fu,anqi.fu.1987@gmail.com,2018-11-07 00:09:38-08:00,28800,2018-11-07 00:09:38-08:00,28800,True,False,['consensus.py'],['93a647aaff1fd0f55aaaaa02c20210e5b05a3ab3'],250,37,287,1,0.6702127659574468,0.6382978723404256,0.925531914893617
1f176eaec3bf74b7f545a526d8bf398252ce9115,WIP On projection function for w vector,anqif,anqif@stanford.edu,anqif,anqif@stanford.edu,2018-11-07 17:10:56-08:00,28800,2018-11-07 17:10:56-08:00,28800,True,False,['consensus.py'],['6a75393817016faf2f1491c3c468dc12c3aa22f3'],6,15,21,1,0.0,0.0,0.0
55e9bad685ad08b681d71c369aaa58cc6f97bfe6,WIP More work on Douglas-Rachford algorithm,anqif,anqif@stanford.edu,anqif,anqif@stanford.edu,2018-11-09 14:51:00-08:00,28800,2018-11-09 14:51:00-08:00,28800,True,False,['consensus.py'],['1f176eaec3bf74b7f545a526d8bf398252ce9115'],9,11,20,1,0.0,0.0,0.0
493019645d172e0da68ef976281680d27e1e083c,"WIP Change consensus algorithm to allow step sizes to be determined by variable ID, not by node",Anqi Fu,anqi.fu.1987@gmail.com,Anqi Fu,anqi.fu.1987@gmail.com,2018-11-10 01:55:28-08:00,28800,2018-11-10 01:55:28-08:00,28800,True,False,['consensus.py'],['55e9bad685ad08b681d71c369aaa58cc6f97bfe6'],25,27,52,1,1.0,1.0,1.0
45f27a32653f4a73901c31f6b1ad26aa095c60d0,Finish consensus S-DRS implementation,Anqi Fu,anqi.fu.1987@gmail.com,Anqi Fu,anqi.fu.1987@gmail.com,2018-11-10 17:14:24-08:00,28800,2018-11-10 17:14:24-08:00,28800,True,False,['consensus.py'],['493019645d172e0da68ef976281680d27e1e083c'],13,25,38,1,0.0,0.0,0.0
eb5c3a036529242b0bdde64691a91d1bb086ef48,WIP Adding Anderson acceleration (type 2),Anqi Fu,anqi.fu.1987@gmail.com,Anqi Fu,anqi.fu.1987@gmail.com,2018-11-11 18:06:12-08:00,28800,2018-11-11 18:06:12-08:00,28800,True,False,"['acceleration.py', 'consensus.py']",['45f27a32653f4a73901c31f6b1ad26aa095c60d0'],76,85,161,2,0.0,0.06666666666666667,0.0
5bc2b5aaa6f1d1a8f149890fae6f3ffada6aad58,WIP Anderson acceleration II steps for central server,Anqi Fu,anqi.fu.1987@gmail.com,Anqi Fu,anqi.fu.1987@gmail.com,2018-11-12 01:15:44-08:00,28800,2018-11-12 01:15:44-08:00,28800,True,False,"['acceleration.py', 'consensus.py']",['eb5c3a036529242b0bdde64691a91d1bb086ef48'],44,88,132,2,0.2,0.5555555555555556,0.6444444444444445
cdbeeb143e346489795fe8afec161f7f3a37310e,Finish first cut of AA-II for S-DRS. Still need to test and debug.,Anqi Fu,anqi.fu.1987@gmail.com,Anqi Fu,anqi.fu.1987@gmail.com,2018-11-12 02:04:09-08:00,28800,2018-11-12 02:04:09-08:00,28800,True,False,"['acceleration.py', 'consensus.py']",['5bc2b5aaa6f1d1a8f149890fae6f3ffada6aad58'],13,21,34,2,1.0,1.0,0.0
519e6899d07bd45c6f65238a86979549f340e866,Fix some bugs in S-DRS algorithm without acceleration,Anqi Fu,anqi.fu.1987@gmail.com,Anqi Fu,anqi.fu.1987@gmail.com,2018-11-12 16:11:28-08:00,28800,2018-11-12 16:11:28-08:00,28800,True,False,"['consensus.py', 'problems.py', 'test_basic.py']",['cdbeeb143e346489795fe8afec161f7f3a37310e'],33,15,48,3,0.7272727272727273,0.45454545454545453,0.36363636363636365
8b8516bd3d6907c927be5aaffa25c8c19094d268,Add residual monitoring and stopping criteria to S-DRS without acceleration,Anqi Fu,anqi.fu.1987@gmail.com,Anqi Fu,anqi.fu.1987@gmail.com,2018-11-12 17:48:57-08:00,28800,2018-11-12 17:48:57-08:00,28800,True,False,"['consensus.py', 'problems.py', 'test_acceleration.py', 'test_examples.py', 'test_step_size.py']",['519e6899d07bd45c6f65238a86979549f340e866'],29,54,83,5,0.0,0.0,0.0
4cf3517bf1bc29531ae7e6fdc0ea1b8a10710aa8,Bug fixes for residual plotting,Anqi Fu,anqi.fu.1987@gmail.com,Anqi Fu,anqi.fu.1987@gmail.com,2018-11-12 17:52:52-08:00,28800,2018-11-12 17:52:52-08:00,28800,True,False,"['consensus.py', 'problems.py', 'test_basic.py']",['8b8516bd3d6907c927be5aaffa25c8c19094d268'],8,8,16,3,0.0,1.0,1.0
4dcf3a9449a6c2285e502c368b68cc22c15df41b,WIP Adding stopping criteria to AA-II S-DRS,Anqi Fu,anqi.fu.1987@gmail.com,Anqi Fu,anqi.fu.1987@gmail.com,2018-11-12 18:50:52-08:00,28800,2018-11-12 18:50:52-08:00,28800,True,False,"['acceleration.py', 'consensus.py', 'test_acceleration.py', 'test_basic.py']",['4cf3517bf1bc29531ae7e6fdc0ea1b8a10710aa8'],31,42,73,4,0.0,0.0,0.0
4e70b6252f988a01898df5161e6e63a9f6bb853e,WIP Reverting back to correct residuals. Still need to fix AA-II update step.,Anqi Fu,anqi.fu.1987@gmail.com,Anqi Fu,anqi.fu.1987@gmail.com,2018-11-12 19:43:40-08:00,28800,2018-11-12 19:43:40-08:00,28800,True,False,['consensus.py'],['4dcf3a9449a6c2285e502c368b68cc22c15df41b'],7,6,13,1,,,
9125a832513ca6b0c971356dba3c8d1cd7e27c0a,Finish AA-II implementation for consensus S-DRS,Anqi Fu,anqi.fu.1987@gmail.com,Anqi Fu,anqi.fu.1987@gmail.com,2018-11-12 20:20:08-08:00,28800,2018-11-12 20:20:08-08:00,28800,True,False,['consensus.py'],['4e70b6252f988a01898df5161e6e63a9f6bb853e'],8,20,28,1,0.0,0.0,0.0
418ccfefe8506f80df480ca64516b5069b4f216f,Add comparison test of AA-II and vanilla S-DRS on a non-negative least squares example,Anqi Fu,anqi.fu.1987@gmail.com,Anqi Fu,anqi.fu.1987@gmail.com,2018-11-12 23:10:33-08:00,28800,2018-11-12 23:10:33-08:00,28800,True,False,"['test_acceleration.py', 'test_basic.py']",['9125a832513ca6b0c971356dba3c8d1cd7e27c0a'],9,64,73,2,0.05555555555555555,0.08333333333333333,0.75
ad9ee700ea2f3a49c089b3de7056c5ab375910eb,Fix minor bug in iteration count. Add NNLS test example and update residual plot.,anqif,anqif@stanford.edu,anqif,anqif@stanford.edu,2018-11-13 16:19:24-08:00,28800,2018-11-13 16:19:24-08:00,28800,True,False,"['consensus.py', 'problems.py', 'test_basic.py']",['8b64042c244871d5e7baf6fef62b77b4dfc17bf7'],8,61,69,3,0.11764705882352941,0.9411764705882353,0.5294117647058824
357e9b3bc58baaef2a11f6606f5bc6dbbae79a4d,Get rid of some unused step size calculations,anqif,anqif@stanford.edu,anqif,anqif@stanford.edu,2018-11-13 16:24:07-08:00,28800,2018-11-13 16:24:07-08:00,28800,True,False,['test_basic.py'],['ad9ee700ea2f3a49c089b3de7056c5ab375910eb'],4,0,4,1,1.0,0.0,0.0
e63a486c397f726077d6e50f4e9711b3500c06ca,Fix a bug in projection step and add a few tests,Anqi Fu,anqi.fu.1987@gmail.com,Anqi Fu,anqi.fu.1987@gmail.com,2018-12-20 04:55:09-08:00,28800,2018-12-20 04:55:09-08:00,28800,True,False,"['consensus.py', 'test_basic.py', 'test_functions.py']",['418ccfefe8506f80df480ca64516b5069b4f216f'],9,44,53,3,0.0,1.0,1.0
e01f8963fd5d7682b54d74620215b69422ef6fb8,Fix a typo in AA weights function. Update basic tests so most pass now.,Anqi Fu,anqi.fu.1987@gmail.com,Anqi Fu,anqi.fu.1987@gmail.com,2018-12-20 05:23:40-08:00,28800,2018-12-20 05:23:40-08:00,28800,True,False,"['acceleration.py', 'consensus.py', 'problems.py', 'test_basic.py']",['e63a486c397f726077d6e50f4e9711b3500c06ca'],13,16,29,4,0.5,1.0,0.0
eb3b4b0fed44cbbb0c701dda93ede874df15e583,Fix a small bug,anqif,anqif@stanford.edu,anqif,anqif@stanford.edu,2018-12-26 13:13:05-08:00,28800,2018-12-26 13:13:05-08:00,28800,True,False,"['.gitignore', 'consensus.py']",['e01f8963fd5d7682b54d74620215b69422ef6fb8'],1,5,6,2,,,
9e3cb1b27ca2b18e2ac746317e0f5170adc342e0,Add test with Toeplitz matrix and standardization of local data,anqif,anqif@stanford.edu,anqif,anqif@stanford.edu,2018-12-26 22:27:03-08:00,28800,2018-12-26 22:27:03-08:00,28800,True,False,"['test_acceleration.py', 'test_functions.py', 'test_precondition.py']",['eb3b4b0fed44cbbb0c701dda93ede874df15e583'],7,191,198,3,0.27522935779816515,1.0,0.7522935779816514
a60ca45d77fae7f03e3e1c32c2b928060c138842,Fix a math mistake in update z^(k+1/2) = s^(k) not z^(k),anqif,anqif@stanford.edu,anqif,anqif@stanford.edu,2018-12-27 15:13:04-08:00,28800,2018-12-27 15:13:04-08:00,28800,True,False,"['consensus.py', 'test_precondition.py']",['9e3cb1b27ca2b18e2ac746317e0f5170adc342e0'],8,9,17,2,,,
3ac4e0793cff3a015e314488a5e5fa632c82321f,Fix math mistake in s^(k+1/2) update,anqif,anqif@stanford.edu,anqif,anqif@stanford.edu,2018-12-27 17:41:00-08:00,28800,2018-12-27 17:41:00-08:00,28800,True,False,['consensus.py'],['a60ca45d77fae7f03e3e1c32c2b928060c138842'],13,7,20,1,0.8,0.8,0.8
b23fba37f3cc9a637d5e4d724ef2c25beba78e88,Throw an error if AA-II weights problem returns a bad status,anqif,anqif@stanford.edu,anqif,anqif@stanford.edu,2018-12-27 17:41:40-08:00,28800,2018-12-27 17:41:40-08:00,28800,True,False,['acceleration.py'],['3ac4e0793cff3a015e314488a5e5fa632c82321f'],0,3,3,1,1.0,1.0,0.0
d3ba616b2decfc3b2acfb5d6800f2860ebcf811c,Use numpy's exact least squares solver to get AA-II weights,Anqi Fu,anqi.fu.1987@gmail.com,Anqi Fu,anqi.fu.1987@gmail.com,2019-01-13 23:22:01-08:00,28800,2019-01-13 23:22:01-08:00,28800,True,False,"['acceleration.py', 'consensus.py', 'test_acceleration.py', 'test_functions.py']",['b23fba37f3cc9a637d5e4d724ef2c25beba78e88'],25,43,68,4,0.0,0.0,0.4
40c2f02b9977a3d07b661d4e19926764ad12a53f,Update to-do list,Anqi Fu,anqi.fu.1987@gmail.com,Anqi Fu,anqi.fu.1987@gmail.com,2019-01-13 23:26:07-08:00,28800,2019-01-13 23:26:07-08:00,28800,True,False,['TODO'],['d3ba616b2decfc3b2acfb5d6800f2860ebcf811c'],0,8,8,1,,,
3ca655d877075e8bbe16f700f235213a7144cc34,Add NNLS example with UCI Madelon data. Fix NNLS Gaussian acceleration test,anqif,anqif@stanford.edu,anqif,anqif@stanford.edu,2019-01-15 15:05:12-08:00,28800,2019-01-15 15:05:12-08:00,28800,True,False,"['test_acceleration.py', 'madelon_train.data', 'madelon_train.labels', 'madelon_example.py']",['40c2f02b9977a3d07b661d4e19926764ad12a53f'],1,4082,4083,4,0.28846153846153844,0.9807692307692307,0.7115384615384616
122557edbaef854dc5d8f190195c3df04b1bd9c6,Add comparison of accelerated algorithm with vanilla S-DRS to a few example tests,anqif,anqif@stanford.edu,anqif,anqif@stanford.edu,2019-01-15 23:15:25-08:00,28800,2019-01-15 23:15:25-08:00,28800,True,False,"['TODO', 'base_test.py', 'test_acceleration.py', 'test_examples.py', 'flow_control.py', 'lasso_example.py', 'madelon_example.py', 'svm_example.py', 'vehicle_formation.py']",['3ca655d877075e8bbe16f700f235213a7144cc34'],72,125,197,9,0.0,1.0,0.9444444444444444
99432b3ecd6406b216a304a3663c160711667e9e,Fix a minor bug in solution unpacking,anqif,anqif@stanford.edu,anqif,anqif@stanford.edu,2019-01-16 12:40:48-08:00,28800,2019-01-16 12:40:48-08:00,28800,True,False,"['problems.py', 'test_examples.py']",['122557edbaef854dc5d8f190195c3df04b1bd9c6'],3,6,9,2,0.6666666666666666,1.0,1.0
cb253f0df76a7f60f535cf18cde183edddda24b5,Add sparse inverse covariance example. WIP on floor planning example. Fix a minor bug in Problems,anqif,anqif@stanford.edu,anqif,anqif@stanford.edu,2019-01-16 17:46:30-08:00,28800,2019-01-16 17:46:30-08:00,28800,True,False,"['problems.py', 'floor_planning.py', 'sparse_covariance.py']",['99432b3ecd6406b216a304a3663c160711667e9e'],1,205,206,3,0.7428571428571429,1.0,1.0
55d56bc2adecb10bc8e7535f715f54a1db09e75e,Modify floor planning problem to split box constraints into separate problems,anqif,anqif@stanford.edu,anqif,anqif@stanford.edu,2019-01-20 01:42:19-08:00,28800,2019-01-20 01:42:19-08:00,28800,True,False,['floor_planning.py'],['cb253f0df76a7f60f535cf18cde183edddda24b5'],18,33,51,1,0.09090909090909091,0.0,0.0
677cff3eab74c745ab0b070bea95a95d35172645,Add l2 penalty in sparse inverse covariance example,anqif,anqif@stanford.edu,anqif,anqif@stanford.edu,2019-01-20 05:03:56-08:00,28800,2019-01-20 05:03:56-08:00,28800,True,False,['sparse_covariance.py'],['55d56bc2adecb10bc8e7535f715f54a1db09e75e'],9,11,20,1,,,
2e0ae5ad092b2a62fb64ef785a2e2b4f1a67677e,Fix some comments and output,anqif,anqif@stanford.edu,anqif,anqif@stanford.edu,2019-01-20 05:10:52-08:00,28800,2019-01-20 05:10:52-08:00,28800,True,False,['sparse_covariance.py'],['677cff3eab74c745ab0b070bea95a95d35172645'],8,8,16,1,,,
0ab59e54ef6873bfd163b708af2420a49b92a3b7,Add tests for floor planning and sparse inverse covariance examples,Anqi Fu,anqi.fu.1987@gmail.com,Anqi Fu,anqi.fu.1987@gmail.com,2019-01-20 23:06:39-08:00,28800,2019-01-20 23:06:39-08:00,28800,True,False,"['test_examples.py', 'floor_planning.py', 'sparse_covariance.py']",['2e0ae5ad092b2a62fb64ef785a2e2b4f1a67677e'],13,222,235,3,0.32515337423312884,0.8159509202453987,0.8159509202453987
d6360b88954def6ecb34322a42326c95c2c0710f,Add simple proximal functions,anqif,anqif@stanford.edu,anqif,anqif@stanford.edu,2019-01-26 20:28:30-08:00,28800,2019-01-26 20:28:30-08:00,28800,True,False,"['consensus.py', 'proximal.py']",['0ab59e54ef6873bfd163b708af2420a49b92a3b7'],2,29,31,2,0.0,0.0,0.0
a56eed0ee16e2ad02a78036dc6754849fb69c009,Add more proximal operators for matrix functions,anqif,anqif@stanford.edu,anqif,anqif@stanford.edu,2019-01-27 03:10:25-08:00,28800,2019-01-27 03:10:25-08:00,28800,True,False,"['consensus.py', 'proximal.py']",['d6360b88954def6ecb34322a42326c95c2c0710f'],5,54,59,2,1.0,0.5,0.5
048ff1f8067e6963637450900551605017095fe0,WIP Add new proximal operators for simple functions and begin testing,anqif,anqif@stanford.edu,anqif,anqif@stanford.edu,2019-01-28 21:19:27-08:00,28800,2019-01-28 21:19:27-08:00,28800,True,False,"['proximal.py', 'test_proximal.py', 'sparse_covariance.py']",['a56eed0ee16e2ad02a78036dc6754849fb69c009'],11,88,99,3,0.48717948717948717,0.7692307692307693,0.7692307692307693
349c4639b74797e06b8282c6405a37393b3d76aa,Add more proximal operators for functions of matrices. Update to-do list.,anqif,anqif@stanford.edu,anqif,anqif@stanford.edu,2019-01-29 18:16:23-08:00,28800,2019-01-29 18:16:23-08:00,28800,True,False,"['TODO', 'consensus.py', 'proximal.py', 'test_proximal.py']",['048ff1f8067e6963637450900551605017095fe0'],51,62,113,4,0.0,0.0,0.0
a4fb2b49aa835649d5d08786bec0e5ac69f2781f,Add trace operator for product of variable and constant,anqif,anqif@stanford.edu,anqif,anqif@stanford.edu,2019-01-29 18:36:21-08:00,28800,2019-01-29 18:36:21-08:00,28800,True,False,"['proximal.py', 'test_proximal.py']",['349c4639b74797e06b8282c6405a37393b3d76aa'],7,18,25,2,0.25,0.25,0.25
ce28aed88a1ec93dc7738c0d0bd8fcf65f80397c,Define a ProxOperator class that wraps simple proximal operators and the CVXPY proximal operator together into a single clean update,anqif,anqif@stanford.edu,anqif,anqif@stanford.edu,2019-01-30 01:08:32-08:00,28800,2019-01-30 01:08:32-08:00,28800,True,False,"['proximal.py', 'test_proximal.py']",['a4fb2b49aa835649d5d08786bec0e5ac69f2781f'],75,172,247,2,0.632183908045977,0.7011494252873564,1.0
4bb71e4f576c2103db2e07c8b662331dcdf80826,WIP Debugging proximal operator class and related functions,anqif,anqif@stanford.edu,anqif,anqif@stanford.edu,2019-01-30 18:37:21-08:00,28800,2019-01-30 18:37:21-08:00,28800,True,False,"['consensus.py', 'proximal.py', 'test_proximal.py']",['ce28aed88a1ec93dc7738c0d0bd8fcf65f80397c'],52,93,145,3,0.037037037037037035,0.0,0.2962962962962963
5853dda84b925ebabab81491015db0f0219f8262,Allow for symmetric positive semidefinite constraint in simple matrix proximal operator,anqif,anqif@stanford.edu,anqif,anqif@stanford.edu,2019-01-30 19:03:54-08:00,28800,2019-01-30 19:03:54-08:00,28800,True,False,"['proximal.py', 'test_proximal.py']",['4bb71e4f576c2103db2e07c8b662331dcdf80826'],22,26,48,2,1.0,0.0,0.75
92aeef28bb67bb9481f27e7352dd7b90e6cf09bc,WIP Fixing more bugs related to symmetric PSD constraints in proximal operator,Anqi Fu,anqi.fu.1987@gmail.com,Anqi Fu,anqi.fu.1987@gmail.com,2019-01-30 22:23:46-08:00,28800,2019-01-30 22:23:46-08:00,28800,True,False,"['acceleration.py', 'proximal.py', 'test_proximal.py']",['5853dda84b925ebabab81491015db0f0219f8262'],30,38,68,3,0.7142857142857143,0.7142857142857143,0.0
6861f791434df2c2b15a0d7b9c0a3aa50fdea6fd,Minor updates and notes for testing,Anqi Fu,anqi.fu.1987@gmail.com,Anqi Fu,anqi.fu.1987@gmail.com,2019-01-31 00:35:06-08:00,28800,2019-01-31 00:35:06-08:00,28800,True,False,"['TODO', 'consensus.py', 'proximal.py', 'test_proximal.py', 'sparse_covariance.py']",['92aeef28bb67bb9481f27e7352dd7b90e6cf09bc'],12,11,23,5,0.0,0.0,0.0
f26b8ae9b115eeddb2518919fc274bceb02ff5f0,Automatically factor out positive scalar multiplicative constant on an objective function in proximal operator. Add sparse inverse covariance matrix estimation example purely using simple proximal operators.,anqif,anqif@stanford.edu,anqif,anqif@stanford.edu,2019-01-31 18:19:20-08:00,28800,2019-01-31 18:19:20-08:00,28800,True,False,"['proximal.py', 'test_proximal.py', 'sparse_covariance.py']",['6861f791434df2c2b15a0d7b9c0a3aa50fdea6fd'],10,116,126,3,0.0,0.68,0.68
a58198314025126abda824dfebf10f370da11749,Change sparse inverse covariance matrix estimation example to use simple proximal operators parametrized by step size.,Anqi Fu,anqi.fu.1987@gmail.com,Anqi Fu,anqi.fu.1987@gmail.com,2019-02-12 19:25:04-08:00,28800,2019-02-12 19:25:04-08:00,28800,True,False,"['sparse_covariance.py', 'sparse_covariance.py']",['f26b8ae9b115eeddb2518919fc274bceb02ff5f0'],90,12,102,2,,,
1a5ae42ece851ced40de8625f4a0a97652a86503,Change sparse inverse covariance matrix estimation example to use simple proximal operators parametrized by step size.,Anqi Fu,anqi.fu.1987@gmail.com,Anqi Fu,anqi.fu.1987@gmail.com,2019-02-12 19:26:43-08:00,28800,2019-02-12 19:26:43-08:00,28800,True,False,['sparse_covariance.py'],['a58198314025126abda824dfebf10f370da11749'],7,7,14,1,,,
0a853b48177b5a86a407b08dd278123c780a87a3,WIP Generalize projection step using LSQR solver in S-DRS algorithm,anqif,anqif@stanford.edu,anqif,anqif@stanford.edu,2019-02-12 20:53:57-08:00,28800,2019-02-12 20:53:57-08:00,28800,True,False,"['TODO', 'consensus.py', 'test_functions.py', 'utilities.py']",['f26b8ae9b115eeddb2518919fc274bceb02ff5f0'],13,44,57,4,0.0,0.9166666666666666,1.0
0194d5b629da9436e65d5a29466f48ebc0d67d7a,WIP Continue work on generalized projection step,Anqi Fu,anqi.fu.1987@gmail.com,Anqi Fu,anqi.fu.1987@gmail.com,2019-02-13 01:17:56-08:00,28800,2019-02-13 01:17:56-08:00,28800,True,False,['consensus.py'],['456f5ad4792715824528c69fec2f4ff4443fba06'],9,10,19,1,,,
d92e69fdaa89194d57713f7fb0de11026e8734dc,Revert back to using CVXPY for symmetric PSD projections until proximal operator is corrected. Fix minor bug in edge case when no variables in a problem.,anqif,anqif@stanford.edu,anqif,anqif@stanford.edu,2019-02-13 14:03:27-08:00,28800,2019-02-13 14:03:27-08:00,28800,True,False,"['consensus.py', 'proximal.py', 'sparse_covariance.py']",['0194d5b629da9436e65d5a29466f48ebc0d67d7a'],20,31,51,3,1.0,1.0,1.0
9e9dba8ef48355126681c9e5b07522f46421d724,Throw an exception if input is not in the proper domain for proximal operator of negative log-determinant and of positive semidefinite cone,Anqi Fu,anqi.fu.1987@gmail.com,Anqi Fu,anqi.fu.1987@gmail.com,2019-02-13 21:07:34-08:00,28800,2019-02-13 21:07:34-08:00,28800,True,False,"['proximal.py', 'test_proximal.py']",['d92e69fdaa89194d57713f7fb0de11026e8734dc'],5,21,26,2,0.7142857142857143,0.7142857142857143,1.0
3a443671d72e4a7c231ea6ee739f112f4622efbb,WIP Finished code for stacking and partitioning dictionaries of variable values. Still need to construct matrices for actual projection.,anqif,anqif@stanford.edu,anqif,anqif@stanford.edu,2019-02-14 17:31:43-08:00,28800,2019-02-14 17:31:43-08:00,28800,True,False,['consensus.py'],['d92e69fdaa89194d57713f7fb0de11026e8734dc'],5,25,30,1,,,
a22bc697722bae1f8443bfcf0883c2f36e310ac0,"Finish general projection code, but still need to test and debug.",Anqi Fu,anqi.fu.1987@gmail.com,Anqi Fu,anqi.fu.1987@gmail.com,2019-02-15 00:37:12-08:00,28800,2019-02-15 00:37:12-08:00,28800,True,False,['consensus.py'],['642187a377930f0ae84794fc266a8b8150f7fde6'],38,61,99,1,0.0,0.0,0.0
b725d4b0aae5589f54df7131d805ced799faba8d,Fixed some bugs in general projection step and added a simple test,Anqi Fu,anqi.fu.1987@gmail.com,Anqi Fu,anqi.fu.1987@gmail.com,2019-02-15 21:50:21-08:00,28800,2019-02-15 21:50:21-08:00,28800,True,False,"['consensus.py', 'test_functions.py']",['a22bc697722bae1f8443bfcf0883c2f36e310ac0'],9,17,26,2,1.0,1.0,1.0
cec8bdff79c9aa26ebdefcadface9f2216dc4640,More complex tests of general projection function,Anqi Fu,anqi.fu.1987@gmail.com,Anqi Fu,anqi.fu.1987@gmail.com,2019-02-15 23:00:49-08:00,28800,2019-02-15 23:00:49-08:00,28800,True,False,"['consensus.py', 'test_functions.py']",['b725d4b0aae5589f54df7131d805ced799faba8d'],1,34,35,2,0.0,1.0,1.0
6cb964957219c387fd38ea7732528abe279a9007,Refactor and move some functions around.,Anqi Fu,anqi.fu.1987@gmail.com,Anqi Fu,anqi.fu.1987@gmail.com,2019-02-16 02:28:32-08:00,28800,2019-02-16 02:28:32-08:00,28800,True,False,"['acceleration.py', 'consensus.py', 'test_basic.py', 'test_examples.py', 'test_precondition.py', 'test_proximal.py', 'test_step_size.py', 'utilities.py']",['cec8bdff79c9aa26ebdefcadface9f2216dc4640'],83,93,176,8,0.0,1.0,0.0
9e04052ecb85ebc1b66e3726f13e9bbc068e33fb,Compute and cache matrices and other relevant information for general projection step,Anqi Fu,anqi.fu.1987@gmail.com,Anqi Fu,anqi.fu.1987@gmail.com,2019-02-16 19:48:44-08:00,28800,2019-02-16 19:48:44-08:00,28800,True,False,['consensus.py'],['6cb964957219c387fd38ea7732528abe279a9007'],5,12,17,1,0.0,0.0,0.0
189ad165c714eacb1228a65d1ceb39f90506463b,Cache Cholesky decomposition to speed up projection step,Anqi Fu,anqi.fu.1987@gmail.com,Anqi Fu,anqi.fu.1987@gmail.com,2019-02-16 22:22:38-08:00,28800,2019-02-16 22:22:38-08:00,28800,True,False,['consensus.py'],['9e04052ecb85ebc1b66e3726f13e9bbc068e33fb'],4,11,15,1,0.0,0.0,0.0
180b5d6878080bb9c4f38c7196de90092d2fdbc1,Fix some of the checks for simple proximal functions. Re-enable the use of these functions when a simple problem structure is given.,Anqi Fu,anqi.fu.1987@gmail.com,Anqi Fu,anqi.fu.1987@gmail.com,2019-02-17 02:15:57-08:00,28800,2019-02-17 02:15:57-08:00,28800,True,False,"['consensus.py', 'proximal.py', 'test_proximal.py', 'utilities.py']",['189ad165c714eacb1228a65d1ceb39f90506463b'],26,45,71,4,0.875,0.875,1.0
eeedca7017e81633d223954c3fe628e84c92e75c,Miscellaneous edits,anqif,anqif@stanford.edu,anqif,anqif@stanford.edu,2019-02-20 12:05:12-08:00,28800,2019-02-20 12:05:12-08:00,28800,True,False,"['consensus.py', 'test_acceleration.py', 'lasso_example.py']",['180b5d6878080bb9c4f38c7196de90092d2fdbc1'],4,4,8,3,,,
9b409d16aa785ae122e533b357163af9ccd3b6e7,Ignore Pycharm data,anqif,anqif@stanford.edu,anqif,anqif@stanford.edu,2019-02-20 12:06:34-08:00,28800,2019-02-20 12:06:34-08:00,28800,True,False,['.gitignore'],['357e9b3bc58baaef2a11f6606f5bc6dbbae79a4d'],0,4,4,1,,,
ddf320f939f836c3b04b55b279058bbf3d84cbee,Use sparse Cholesky decomposition of MM^T,anqif,anqif@stanford.edu,anqif,anqif@stanford.edu,2019-02-20 13:07:34-08:00,28800,2019-02-20 13:07:34-08:00,28800,True,False,['consensus.py'],['da7a99891f23cf338c9a6e384699afbeb7edca20'],7,12,19,1,1.0,1.0,1.0
ebe92a32faff2ff1ba85d796c8004eef889a1757,Add scikit-sparse package requirement for solving Cholesky,anqif,anqif@stanford.edu,anqif,anqif@stanford.edu,2019-02-20 13:09:38-08:00,28800,2019-02-20 13:09:38-08:00,28800,True,False,['setup.py'],['ddf320f939f836c3b04b55b279058bbf3d84cbee'],2,3,5,1,,,
ed03f9158faaacf4923a4006dd79fc343cfb86ce,WIP Working on network optimization example,anqif,anqif@stanford.edu,anqif,anqif@stanford.edu,2019-03-19 17:51:21-07:00,25200,2019-03-19 17:51:21-07:00,25200,True,False,"['abilene_capacity.csv', 'abilene_topology.csv', 'network_optimization.py']",['ebe92a32faff2ff1ba85d796c8004eef889a1757'],0,87,87,3,1.0,1.0,1.0
60f6564a8b01182d3be449ad9a4582c9a9ffee6f,Add bicommodity network flow problem from EE364B HW5.1,Anqi Fu,anqi.fu.1987@gmail.com,Anqi Fu,anqi.fu.1987@gmail.com,2019-04-02 18:38:27-07:00,25200,2019-04-02 18:38:27-07:00,25200,True,False,"['bicommodity.py', 'flow_control.py']",['ed03f9158faaacf4923a4006dd79fc343cfb86ce'],0,73,73,2,0.0,1.0,1.0
8150ab6c4735f4a73a767780e789b1ef613cc288,Add single commodity flow example,Anqi Fu,anqi.fu.1987@gmail.com,Anqi Fu,anqi.fu.1987@gmail.com,2019-04-05 00:22:38-07:00,25200,2019-04-05 00:22:38-07:00,25200,True,False,"['bicommodity.py', 'single_commodity.py']",['60f6564a8b01182d3be449ad9a4582c9a9ffee6f'],1,45,46,2,0.0,1.0,1.0
d6c2bfff2a8053f70f6890c9cb351ef881093675,Add optimal control example,Anqi Fu,anqi.fu.1987@gmail.com,Anqi Fu,anqi.fu.1987@gmail.com,2019-04-11 20:23:22-07:00,25200,2019-04-11 20:23:22-07:00,25200,True,False,"['network_optimization.py', 'optimal_control.py']",['8150ab6c4735f4a73a767780e789b1ef613cc288'],1,48,49,2,0.0,1.0,1.0
b4cb25dea0591b7bf3e30885c962eb4be985f5bc,First cut at primal A2DR algorithm for general distributed problem,Anqi Fu,anqi.fu.1987@gmail.com,Anqi Fu,anqi.fu.1987@gmail.com,2019-04-25 20:33:25-07:00,25200,2019-04-25 20:33:25-07:00,25200,True,False,"['acceleration.py', 'solver.py']",['d6c2bfff2a8053f70f6890c9cb351ef881093675'],9,197,206,2,0.08571428571428572,0.08571428571428572,0.0
1839fb6e2a920ba0bb94844d83d704f9e0c1f13e,Return x^(k+1/2) at end of algorithm,anqif,anqif@stanford.edu,anqif,anqif@stanford.edu,2019-04-26 12:13:48-07:00,25200,2019-04-26 12:13:48-07:00,25200,True,False,['solver.py'],['b4cb25dea0591b7bf3e30885c962eb4be985f5bc'],1,1,2,1,,,
82e26a640a125b82a191240a1284e488c78c49a3,add matrix equilibration and a test script,junziz,junziz@stanford.edu,junziz,junziz@stanford.edu,2019-04-27 23:00:20-07:00,25200,2019-04-27 23:00:20-07:00,25200,True,False,"['mat_equil.py', 'test_equil.ipynb']",['1839fb6e2a920ba0bb94844d83d704f9e0c1f13e'],0,252,252,2,0.0,0.0,0.0
09548c2e03059094c56e34c1193e7840f6c91748,move the matrix equilibration ipynb to exampes/notebooks,junziz,junziz@stanford.edu,junziz,junziz@stanford.edu,2019-04-28 18:58:09-07:00,25200,2019-04-28 18:58:09-07:00,25200,True,False,['test_equil.ipynb'],['82e26a640a125b82a191240a1284e488c78c49a3'],0,0,0,1,,,
2e89b85b72dc78020c809dd4f60e9b718548452f,Add NNLS example with vanilla DRS,anqif,anqif@stanford.edu,anqif,anqif@stanford.edu,2019-04-30 23:09:33-07:00,25200,2019-04-30 23:09:33-07:00,25200,True,False,"['precondition.py', 'solver.py', 'test_precondition.py', 'test_solver.py']",['09548c2e03059094c56e34c1193e7840f6c91748'],6,158,164,4,0.13978494623655913,0.9032258064516129,0.8602150537634409
ba3915be52ee83c2a25f8202105b9da16e3bbcd1,Fix some bugs in Anderson acceleration step and update test to include A2DR comparison and residual plots,anqif,anqif@stanford.edu,anqif,anqif@stanford.edu,2019-05-01 11:55:42-07:00,25200,2019-05-01 11:55:42-07:00,25200,True,False,"['solver.py', 'base_test.py', 'test_solver.py', 'abilene.data']",['2e89b85b72dc78020c809dd4f60e9b718548452f'],39,124,163,4,0.0,0.0,0.0
b48f6ca7b15236c5afdea6d5a9d6c1129de5ca97,WIP Add preconditioning step to A2DR algorithm,anqif,anqif@stanford.edu,anqif,anqif@stanford.edu,2019-05-01 19:31:04-07:00,25200,2019-05-01 19:31:04-07:00,25200,True,False,"['acceleration.py', 'precondition.py', 'solver.py', 'test_solver.py']",['ba3915be52ee83c2a25f8202105b9da16e3bbcd1'],11,28,39,4,0.5333333333333333,0.6666666666666666,0.13333333333333333
d9564960cec54d68caa6cc465d91c9f141651843,Add standard proximal point solver when no linear constraints (problem fully separable).,Anqi Fu,anqi.fu.1987@gmail.com,Anqi Fu,anqi.fu.1987@gmail.com,2019-05-02 00:34:47-07:00,25200,2019-05-02 00:34:47-07:00,25200,True,False,"['precondition.py', 'solver.py', 'test_solver.py']",['b48f6ca7b15236c5afdea6d5a9d6c1129de5ca97'],21,122,143,3,0.17647058823529413,0.5147058823529411,0.3382352941176471
9ea84fe4e7581a7e1bfdcf0d0f370e771448c67a,"For fully separable case, add Anderson acceleration to each separate worker's proximal point update",Anqi Fu,anqi.fu.1987@gmail.com,Anqi Fu,anqi.fu.1987@gmail.com,2019-05-02 02:16:48-07:00,25200,2019-05-02 02:16:48-07:00,25200,True,False,"['solver.py', 'base_test.py', 'test_solver.py']",['d9564960cec54d68caa6cc465d91c9f141651843'],19,81,100,3,0.0,0.0,0.2857142857142857
37a4fc4b66c248759709c12345c03e7eb70092a9,Fixed a bug in calculation of AA2 weights and added a test,Anqi Fu,anqi.fu.1987@gmail.com,Anqi Fu,anqi.fu.1987@gmail.com,2019-05-02 14:06:39-07:00,25200,2019-05-02 14:06:39-07:00,25200,True,False,"['acceleration.py', 'solver.py', 'test_functions.py', 'test_solver.py']",['9ea84fe4e7581a7e1bfdcf0d0f370e771448c67a'],16,41,57,4,0.0,1.0,1.0
62cb7178cc31b526b9a9f4ef8883f499fdf6ec33,Fixed a problem with keeping the correct history of fixed point iterations. NNLS with A2DR should be functioning properly,Anqi Fu,anqi.fu.1987@gmail.com,Anqi Fu,anqi.fu.1987@gmail.com,2019-05-02 14:12:51-07:00,25200,2019-05-02 14:12:51-07:00,25200,True,False,"['solver.py', 'test_solver.py']",['37a4fc4b66c248759709c12345c03e7eb70092a9'],19,18,37,2,0.0,0.0,1.0
1e856602c962e646947ee29de034cf8e5b18510a,Update NNLS test to plot primal/dual residuals of DRS and A2DR on same graph,Anqi Fu,anqi.fu.1987@gmail.com,Anqi Fu,anqi.fu.1987@gmail.com,2019-05-02 14:23:01-07:00,25200,2019-05-02 14:23:01-07:00,25200,True,False,['test_solver.py'],['62cb7178cc31b526b9a9f4ef8883f499fdf6ec33'],1,10,11,1,0.0,1.0,1.0
ca9e1f72c964c2b6619176c9a2647ffe0c5d07fc,"Refactor some of the proximal files and functions. Implement Anderson acceleration with global (central server) computation of weights, and set as default when the problem has no linear constraints",Anqi Fu,anqi.fu.1987@gmail.com,Anqi Fu,anqi.fu.1987@gmail.com,2019-05-02 19:07:52-07:00,25200,2019-05-02 19:07:52-07:00,25200,True,False,"['__init__.py', 'acceleration.py', 'consensus.py', '__init__.py', 'prox_operators.py', 'prox_point.py', 'solver.py', 'test_functions.py', 'test_proximal.py', 'test_solver.py']",['1e856602c962e646947ee29de034cf8e5b18510a'],150,340,490,10,0.0,0.0,0.0
944f0663d40d272ed0f4a620559d6c48c245456e,Add a test for sparse inverse covariance problem. Currently not passing because the matrix stops being PSD after a few iterations.,anqif,anqif@stanford.edu,anqif,anqif@stanford.edu,2019-05-03 13:53:26-07:00,25200,2019-05-03 13:53:26-07:00,25200,True,False,"['__init__.py', 'solver.py', 'base_test.py', 'test_solver.py']",['ca9e1f72c964c2b6619176c9a2647ffe0c5d07fc'],4,109,113,4,0.26582278481012656,0.9746835443037974,0.9746835443037974
a558e13cbecdab5faf828b4e58486f406a9dcc46,Add a test for the LQR optimal control problem,Anqi Fu,anqi.fu.1987@gmail.com,Anqi Fu,anqi.fu.1987@gmail.com,2019-05-06 01:10:29-07:00,25200,2019-05-06 01:10:29-07:00,25200,True,False,"['base_test.py', 'test_solver.py']",['944f0663d40d272ed0f4a620559d6c48c245456e'],15,110,125,2,0.1891891891891892,1.0,1.0
d734c51ffdc81a55b1e10658a53e5dc55763a03b,Add comparison of optimal control result to CVXPY,Anqi Fu,anqi.fu.1987@gmail.com,Anqi Fu,anqi.fu.1987@gmail.com,2019-05-06 01:26:05-07:00,25200,2019-05-06 01:26:05-07:00,25200,True,False,['test_solver.py'],['a558e13cbecdab5faf828b4e58486f406a9dcc46'],14,38,52,1,0.4090909090909091,1.0,1.0
584f7b63839be159d128aeb9d89c47b1dec10aca,WIP Adding a single commodity flow example with a small random network,Anqi Fu,anqi.fu.1987@gmail.com,Anqi Fu,anqi.fu.1987@gmail.com,2019-05-07 19:21:26-07:00,25200,2019-05-07 19:21:26-07:00,25200,True,False,['test_solver.py'],['d734c51ffdc81a55b1e10658a53e5dc55763a03b'],16,115,131,1,0.0,1.0,1.0
5d9733cf36d7240d46569c1f03eb1e1a58abc8b1,Generate random adjacency matrix for single commodity flow,Anqi Fu,anqi.fu.1987@gmail.com,Anqi Fu,anqi.fu.1987@gmail.com,2019-05-07 19:29:14-07:00,25200,2019-05-07 19:29:14-07:00,25200,True,False,['test_solver.py'],['584f7b63839be159d128aeb9d89c47b1dec10aca'],3,2,5,1,,,
fe95354f3c221395eaf6684fd8ad8dc21323e01a,Fix some typos in sparse inverse covariance example,Anqi Fu,anqi.fu.1987@gmail.com,Anqi Fu,anqi.fu.1987@gmail.com,2019-05-07 22:24:40-07:00,25200,2019-05-07 22:24:40-07:00,25200,True,False,['test_solver.py'],['5d9733cf36d7240d46569c1f03eb1e1a58abc8b1'],3,7,10,1,,,
4c6e3bddc92a9e5f6bde2ef5611764234908945b,Add l1 trend filtering example,anqif,anqif@stanford.edu,anqif,anqif@stanford.edu,2019-05-08 14:53:17-07:00,25200,2019-05-08 14:53:17-07:00,25200,True,False,"['base_test.py', 'test_solver.py']",['fe95354f3c221395eaf6684fd8ad8dc21323e01a'],15,90,105,2,0.0425531914893617,1.0,1.0
69773028057e577102d2344e07655a3e9cd231e0,WIP Adding lasso and multi scenario optimal control examples,Anqi Fu,anqi.fu.1987@gmail.com,Anqi Fu,anqi.fu.1987@gmail.com,2019-05-10 00:32:45-07:00,25200,2019-05-10 00:32:45-07:00,25200,True,False,['test_solver.py'],['4c6e3bddc92a9e5f6bde2ef5611764234908945b'],36,172,208,1,0.234375,0.390625,0.90625
170b781e3f68d199dc2335576e8cc788fc84b12d,WIP Still working on multi-task logistic regression. Fix a mistake in proximal operator for log determinant,Anqi Fu,anqi.fu.1987@gmail.com,Anqi Fu,anqi.fu.1987@gmail.com,2019-05-10 13:24:00-07:00,25200,2019-05-10 13:24:00-07:00,25200,True,False,"['prox_operators.py', 'base_test.py', 'test_solver.py']",['69773028057e577102d2344e07655a3e9cd231e0'],85,111,196,3,1.0,1.0,0.5238095238095238
aac22abc88701e762f89f4886779070bb70167c4,WIP Revising multi scenario optimal control to include variable bounds on control and correct constraints,anqif,anqif@stanford.edu,anqif,anqif@stanford.edu,2019-05-10 17:47:17-07:00,25200,2019-05-10 17:47:17-07:00,25200,True,False,['test_solver.py'],['170b781e3f68d199dc2335576e8cc788fc84b12d'],48,73,121,1,0.75,0.75,1.0
341dac983e2b54ac1c3670805aa5b5abf8aa10c1,"WIP Fixed some bugs and math mistakes in multi-scenario control, but still not working with constraint on starting u_0 vectors",Anqi Fu,anqi.fu.1987@gmail.com,Anqi Fu,anqi.fu.1987@gmail.com,2019-05-11 01:41:54-07:00,25200,2019-05-11 01:41:54-07:00,25200,True,False,['test_solver.py'],['aac22abc88701e762f89f4886779070bb70167c4'],33,50,83,1,0.4444444444444444,0.0,1.0
d057145abddd22436505785cf248205bdb66fc39,Fixed a mistake in creating constraint matrices for multi-task logistic,Anqi Fu,anqi.fu.1987@gmail.com,Anqi Fu,anqi.fu.1987@gmail.com,2019-05-11 03:34:10-07:00,25200,2019-05-11 03:34:10-07:00,25200,True,False,['test_solver.py'],['341dac983e2b54ac1c3670805aa5b5abf8aa10c1'],27,78,105,1,0.5263157894736842,1.0,1.0
cef9f307e86239f749a50b6085c45138a2f1412b,Simplify multi-scenario optimal control example considerably after fixing a typo,Anqi Fu,anqi.fu.1987@gmail.com,Anqi Fu,anqi.fu.1987@gmail.com,2019-05-11 18:02:23-07:00,25200,2019-05-11 18:02:23-07:00,25200,True,False,['test_solver.py'],['d057145abddd22436505785cf248205bdb66fc39'],44,46,90,1,0.4666666666666667,0.4666666666666667,0.0
5b9e9dec17a6f6c5f0f5c638887d2f4c4634817b,Finally fixed multi-scenario optimal control bugs!,Anqi Fu,anqi.fu.1987@gmail.com,Anqi Fu,anqi.fu.1987@gmail.com,2019-05-11 18:46:26-07:00,25200,2019-05-11 18:46:26-07:00,25200,True,False,['test_solver.py'],['cef9f307e86239f749a50b6085c45138a2f1412b'],25,27,52,1,0.0,0.0,0.5
aeaa3ab8c0950e89d1e6d66e8eaef11bb75b8b5d,Comment out constraint checks in objective function calculation for multi-scenario optimal control since accuracy is currently poor,Anqi Fu,anqi.fu.1987@gmail.com,Anqi Fu,anqi.fu.1987@gmail.com,2019-05-11 18:53:43-07:00,25200,2019-05-11 18:53:43-07:00,25200,True,False,['test_solver.py'],['5b9e9dec17a6f6c5f0f5c638887d2f4c4634817b'],5,5,10,1,1.0,1.0,0.0
cf24bfc79b4424831b3e8e2b4824842310e8fbf5,"WIP debugging the proximal of multi-task logistic, and more",junziz,junziz@stanford.edu,junziz,junziz@stanford.edu,2019-05-12 17:37:33-07:00,25200,2019-05-12 17:37:33-07:00,25200,True,False,"['__init__.py', 'acceleration.py', 'consensus.py', 'precondition.py', 'problems.py', 'solver.py', 'utilities.py', 'test_solver_debug-checkpoint.ipynb', 'test_solver_debug.ipynb']",['aeaa3ab8c0950e89d1e6d66e8eaef11bb75b8b5d'],0,2309,2309,9,0.289568345323741,0.2949640287769784,0.2787769784172662
d1d35c07bf4dc5512ae09359566f2c530450050b,Add safeguarding to AA step,Anqi Fu,anqi.fu.1987@gmail.com,Anqi Fu,anqi.fu.1987@gmail.com,2019-05-17 18:01:17-07:00,25200,2019-05-17 18:01:17-07:00,25200,True,False,"['solver.py', 'test_solver.py']",['cf24bfc79b4424831b3e8e2b4824842310e8fbf5'],40,76,116,2,0.0,0.0,0.0
f0c1535670d6b69343767126e1e351a70eccb9f8,Safeguarding is always on,Anqi Fu,anqi.fu.1987@gmail.com,Anqi Fu,anqi.fu.1987@gmail.com,2019-05-17 20:53:00-07:00,25200,2019-05-17 20:53:00-07:00,25200,True,False,['solver.py'],['d1d35c07bf4dc5512ae09359566f2c530450050b'],1,1,2,1,,,
53552f82a617e37eed4232ee1e8f9b737cd246ac,Add ability to save figures to residual plotting functions,Anqi Fu,anqi.fu.1987@gmail.com,Anqi Fu,anqi.fu.1987@gmail.com,2019-05-22 01:50:15-07:00,25200,2019-05-22 01:50:15-07:00,25200,True,False,['base_test.py'],['f0c1535670d6b69343767126e1e351a70eccb9f8'],3,7,10,1,0.3333333333333333,0.3333333333333333,0.0
9ff9a3bcbd5f2f0700c6efc64de772757ce81fcc,add debug test for projection step in DRS,junziz,junziz@stanford.edu,junziz,junziz@stanford.edu,2019-05-22 12:02:18-07:00,25200,2019-05-22 12:02:18-07:00,25200,True,False,"['test_proj-checkpoint.ipynb', 'test_proj.ipynb', 'test_solver_debug.ipynb']",['53552f82a617e37eed4232ee1e8f9b737cd246ac'],2,1326,1328,3,,,
c36f207fb7f6ba416e19b1777222d2892d684fc3,Store constraint matrix A as CSR sparse matrix and use LSQR with warm start for projection step,Anqi Fu,anqi.fu.1987@gmail.com,Anqi Fu,anqi.fu.1987@gmail.com,2019-05-22 22:44:25-07:00,25200,2019-05-22 22:44:25-07:00,25200,True,False,"['acceleration.py', 'solver.py', 'test_solver.py']",['9ff9a3bcbd5f2f0700c6efc64de772757ce81fcc'],16,51,67,3,0.038461538461538464,0.7692307692307693,0.15384615384615385
602b372d1b1039179159fe1b11a5d45d11134539,Add proximal operator for scalar logistic function using Newton's method for minimization,anqif,anqif@stanford.edu,anqif,anqif@stanford.edu,2019-05-23 14:30:47-07:00,25200,2019-05-23 14:30:47-07:00,25200,True,False,"['prox_operators.py', 'test_proximal.py']",['c36f207fb7f6ba416e19b1777222d2892d684fc3'],0,58,58,2,0.42857142857142855,1.0,0.5714285714285714
c859643748a0a20f00439775f6daaf0de15a434a,"Add test for precondtioning, which is currently not working",anqif,anqif@stanford.edu,anqif,anqif@stanford.edu,2019-05-23 15:36:21-07:00,25200,2019-05-23 15:36:21-07:00,25200,True,False,"['prox_operators.py', 'solver.py', 'base_test.py', 'test_precondition.py', 'test_solver.py']",['602b372d1b1039179159fe1b11a5d45d11134539'],95,97,192,5,0.0,0.0,1.0
87af0f3b6680a92212bfdd7689bc19cc0341a94e,Get rid of unused import,Anqi Fu,anqi.fu.1987@gmail.com,Anqi Fu,anqi.fu.1987@gmail.com,2019-05-23 16:32:49-07:00,25200,2019-05-23 16:32:49-07:00,25200,True,False,['prox_operators.py'],['c859643748a0a20f00439775f6daaf0de15a434a'],1,1,2,1,,,
a8c825157362511372f2f676d52749e2a498edec,Get rid of everything except the A2DR internal solver,Anqi Fu,anqi.fu.1987@gmail.com,Anqi Fu,anqi.fu.1987@gmail.com,2019-05-23 16:58:41-07:00,25200,2019-05-23 16:58:41-07:00,25200,True,False,"['__init__.py', 'acceleration.py', 'consensus.py', 'problems.py', 'prox_operators.py', 'test_acceleration.py', 'test_basic.py', 'test_examples.py', 'test_functions.py', 'test_solver.py', 'test_step_size.py', 'utilities.py']",['87af0f3b6680a92212bfdd7689bc19cc0341a94e'],2006,10,2016,12,0.7541268462206777,0.2875760208514335,0.2371850564726325
deb54c7493b68bbc2ac08bc400dde6142bd443ef,Get rid of proximal operators,Anqi Fu,anqi.fu.1987@gmail.com,Anqi Fu,anqi.fu.1987@gmail.com,2019-05-23 17:02:40-07:00,25200,2019-05-23 17:02:40-07:00,25200,True,False,"['__init__.py', 'solver.py', '__init__.py', 'prox_point.py', '__init__.py', 'prox_operators.py', 'solver.py', 'test_solver.py']",['a8c825157362511372f2f676d52749e2a498edec'],309,26,335,8,0.5971563981042654,0.6208530805687204,0.35071090047393366
7f94e578f71893fdb02ed5d98f43c6cc94279ff0,Finally fixed the multi-task logistic example!,Anqi Fu,anqi.fu.1987@gmail.com,Anqi Fu,anqi.fu.1987@gmail.com,2019-06-06 03:18:11-07:00,25200,2019-06-06 03:18:11-07:00,25200,True,False,"['prox_operators.py', 'solver.py', 'test_solver.py']",['87af0f3b6680a92212bfdd7689bc19cc0341a94e'],71,47,118,3,0.5217391304347826,0.0,0.043478260869565216
296dcc233e8c86e49831f80e027d7f204a87a39b,Make logistic proximal operator apply to the (separable) sum,Anqi Fu,anqi.fu.1987@gmail.com,Anqi Fu,anqi.fu.1987@gmail.com,2019-06-06 17:02:37-07:00,25200,2019-06-06 17:02:37-07:00,25200,True,False,"['prox_operators.py', 'test_proximal.py', 'test_solver.py']",['7f94e578f71893fdb02ed5d98f43c6cc94279ff0'],42,28,70,3,0.0,1.0,0.0
9de01c3483eae84f160cf96283cb6b5151eba99e,Merge,anqif,anqif@stanford.edu,anqif,anqif@stanford.edu,2019-06-26 15:32:56-07:00,25200,2019-06-26 15:32:56-07:00,25200,True,False,"['test_basic.py', 'test_proximal.py']",['296dcc233e8c86e49831f80e027d7f204a87a39b'],1,74,75,2,0.0,1.0,1.0
86b107725b0cbc5937180285cf274f2b468ad070,WIP Create new test for examples in paper,Anqi Fu,anqi.fu.1987@gmail.com,Anqi Fu,anqi.fu.1987@gmail.com,2019-06-28 03:19:43-07:00,25200,2019-06-28 03:19:43-07:00,25200,True,False,"['test_paper.py', 'test_solver.py']",['9de01c3483eae84f160cf96283cb6b5151eba99e'],1,273,274,2,0.34838709677419355,1.0,0.8838709677419355
8d19a6b6bafde5017be531b53f2c00278fe1ce7a,Add tests for optimal control and commodity flow examples,Anqi Fu,anqi.fu.1987@gmail.com,Anqi Fu,anqi.fu.1987@gmail.com,2019-07-01 22:37:29-07:00,25200,2019-07-01 22:37:29-07:00,25200,True,False,['test_paper.py'],['86b107725b0cbc5937180285cf274f2b468ad070'],0,178,178,1,0.06201550387596899,0.9534883720930233,1.0
017191ead56dbde03dea96f3962f2c6325638ca3,"Make the provision of an initial point optional for A2DR solver. Note order of inputs has changed to prox_list, A_list, b, v_init.",Anqi Fu,anqi.fu.1987@gmail.com,Anqi Fu,anqi.fu.1987@gmail.com,2019-07-02 21:45:16-07:00,25200,2019-07-02 21:45:16-07:00,25200,True,False,"['solver.py', 'test_paper.py', 'test_solver.py']",['8d19a6b6bafde5017be531b53f2c00278fe1ce7a'],53,60,113,3,0.32,0.92,0.92
d7b8fc606de3291bacbeb1c15faad64ea634c5bc,More bug fixes in tests of paper experiments,Anqi Fu,anqi.fu.1987@gmail.com,Anqi Fu,anqi.fu.1987@gmail.com,2019-07-02 22:10:35-07:00,25200,2019-07-02 22:10:35-07:00,25200,True,False,['test_paper.py'],['017191ead56dbde03dea96f3962f2c6325638ca3'],26,30,56,1,1.0,1.0,1.0
a6483ae4f25290d78d6d89d387d68fb742db94df,Change a few default parameters. Fix bugs in optimal control example.,Anqi Fu,anqi.fu.1987@gmail.com,Anqi Fu,anqi.fu.1987@gmail.com,2019-07-02 23:29:18-07:00,25200,2019-07-02 23:29:18-07:00,25200,True,False,"['solver.py', 'test_paper.py']",['d7b8fc606de3291bacbeb1c15faad64ea634c5bc'],26,29,55,2,1.0,1.0,1.0
41fdc99b844bc734c45cc87d8ea10ffe8f9fb476,"intermediate commit, debugging finished (mostly), some examples remained to be completed, will clean up the comments and ipynb soon",junziz,junziz@stanford.edu,junziz,junziz@stanford.edu,2019-08-06 23:36:59-07:00,25200,2019-08-06 23:36:59-07:00,25200,True,False,"['precondition.py', 'solver.py', 'base_test.py', 'test_paper.py', 'test_equil-checkpoint.ipynb', 'test_paper_debug-checkpoint.ipynb', 'test_solver_debug-checkpoint.ipynb', 'test_equil.ipynb', 'test_paper_debug.ipynb']",['a6483ae4f25290d78d6d89d387d68fb742db94df'],799,4345,5144,9,0.8536585365853658,0.4634146341463415,0.0
c257666daa9bc2d6f6ba87c527b67eb667936376,clean up the repo a bit,junziz,junziz@stanford.edu,junziz,junziz@stanford.edu,2019-08-06 23:50:31-07:00,25200,2019-08-06 23:50:31-07:00,25200,True,False,"['precondition.py', 'solver.py', 'test_paper.py', 'test_equil_debug-checkpoint.ipynb', 'test_paper_debug-checkpoint.ipynb', 'test_equil_debug.ipynb', 'test_paper_debug.ipynb']",['41fdc99b844bc734c45cc87d8ea10ffe8f9fb476'],2103,143,2246,7,1.0,0.0,0.0
a1b03dbb4cde4ded164818900afceaa022cf0703,resolved the cvxpy not equal to a2dr and drs issue -- changed rho to t in precondition.py,junziz,junziz@stanford.edu,junziz,junziz@stanford.edu,2019-08-07 18:46:14-07:00,25200,2019-08-07 18:46:14-07:00,25200,True,False,"['precondition.py', 'prox_operators.py', 'test_paper.py', 'test_paper_debug-checkpoint.ipynb', 'test_paper_debug.ipynb']",['c257666daa9bc2d6f6ba87c527b67eb667936376'],575,1135,1710,5,0.0,1.0,1.0
e32cc00248a6b329fd9ae8647648a041ad7c96ee,"change to gmean in equil, tested and finalized the choice of t after removing the inconsistency with cvxpy results, and finish four examples with good plots",junziz,junziz@stanford.edu,junziz,junziz@stanford.edu,2019-08-08 04:31:00-07:00,25200,2019-08-08 04:31:00-07:00,25200,True,False,"['precondition.py', 'solver.py', 'base_test.py', 'test_paper.py', 'test_paper_debug.ipynb']",['a1b03dbb4cde4ded164818900afceaa022cf0703'],370,499,869,5,1.0,0.0,0.0
678e87fc89272231bad956065441752574a6ca42,code clean up,junziz,junziz@stanford.edu,junziz,junziz@stanford.edu,2019-08-08 05:16:16-07:00,25200,2019-08-08 05:16:16-07:00,25200,True,False,"['precondition.py', 'test_paper.py', 'test_paper_debug-checkpoint.ipynb', 'test_paper_debug.ipynb']",['e32cc00248a6b329fd9ae8647648a041ad7c96ee'],912,539,1451,4,0.3333333333333333,0.0,0.0
c3ed3b47566dc226a06380af6b0d47994d1dbc19,"small modification in precondition.py to make sure the convergence of the equilibration, as we use the scaled residuals as the output; rerun the experiments, basically no changes",junziz,junziz@stanford.edu,junziz,junziz@stanford.edu,2019-08-09 00:03:04-07:00,25200,2019-08-09 00:03:04-07:00,25200,True,False,"['precondition.py', 'test_equil_debug-checkpoint.ipynb', 'test_paper_debug-checkpoint.ipynb', 'test_equil_debug.ipynb', 'test_paper_debug.ipynb']",['678e87fc89272231bad956065441752574a6ca42'],191,458,649,5,0.0,0.0,0.0
fff6b26e0afcc3fa06995be7aa5ab9a14c016104,finish coupled QP,junziz,junziz@stanford.edu,junziz,junziz@stanford.edu,2019-08-10 17:33:54-07:00,25200,2019-08-10 17:33:54-07:00,25200,True,False,"['test_paper.py', 'test_paper_debug-checkpoint.ipynb', 'test_paper_debug.ipynb']",['c3ed3b47566dc226a06380af6b0d47994d1dbc19'],23,895,918,3,0.37142857142857144,0.37142857142857144,0.6285714285714286
512b3bc6b82647b68d5183f5b721396dd557380e,finish optimal control,junziz,junziz@stanford.edu,junziz,junziz@stanford.edu,2019-08-12 13:34:02-07:00,25200,2019-08-12 13:34:02-07:00,25200,True,False,"['test_paper.py', 'test_paper_debug-checkpoint.ipynb', 'test_paper_debug.ipynb']",['fff6b26e0afcc3fa06995be7aa5ab9a14c016104'],579,240,819,3,1.0,0.0,0.0
8aad56b38f8f40ea9e66a56ba1be2a4bd9bd96f2,checked correctness of optimal control example by comparing with CVXPY; fixed the data generation process to ensure feasibility,junziz,junziz@stanford.edu,junziz,junziz@stanford.edu,2019-08-12 14:49:31-07:00,25200,2019-08-12 14:49:31-07:00,25200,True,False,"['test_paper.py', 'test_paper_debug-checkpoint.ipynb', 'test_paper_debug.ipynb']",['512b3bc6b82647b68d5183f5b721396dd557380e'],45,404,449,3,0.0,1.0,1.0
1d582317ac3f037dceb0077429ee9b877370c021,"finish optimal control completely, improve efficiency by removing atol=1e-16 and btol=1e-16 in lsqr in solver.py, and test larger examples for optimal control",junziz,junziz@stanford.edu,junziz,junziz@stanford.edu,2019-08-12 15:57:53-07:00,25200,2019-08-12 15:57:53-07:00,25200,True,False,"['solver.py', 'test_paper.py', 'test_paper_debug-checkpoint.ipynb', 'test_paper_debug.ipynb']",['8aad56b38f8f40ea9e66a56ba1be2a4bd9bd96f2'],299,491,790,4,0.0,1.0,1.0
a3e094385a1cf2375d2ff55db21978c9555bd6a4,code cleanup,junziz,junziz@stanford.edu,junziz,junziz@stanford.edu,2019-08-12 16:04:13-07:00,25200,2019-08-12 16:04:13-07:00,25200,True,False,"['solver.py', 'test_paper.py', 'test_paper_debug-checkpoint.ipynb', 'test_paper_debug.ipynb']",['1d582317ac3f037dceb0077429ee9b877370c021'],993,652,1645,4,,,
344dd35665dec58ed17fa710df71d3f3b64e5bb8,"debug into decoupled QP, WIP",junziz,junziz@stanford.edu,junziz,junziz@stanford.edu,2019-08-12 20:02:25-07:00,25200,2019-08-12 20:02:25-07:00,25200,True,False,"['solver.py', 'test_paper.py', 'test_paper_debug-checkpoint.ipynb', 'test_paper_debug.ipynb']",['a3e094385a1cf2375d2ff55db21978c9555bd6a4'],308,1261,1569,4,0.0,0.3333333333333333,1.0
a42876da2b111ac4287188481e73bfa406e8bc66,"add comparisons with CVXPY and scipy.optimize.nnls for the coupled QP example and the NNLS example, respectively; fixed the bugs",junziz,junziz@stanford.edu,junziz,junziz@stanford.edu,2019-08-12 23:21:34-07:00,25200,2019-08-12 23:21:34-07:00,25200,True,False,"['test_paper.py', 'test_paper_debug-checkpoint.ipynb', 'test_paper_debug.ipynb']",['344dd35665dec58ed17fa710df71d3f3b64e5bb8'],761,777,1538,3,1.0,1.0,0.0
cc5e263ab92b7536a1b935a2fafcfdf93d611f7f,rerun and double check the 6 finished examples,junziz,junziz@stanford.edu,junziz,junziz@stanford.edu,2019-08-13 00:16:26-07:00,25200,2019-08-13 00:16:26-07:00,25200,True,False,"['test_paper_debug-checkpoint.ipynb', 'test_paper_debug.ipynb']",['a42876da2b111ac4287188481e73bfa406e8bc66'],276,618,894,2,,,
1934c7f2049471b12fef808eab9799fed11c6c51,"commodity flow example WIP, constructed an infeasible problem for sanity check",junziz,junziz@stanford.edu,junziz,junziz@stanford.edu,2019-08-15 16:09:42-07:00,25200,2019-08-15 16:09:42-07:00,25200,True,False,"['test_paper.py', 'test_paper_debug-checkpoint.ipynb', 'test_paper_debug.ipynb']",['cc5e263ab92b7536a1b935a2fafcfdf93d611f7f'],218,743,961,3,0.9333333333333333,0.4,0.0
27ded4c52a75a40ad64b8aab2099a5066e5be6c8,"commodity flow example WIP, experiment with perturbation to make problem feasible",junziz,junziz@stanford.edu,junziz,junziz@stanford.edu,2019-08-15 16:39:10-07:00,25200,2019-08-15 16:39:10-07:00,25200,True,False,"['test_paper.py', 'test_paper_debug-checkpoint.ipynb', 'test_paper_debug.ipynb']",['1934c7f2049471b12fef808eab9799fed11c6c51'],32,316,348,3,1.0,0.0,0.0
da09966b8461d53325ed1c2b09776851aa096fc0,commodity flow example finished,junziz,junziz@stanford.edu,junziz,junziz@stanford.edu,2019-08-15 17:09:53-07:00,25200,2019-08-15 17:09:53-07:00,25200,True,False,"['test_paper.py', 'test_paper_debug-checkpoint.ipynb', 'test_paper_debug.ipynb']",['27ded4c52a75a40ad64b8aab2099a5066e5be6c8'],125,42,167,3,,,
229a0263546cb3c2c55c965a1fac8eda6011fbbf,"automatic plot save, high resolution plots in eps",junziz,junziz@stanford.edu,junziz,junziz@stanford.edu,2019-08-16 01:23:50-07:00,25200,2019-08-16 01:23:50-07:00,25200,True,False,"['test_paper.py', 'test_paper_debug-checkpoint.ipynb', 'coupled_qp.eps', 'coupled_qp_rerun.eps', 'l1_trend_filter.eps', 'multitask_reglog.eps', 'nnls.eps', 'nnls_rerun.eps', 'opt_cont.eps', 'reg_effect.eps', 'single_com_flow.eps', 'sparse_inv_cov_est_large.eps', 'sparse_inv_cov_est_small.eps', 'test_paper_debug.ipynb']",['da09966b8461d53325ed1c2b09776851aa096fc0'],331,30029,30360,14,0.0,1.0,1.0
1ef4f56dc0267ac28c43e3a92d87e462343dfb1c,more efficient precondition.py WIP,junziz,junziz@stanford.edu,junziz,junziz@stanford.edu,2019-08-16 18:18:08-07:00,25200,2019-08-16 18:18:08-07:00,25200,True,False,"['[old] precondition.py', 'precondition.py', 'l1_trend_filter.eps', 'test_paper_debug.ipynb']",['229a0263546cb3c2c55c965a1fac8eda6011fbbf'],214,256,470,4,0.24,0.24,0.0
08a7678d20f3779c97a743515103ecaf08fa3601,more efficient precondition.py with sparsification,junziz,junziz@stanford.edu,junziz,junziz@stanford.edu,2019-08-16 18:29:18-07:00,25200,2019-08-16 18:29:18-07:00,25200,True,False,"['precondition.py', 'test_paper_debug-checkpoint.ipynb', 'l1_trend_filter.eps', 'test_paper_debug.ipynb']",['1ef4f56dc0267ac28c43e3a92d87e462343dfb1c'],14,60,74,4,1.0,1.0,0.0
2f502c665e452d98f6ad538b31996e4149e23c40,"rerun all experiments using the new precondition.py, fix a small issue of checking dense or sparse input to precondition.py",junziz,junziz@stanford.edu,junziz,junziz@stanford.edu,2019-08-16 20:35:10-07:00,25200,2019-08-16 20:35:10-07:00,25200,True,False,"['precondition.py', 'test_paper_debug-checkpoint.ipynb', 'coupled_qp.eps', 'coupled_qp_rerun.eps', 'l1_trend_filter.eps', 'multitask_reglog.eps', 'nnls.eps', 'nnls_rerun.eps', 'opt_cont.eps', 'reg_effect.eps', 'single_com_flow.eps', 'sparse_inv_cov_est_large.eps', 'sparse_inv_cov_est_small.eps', 'test_paper_debug.ipynb']",['08a7678d20f3779c97a743515103ecaf08fa3601'],3851,4070,7921,14,0.0,0.0,0.0
ac0381fc142ab8e4933226c1b791e666b5a03959,Change default to enable Anderson acceleration and preconditioning. Add an optional argument to choose whether to use LSTSQ or LSQR for calculation of AA weights,Anqi Fu,anqi.fu.1987@gmail.com,Anqi Fu,anqi.fu.1987@gmail.com,2019-08-20 02:47:33-07:00,25200,2019-08-20 02:47:33-07:00,25200,True,False,"['solver.py', 'test_acceleration.py', 'test_paper.py', 'test_precondition.py', 'madelon_example.py', 'test_equil_debug.ipynb', 'test_paper_debug.ipynb', 'test_proj.ipynb']",['2f502c665e452d98f6ad538b31996e4149e23c40'],22,25,47,8,0.0,0.3333333333333333,0.5
139a874ed608e433228657c51d287cbf79fe0380,Remove unnecessary files,anqif,anqif@stanford.edu,anqif,anqif@stanford.edu,2019-08-20 07:43:49-07:00,25200,2019-08-20 07:43:49-07:00,25200,True,False,"['.gitignore', '[old] precondition.py', 'test_acceleration.py', 'test_basic.py', 'test_equil_debug-checkpoint.ipynb', 'test_paper_debug-checkpoint.ipynb', 'test_proj-checkpoint.ipynb']",['3cc8a7d114d96d5b943d411a38fde7f5841c9a46'],4437,3,4440,7,0.9121813031161473,0.3031161473087819,0.14447592067988668
18ee02661890b315bc2232a02d7f516846a386c0,Refactor cvxconsensus to a2dr,anqif,anqif@stanford.edu,anqif,anqif@stanford.edu,2019-08-20 08:02:02-07:00,25200,2019-08-20 08:02:02-07:00,25200,True,False,"['__init__.py', 'acceleration.py', 'precondition.py', 'prox_point.py', 'prox_operators.py', 'solver.py', '__init__.py', 'base_test.py', 'test_paper.py', 'test_precondition.py', 'test_proximal.py', 'test_solver.py', 'utilities.py', '__init__.py', 'acceleration.py', 'consensus.py', 'problems.py', 'solver.py', 'utilities.py', 'bicommodity.py', 'floor_planning.py', 'flow_control.py', 'lasso_example.py', 'madelon_example.py', 'network_optimization.py', 'test_equil_debug.ipynb', 'test_paper_debug.ipynb', 'ols_example.py', 'optimal_control.py', 'single_commodity.py', 'sparse_covariance.py', 'svm_example.py', 'vehicle_formation.py', 'setup.py']",['139a874ed608e433228657c51d287cbf79fe0380'],111,220,331,34,0.7241379310344828,0.5862068965517241,1.0
715bf934c0a05923875241c8303964c31bb506d6,Get rid of test_solver since most are redundant with test_paper,anqif,anqif@stanford.edu,anqif,anqif@stanford.edu,2019-08-20 08:04:31-07:00,25200,2019-08-20 08:04:31-07:00,25200,True,False,['test_solver.py'],['18ee02661890b315bc2232a02d7f516846a386c0'],753,0,753,1,0.776937618147448,0.21361058601134217,0.043478260869565216
d3b5b1499a17162f3b9a5c91a1efd43f4cb4125d,Update README.md,Anqi Fu,anqif@stanford.edu,GitHub,noreply@github.com,2019-08-20 08:09:53-07:00,25200,2019-08-20 08:09:53-07:00,25200,True,False,['README.md'],['715bf934c0a05923875241c8303964c31bb506d6'],2,2,4,1,,,
4d80df439e0c87ddc82dfabb25cbf526df67542a,Update README.md,Anqi Fu,anqif@stanford.edu,GitHub,noreply@github.com,2019-08-20 08:10:37-07:00,25200,2019-08-20 08:10:37-07:00,25200,True,False,['README.md'],['d3b5b1499a17162f3b9a5c91a1efd43f4cb4125d'],2,2,4,1,,,
63efcdff9f327c72165f60d0d9a7f786979b9b3d,Rename build library,anqif,anqif@stanford.edu,anqif,anqif@stanford.edu,2019-08-20 08:37:36-07:00,25200,2019-08-20 08:37:36-07:00,25200,True,False,"['__init__.py', 'acceleration.py', 'consensus.py', 'precondition.py', 'problems.py', 'solver.py', 'utilities.py']",['4d80df439e0c87ddc82dfabb25cbf526df67542a'],0,0,0,7,,,
36e07138163d639f3ba13abfb48289b98e21e92d,Deal with both numpy and scipy.sparse matrices in A_list,anqif,anqif@stanford.edu,anqif,anqif@stanford.edu,2019-08-20 16:56:14-07:00,25200,2019-08-20 16:56:14-07:00,25200,True,False,"['precondition.py', 'solver.py', 'test_basic.py', 'test_paper.py', 'test_precondition.py']",['63efcdff9f327c72165f60d0d9a7f786979b9b3d'],11,81,92,5,0.5227272727272727,0.9545454545454546,0.7272727272727273
1550ed5fbddbca5951d45ab64266a55b4e78d059,Change stopping criterion to check norm of all residuals as written in paper,Anqi Fu,anqi.fu.1987@gmail.com,Anqi Fu,anqi.fu.1987@gmail.com,2019-08-20 17:27:15-07:00,25200,2019-08-20 17:27:15-07:00,25200,True,False,['solver.py'],['36e07138163d639f3ba13abfb48289b98e21e92d'],5,14,19,1,0.0,0.0,0.0
6d01af780ecce79272f705398e468293c1ad869c,Track x^(k+1/2) with smallest residual norm ||r^k||_2 and return it when A2DR terminates. This addresses situations when we hit max_iters without reaching the desired tolerance.,Anqi Fu,anqi.fu.1987@gmail.com,Anqi Fu,anqi.fu.1987@gmail.com,2019-08-20 17:47:02-07:00,25200,2019-08-20 17:47:02-07:00,25200,True,False,"['solver.py', 'test_basic.py']",['1550ed5fbddbca5951d45ab64266a55b4e78d059'],11,54,65,2,0.1875,1.0,1.0
0ed648af902a15ed6fa6ab2f2aedd8f0f4a7d194,"Handle unconstrained problem directly in main A2DR algorithm, and skip preconditioning.",Anqi Fu,anqi.fu.1987@gmail.com,Anqi Fu,anqi.fu.1987@gmail.com,2019-08-20 21:01:39-07:00,25200,2019-08-20 21:01:39-07:00,25200,True,False,"['__init__.py', 'precondition.py', 'prox_point.py', 'solver.py', 'test_basic.py', 'test_paper.py', 'solver.py']",['6d01af780ecce79272f705398e468293c1ad869c'],17,121,138,7,0.0,0.7397260273972602,0.7397260273972602
a1bb71165efd98b31dd0d2103d34104418625823,"fix a bug in solver.py -- r_best should be initialized to np.inf, not -np.inf, otherwise it will output the initalization; rerun the experiments in test_paper.py",junziz,junziz@stanford.edu,junziz,junziz@stanford.edu,2019-08-21 01:40:30-07:00,25200,2019-08-21 01:40:30-07:00,25200,True,False,"['solver.py', 'coupled_qp.eps', 'coupled_qp_rerun.eps', 'l1_trend_filter.eps', 'multitask_reglog.eps', 'nnls.eps', 'opt_cont.eps', 'reg_effect.eps', 'single_com_flow.eps', 'sparse_inv_cov_est_large.eps', 'sparse_inv_cov_est_small.eps', 'test_paper_debug.ipynb']",['0ed648af902a15ed6fa6ab2f2aedd8f0f4a7d194'],738,837,1575,12,,,
70bd218c70e372bd2c95ed043e8141dab72e5c47,code cleanup,junziz,junziz@stanford.edu,junziz,junziz@stanford.edu,2019-08-21 04:09:13-07:00,25200,2019-08-21 04:09:13-07:00,25200,True,False,"['solver.py', 'coupled_qp.eps', 'coupled_qp_rerun.eps', 'l1_trend_filter.eps', 'multitask_reglog.eps', 'nnls.eps', 'nnls_rerun.eps', 'opt_cont.eps', 'reg_effect.eps', 'single_com_flow.eps', 'sparse_inv_cov_est_large.eps', 'sparse_inv_cov_est_small.eps', 'test_paper_debug.ipynb']",['a1bb71165efd98b31dd0d2103d34104418625823'],610,509,1119,13,1.0,1.0,1.0
9e71905dac0bc411e5af23f671e096acc6950d33,Make preconditioning and AA turned on by default,anqif,anqif@stanford.edu,anqif,anqif@stanford.edu,2019-08-21 10:31:46-07:00,25200,2019-08-21 10:31:46-07:00,25200,True,False,['solver.py'],['70bd218c70e372bd2c95ed043e8141dab72e5c47'],2,2,4,1,,,
01e73d2fefa2cdc2e7d3f264ee2848ad85c0d370,"fix some bugs in setup.py and a2dr/__init__.py, and tested that the solver can be used anywhere on the computer by import a2dr or from a2dr import a2dr; remove build/ and TODO",junziz,junziz@stanford.edu,junziz,junziz@stanford.edu,2019-08-22 10:54:01-07:00,25200,2019-08-22 10:54:01-07:00,25200,True,False,"['.gitignore', 'TODO', '__init__.py', '__init__.py', 'acceleration.py', 'consensus.py', 'precondition.py', 'problems.py', 'solver.py', 'utilities.py', 'setup.py']",['9e71905dac0bc411e5af23f671e096acc6950d33'],814,233,1047,11,0.4558139534883721,0.4930232558139535,0.5488372093023256
0dc1dc640881822e258a47a7bbd0dd30951157d6,"remove build/ and prox_point.py, and rerun some tests in test_paper_debug.ipynb for sanity check",junziz,junziz@stanford.edu,junziz,junziz@stanford.edu,2019-08-22 12:14:41-07:00,25200,2019-08-22 12:14:41-07:00,25200,True,False,"['.gitignore', 'prox_point.py', 'utilities.py', 'utilities.py', 'nnls.eps', 'test_paper_debug.ipynb']",['01e73d2fefa2cdc2e7d3f264ee2848ad85c0d370'],280,10,290,6,1.0,1.0,1.0
41eee4b76faecbb0f2ac92ecfed0a9421180ea76,"test scripts correction, nosetests past; fix test_equil.ipynb to accomodate to the newest precondition.py; code refactorization",junziz,junziz@stanford.edu,junziz,junziz@stanford.edu,2019-08-22 16:43:04-07:00,25200,2019-08-22 16:43:04-07:00,25200,True,False,"['lastfailed', '__init__.py', 'acceleration.py', 'precondition.py', 'prox_operators.py', 'solver.py', '__init__.py', 'base_test.py', 'test_basic.py', 'test_paper.py', 'test_precondition.py', 'test_proximal.py', 'utilities.py', '__init__.py', 'acceleration.py', 'precondition.py', 'solver.py', 'utilities.py', 'bicommodity.py', 'abilene.data', 'abilene_capacity.csv', 'abilene_topology.csv', 'madelon_train.data', 'madelon_train.labels', 'floor_planning.py', 'flow_control.py', 'lasso_example.py', 'madelon_example.py', 'network_optimization.py', 'nnls.eps', 'test_equil.ipynb', 'test_equil_debug.ipynb', 'test_paper_debug.ipynb', 'test_paper_plot.ipynb', 'test_proj.ipynb', 'ols_example.py', 'optimal_control.py', 'single_commodity.py', 'sparse_covariance.py', 'svm_example.py', 'vehicle_formation.py']",['0dc1dc640881822e258a47a7bbd0dd30951157d6'],6381,3626,10007,41,0.7779141104294478,0.3423312883435583,0.4233128834355828
6267226ec20207d69910f2d8fd31efe9b031a8e7,further refactorization,junziz,junziz@stanford.edu,junziz,junziz@stanford.edu,2019-08-22 16:48:42-07:00,25200,2019-08-22 16:48:42-07:00,25200,True,False,"['lastfailed', '.gitignore', 'test_paper_debug.ipynb']",['41eee4b76faecbb0f2ac92ecfed0a9421180ea76'],2930,4,2934,3,,,
9de54102b8b9218cd7d3ff32ac77cc54158479c7,WIP Refactor proximal operators into separate functions,Anqi Fu,anqi.fu.1987@gmail.com,Anqi Fu,anqi.fu.1987@gmail.com,2019-08-22 21:38:18-07:00,25200,2019-08-22 21:38:18-07:00,25200,True,False,"['elementwise.py', 'logistic.py', 'misc.py', 'norm.py', 'projection.py', 'quadratic.py', 'test_paper.py']",['6267226ec20207d69910f2d8fd31efe9b031a8e7'],1,139,140,7,1.0,1.0,0.6385542168674698
0c71ed1bf9cff10243b6b82acfd394168f5d3576,"correct a few indentation issues in proximal/; enable installation of proximal/ and tests/, so that all the examples can be run without needing to worrying about dependencies; remove test_paper.py, and refactor it into separate files; main the original one as paper_plots.py",junziz,junziz@stanford.edu,junziz,junziz@stanford.edu,2019-08-23 02:35:40-04:00,14400,2019-08-23 02:35:40-04:00,14400,True,False,"['__init__.py', 'norm.py', 'prox_operators.py', 'quadratic.py', 'coupled_qp.eps', 'coupled_qp_rerun.eps', 'l1_trend_filter.eps', 'multitask_reglog.eps', 'nnls.eps', 'nnls_rerun.eps', 'opt_cont.eps', 'reg_effect.eps', 'single_com_flow.eps', 'sparse_inv_cov_est_large.eps', 'sparse_inv_cov_est_small.eps', 'equil.ipynb', 'paper_plots.ipynb', 'test_proj.ipynb', 'coupled_qp.py', 'l1_trend_filtering.py', 'multitask_reg_logistic.py', 'nnls.py', 'nnls_reg.py', 'optimal_control.py', 'paper_plots.py', 'single_commodity_flow.py', 'sparse_inv_cov_est.py', 'paper_plots.py', 'setup.py']",['9de54102b8b9218cd7d3ff32ac77cc54158479c7'],918,1929,2847,29,0.1054421768707483,0.8945578231292517,0.9132653061224489
1e71e9fa0b3ad7e28ffa0d85fc6b4d0172166705,"code editing, testing and rerunning mostly finished, WIP",junziz,junziz@stanford.edu,junziz,junziz@stanford.edu,2019-08-23 05:20:49-04:00,14400,2019-08-23 05:20:49-04:00,14400,True,False,"['nnls.eps', 'sparse_inv_cov_est_large.eps', 'paper_plots.ipynb', 'l1_trend_filtering.py', 'sparse_inv_cov_est.py', 'paper_plots.py']",['0c71ed1bf9cff10243b6b82acfd394168f5d3576'],447,6,453,6,0.9563636363636364,0.11272727272727273,0.08727272727272728
23e6e416ba7dee843655c221c2cbdf76fa3271b1,Add proximal operators for matrices,Angela Fu,anqif@stanford.edu,Angela Fu,anqif@stanford.edu,2019-08-23 16:25:37-07:00,25200,2019-08-23 16:25:37-07:00,25200,True,False,"['constraint.py', 'matrix.py', 'norm.py', 'prox_operators.py']",['1e71e9fa0b3ad7e28ffa0d85fc6b4d0172166705'],4,33,37,4,1.0,1.0,1.0
78fd9d65d0d546c0f5b2bd89633de1d4be1ac22f,"correct bugs for large scale sparse inverse covariance estimation, improve performance of communication",junziz,junziz@stanford.edu,junziz,junziz@stanford.edu,2019-08-23 21:52:38-04:00,14400,2019-08-23 21:52:38-04:00,14400,True,False,"['README.md', 'prox_operators.py', 'prox_operators_backup.py', 'solver.py', 'nnls.eps', 'reg_effect.eps', 'sparse_inv_cov_est_large.eps', 'sparse_inv_cov_est_small.eps', 'paper_plots.ipynb', 'paper_plots.py', 'sparse_inv_cov_est.py']",['1e71e9fa0b3ad7e28ffa0d85fc6b4d0172166705'],1418,4274,5692,11,0.5921450151057401,0.6012084592145015,0.5861027190332326
ba8b5075ce9f2a4b92f5bbd3e28ef8eb7dbc60ab,"fix some indentation issues in constraint.py and matrix.py, remove install_requires on multiprocess, as we indeed used the built-in multiprocessing, README WIP",junziz,junziz@stanford.edu,junziz,junziz@stanford.edu,2019-08-23 22:25:21-04:00,14400,2019-08-23 22:25:21-04:00,14400,True,False,"['README.md', 'constraint.py', 'matrix.py', 'prox_operators.py', 'prox_operators_backup.py', 'nnls.eps', 'reg_effect.eps', 'sparse_inv_cov_est_small.eps', 'paper_plots.ipynb', 'paper_plots.py', 'setup.py']",['614b8e65af1232e8a2cd7ee229dfedeaf3da7c6f'],453,51,504,11,0.4144736842105263,0.4309210526315789,0.40789473684210525
22c137c51f2e259c7d186c234df02af99e2975ee,code clean up; README WIP; double tested all examples,junziz,junziz@stanford.edu,junziz,junziz@stanford.edu,2019-08-24 01:39:10-04:00,14400,2019-08-24 01:39:10-04:00,14400,True,False,"['README.md', 'solver.py', 'README.md', 'coupled_qp.eps', 'coupled_qp_rerun.eps', 'l1_trend_filter.eps', 'multitask_reglog.eps', 'nnls.eps', 'nnls_rerun.eps', 'opt_cont.eps', 'reg_effect.eps', 'single_com_flow.eps', 'sparse_inv_cov_est_large.eps', 'sparse_inv_cov_est_small.eps', 'paper_plots.ipynb', 'coupled_qp.py', 'l1_trend_filtering.py', 'multitask_reg_logistic.py', 'nnls.py', 'nnls_reg.py', 'optimal_control.py', 'paper_plots.py', 'single_commodity_flow.py', 'sparse_inv_cov_est.py', 'setup.py']",['ba8b5075ce9f2a4b92f5bbd3e28ef8eb7dbc60ab'],4384,1913,6297,25,1.0,0.0,1.0
7b9c08860abdc6066fe7d4dcafc6139274db8236,Update README.md,Junzi Zhang,junziz@stanford.edu,GitHub,noreply@github.com,2019-08-24 01:43:27-04:00,14400,2019-08-24 01:43:27-04:00,14400,True,False,['README.md'],['22c137c51f2e259c7d186c234df02af99e2975ee'],1,3,4,1,,,
c11e59103441883f4e0fc102b800d6c7330b283d,Update README.md,Junzi Zhang,junziz@stanford.edu,GitHub,noreply@github.com,2019-08-24 01:45:43-04:00,14400,2019-08-24 01:45:43-04:00,14400,True,False,['README.md'],['7b9c08860abdc6066fe7d4dcafc6139274db8236'],1,1,2,1,,,
2a0fc60f388ba02adda4d67268d41ce50a09b0a6,Update README.md,Junzi Zhang,junziz@stanford.edu,GitHub,noreply@github.com,2019-08-24 01:46:16-04:00,14400,2019-08-24 01:46:16-04:00,14400,True,False,['README.md'],['c11e59103441883f4e0fc102b800d6c7330b283d'],1,1,2,1,,,
4182192ac5d283e3e1514da6d24c8fb81c86dd12,Update README.md,Junzi Zhang,junziz@stanford.edu,GitHub,noreply@github.com,2019-08-24 02:43:21-04:00,14400,2019-08-24 02:43:21-04:00,14400,True,False,['README.md'],['2a0fc60f388ba02adda4d67268d41ce50a09b0a6'],0,63,63,1,,,
0b88fa8063dbc4b022a3b2d7f3e6cb24b86077b9,Update README.md,Junzi Zhang,junziz@stanford.edu,GitHub,noreply@github.com,2019-08-24 03:12:17-04:00,14400,2019-08-24 03:12:17-04:00,14400,True,False,['README.md'],['4182192ac5d283e3e1514da6d24c8fb81c86dd12'],2,33,35,1,,,
e8505dfc2eeb18513d579dfecbf800b7fe8c299f,Update README.md,Junzi Zhang,junziz@stanford.edu,GitHub,noreply@github.com,2019-08-24 03:17:57-04:00,14400,2019-08-24 03:17:57-04:00,14400,True,False,['README.md'],['0b88fa8063dbc4b022a3b2d7f3e6cb24b86077b9'],0,17,17,1,,,
6c1aa2356332feea37f6c0db4f95449530bb2c25,Update README.md,Junzi Zhang,junziz@stanford.edu,GitHub,noreply@github.com,2019-08-24 03:19:14-04:00,14400,2019-08-24 03:19:14-04:00,14400,True,False,['README.md'],['e8505dfc2eeb18513d579dfecbf800b7fe8c299f'],0,1,1,1,,,
e96809ffb76828b542df83ed907299c31e8ee47b,Update README.md,Junzi Zhang,junziz@stanford.edu,GitHub,noreply@github.com,2019-08-24 04:17:48-04:00,14400,2019-08-24 04:17:48-04:00,14400,True,False,['README.md'],['6c1aa2356332feea37f6c0db4f95449530bb2c25'],2,2,4,1,,,
af3c17889f7354ab895eb9bae3d6055b3bc793ac,"Finish moving proximal operators into separate files, making notation uniform, and exporting them from package.",anqif,anqif@stanford.edu,anqif,anqif@stanford.edu,2019-08-24 03:11:22-07:00,25200,2019-08-24 03:11:22-07:00,25200,True,False,"['__init__.py', 'constraint.py', 'logistic.py', 'matrix.py', 'misc.py', 'prox_operators.py', 'quadratic.py']",['e96809ffb76828b542df83ed907299c31e8ee47b'],42,93,135,7,0.32,1.0,0.0
44795a56d5935cfdacef6568c4033b82cdf326e8,remove sparsity detection for vectors in the examples,junziz,junziz@stanford.edu,junziz,junziz@stanford.edu,2019-08-24 10:33:14-04:00,14400,2019-08-24 10:33:14-04:00,14400,True,False,"['README.md', 'nnls.eps', 'reg_effect.eps', 'paper_plots.ipynb', 'nnls.py', 'nnls_reg.py', 'paper_plots.py']",['af3c17889f7354ab895eb9bae3d6055b3bc793ac'],9,8,17,7,,,
ed1592acc855593b32b43e03edce9c49d733eef2,Update README.md,Junzi Zhang,junziz@stanford.edu,GitHub,noreply@github.com,2019-08-24 11:25:50-04:00,14400,2019-08-24 11:25:50-04:00,14400,True,False,['README.md'],['44795a56d5935cfdacef6568c4033b82cdf326e8'],3,5,8,1,,,
314d5f6f3887591f947de5ef06a0b254b84feeb8,Update README.md,Junzi Zhang,junziz@stanford.edu,GitHub,noreply@github.com,2019-08-24 11:28:32-04:00,14400,2019-08-24 11:28:32-04:00,14400,True,False,['README.md'],['ed1592acc855593b32b43e03edce9c49d733eef2'],3,1,4,1,,,
7b172a5d12e22e0714fbbe459ffa89e1fab82aeb,Update README.md,Junzi Zhang,junziz@stanford.edu,GitHub,noreply@github.com,2019-08-24 16:59:20-04:00,14400,2019-08-24 16:59:20-04:00,14400,True,False,['README.md'],['314d5f6f3887591f947de5ef06a0b254b84feeb8'],3,3,6,1,,,
c5d974a2254dbf86d1dd9b96fcd5e5a052fcce25,"WIP Handle proximal operators with scaling, offset, linear, and quadratic terms",Anqi Fu,anqi.fu.1987@gmail.com,Anqi Fu,anqi.fu.1987@gmail.com,2019-08-27 17:17:17-07:00,25200,2019-08-27 17:17:17-07:00,25200,True,False,"['__init__.py', 'composition.py', 'constraint.py', 'misc.py', 'prox_operators.py', 'quadratic.py', 'test_proximal.py']",['7b172a5d12e22e0714fbbe459ffa89e1fab82aeb'],560,73,633,7,0.42857142857142855,0.3819241982507289,0.34402332361516036
eec8eb2e246d9de4a844ab8749107537abfc1bfe,WIP Handle scaling for elementwise and vector-norm proximal operators,Anqi Fu,anqi.fu.1987@gmail.com,Anqi Fu,anqi.fu.1987@gmail.com,2019-08-27 20:09:15-07:00,25200,2019-08-27 20:09:15-07:00,25200,True,False,"['constraint.py', 'elementwise.py', 'norm.py', 'quadratic.py']",['c5d974a2254dbf86d1dd9b96fcd5e5a052fcce25'],16,124,140,4,1.0,0.5357142857142857,0.0
9f510739c4ae885fa41261c8cb94a3f6fb0da4e8,"Finish support for scale, offset, linear, and quadratic terms for proximal operators that operate on vectors or elementwise",Anqi Fu,anqi.fu.1987@gmail.com,Anqi Fu,anqi.fu.1987@gmail.com,2019-08-27 22:39:24-07:00,25200,2019-08-27 22:39:24-07:00,25200,True,False,"['composition.py', 'constraint.py', 'elementwise.py', 'misc.py', 'quadratic.py', 'test_proximal.py']",['eec8eb2e246d9de4a844ab8749107537abfc1bfe'],27,83,110,6,1.0,0.42857142857142855,0.3333333333333333
3add96cef536976df62de76505c015624ab08b46,"fix unicode issue, pass installation and tests, examples refactorization TODO",junziz,junziz@stanford.edu,junziz,junziz@stanford.edu,2019-08-28 02:17:32-07:00,25200,2019-08-28 02:17:32-07:00,25200,True,False,"['.gitignore', 'constraint.py']",['9f510739c4ae885fa41261c8cb94a3f6fb0da4e8'],2,3,5,2,,,
3c9cdc04448e2b048367e4bd68f35afc8a6702e2,"fix unicode issues; remember to use \\ instread of \ everywhere, or raw string whenever possible",junziz,junziz@stanford.edu,junziz,junziz@stanford.edu,2019-08-28 03:45:21-07:00,25200,2019-08-28 03:45:21-07:00,25200,True,False,"['acceleration.py', 'constraint.py', 'elementwise.py', 'misc.py', 'norm.py', 'quadratic.py', 'test_precondition.py']",['3add96cef536976df62de76505c015624ab08b46'],36,36,72,7,,,
f23d539f60ee7ddeefe8a557a8231be68e28eb2d,Add proximal operators for matrix functions,anqif,anqif@stanford.edu,anqif,anqif@stanford.edu,2019-08-28 15:01:45-07:00,25200,2019-08-28 15:01:45-07:00,25200,True,False,"['__init__.py', 'matrix.py', 'norm.py', 'test_proximal.py', 'l1_trend_filtering.py', 'nnls_reg.py']",['3c9cdc04448e2b048367e4bd68f35afc8a6702e2'],41,86,127,6,0.8947368421052632,1.0,0.47368421052631576
3c6f5c9e9a6ae44bd3c8a8de44fec10c2136ffe0,Add most of the proximal operators present in POGS,Anqi Fu,anqi.fu.1987@gmail.com,Anqi Fu,anqi.fu.1987@gmail.com,2019-08-28 19:55:17-07:00,25200,2019-08-28 19:55:17-07:00,25200,True,False,"['__init__.py', 'composition.py', 'constraint.py', 'elementwise.py', 'misc.py']",['f23d539f60ee7ddeefe8a557a8231be68e28eb2d'],16,117,133,5,1.0,1.0,0.34375
7aa3e20574e81f1d50a87fbb530a4d239dbb650f,Add more detailed code documentation,Anqi Fu,anqi.fu.1987@gmail.com,Anqi Fu,anqi.fu.1987@gmail.com,2019-08-28 20:57:00-07:00,25200,2019-08-28 20:57:00-07:00,25200,True,False,"['composition.py', 'constraint.py', 'elementwise.py', 'matrix.py', 'misc.py', 'norm.py', 'quadratic.py']",['3c6f5c9e9a6ae44bd3c8a8de44fec10c2136ffe0'],28,44,72,7,,,
b8867275ba05e1290377a6edb744ab5b5eb04012,WIP Adding more tests for proximal operators used in paper,Anqi Fu,anqi.fu.1987@gmail.com,Anqi Fu,anqi.fu.1987@gmail.com,2019-08-28 23:48:03-07:00,25200,2019-08-28 23:48:03-07:00,25200,True,False,"['matrix.py', 'test_proximal.py']",['7aa3e20574e81f1d50a87fbb530a4d239dbb650f'],23,74,97,2,0.918918918918919,1.0,0.8648648648648649
849da576848cbcc788d204124c2798cc7b6bba8b,Make projections onto nonnegative/nonpositive orthants more efficient. Change prox_list for a few of the simple paper examples.,Anqi Fu,anqi.fu.1987@gmail.com,Anqi Fu,anqi.fu.1987@gmail.com,2019-08-29 00:17:25-07:00,25200,2019-08-29 00:17:25-07:00,25200,True,False,"['constraint.py', 'l1_trend_filtering.py', 'multitask_reg_logistic.py', 'nnls.py', 'nnls_reg.py', 'optimal_control.py', 'sparse_inv_cov_est.py']",['b8867275ba05e1290377a6edb744ab5b5eb04012'],27,27,54,7,1.0,0.0,0.0
7f0c8386c5c5d52fc50a4de4590e6d0212b143d3,WIP Replace prox_sat with composition of proximal operators for sum of squares and box constraint,Anqi Fu,anqi.fu.1987@gmail.com,Anqi Fu,anqi.fu.1987@gmail.com,2019-08-29 00:37:50-07:00,25200,2019-08-29 00:37:50-07:00,25200,True,False,"['optimal_control.py', 'single_commodity_flow.py']",['849da576848cbcc788d204124c2798cc7b6bba8b'],3,8,11,2,0.5,1.0,0.5
b0e669bc0f1ba2ade72833c45156656d186226a4,"finish refactorization for the new proximal operators in the examples, except for coupled qp; correct a few small bugs in the proxmal operators",junziz,junziz@stanford.edu,junziz,junziz@stanford.edu,2019-08-29 15:59:48-07:00,25200,2019-08-29 15:59:48-07:00,25200,True,False,"['README.md', 'composition.py', 'misc.py', 'norm.py', 'multitask_reg_logistic.py', 'optimal_control.py', 'sparse_inv_cov_est.py']",['7f0c8386c5c5d52fc50a4de4590e6d0212b143d3'],18,24,42,7,1.0,1.0,1.0
7905eb74a95ffa6ee46cb25ef48aa81481e84d4c,refactorziation of new proximal operators in examples done; rerunning WIP,junziz,junziz@stanford.edu,junziz,junziz@stanford.edu,2019-08-29 18:15:21-07:00,25200,2019-08-29 18:15:21-07:00,25200,True,False,"['__init__.py', 'quadratic.py', 'utilities.py', 'coupled_qp.eps', 'coupled_qp.pdf', 'coupled_qp_rerun.eps', 'l1_trend_filter.eps', 'l1_trend_filter.pdf', 'multitask_reglog.eps', 'multitask_reglog.pdf', 'nnls.eps', 'nnls.pdf', 'nnls_rerun.eps', 'opt_cont.eps', 'opt_cont.pdf', 'reg_effect.eps', 'reg_effect.pdf', 'single_com_flow.eps', 'single_com_flow.pdf', 'sparse_inv_cov_est_large.eps', 'sparse_inv_cov_est_large.pdf', 'sparse_inv_cov_est_small.eps', 'sparse_inv_cov_est_small.pdf', 'paper_plots.ipynb', 'coupled_qp.py', 'l1_trend_filtering.py', 'optimal_control.py', 'paper_plots.py', 'single_commodity_flow.py']",['b0e669bc0f1ba2ade72833c45156656d186226a4'],29976,210,30186,29,0.0,0.3333333333333333,0.0
6dbc85b542bf3390088e04c11f645b8e909f8ba4,finish reruning of the notebook,junziz,junziz@stanford.edu,junziz,junziz@stanford.edu,2019-08-29 19:39:08-07:00,25200,2019-08-29 19:39:08-07:00,25200,True,False,"['coupled_qp_rerun.pdf', 'nnls_rerun.pdf', 'paper_plots.ipynb']",['7905eb74a95ffa6ee46cb25ef48aa81481e84d4c'],48,133,181,3,,,
529432f9e413364221434caca2e3e45b84774163,Fix a bug in proximal operator of 2-norm. WIP Refactoring and combining tests to remove duplicate code,Anqi Fu,anqi.fu.1987@gmail.com,Anqi Fu,anqi.fu.1987@gmail.com,2019-09-03 11:22:51-07:00,25200,2019-09-03 11:22:51-07:00,25200,True,False,"['norm.py', 'test_proximal.py']",['6dbc85b542bf3390088e04c11f645b8e909f8ba4'],52,69,121,2,0.0,0.0,0.0
48d416f883c624c7a5eeb99c58738d618ec6ba2e,Add more checks for quadratic proximal operators along with tests,Anqi Fu,anqi.fu.1987@gmail.com,Anqi Fu,anqi.fu.1987@gmail.com,2019-09-03 14:05:12-07:00,25200,2019-09-03 14:05:12-07:00,25200,True,False,"['quadratic.py', 'test_proximal.py']",['529432f9e413364221434caca2e3e45b84774163'],28,113,141,2,0.0,0.8064516129032258,0.8064516129032258
55569067c311138cbf942a683102f3faea09cda1,Add tests for all proximal operators that take a vector input,Anqi Fu,anqi.fu.1987@gmail.com,Anqi Fu,anqi.fu.1987@gmail.com,2019-09-03 16:28:47-07:00,25200,2019-09-03 16:28:47-07:00,25200,True,False,['test_proximal.py'],['48d416f883c624c7a5eeb99c58738d618ec6ba2e'],41,67,108,1,1.0,1.0,0.95
f9fdebccc194abd74bb613427f7b990197e33d1f,change composition_tests to composition_check to avoid naming issue errors when calling nosetests; comment out test_norm_inf for debugging,junziz,junziz@stanford.edu,junziz,junziz@stanford.edu,2019-09-03 16:59:10-07:00,25200,2019-09-03 16:59:10-07:00,25200,True,False,['test_proximal.py'],['55569067c311138cbf942a683102f3faea09cda1'],38,38,76,1,0.0,0.0,0.0
bcef41687134431b10df289d3c0cd45c97b3ed3f,Fix a bug in logistic proximal operator so it words elementwise on matrices (as if they were vectorized). Add more tests for logistic.,Anqi Fu,anqi.fu.1987@gmail.com,Anqi Fu,anqi.fu.1987@gmail.com,2019-09-03 17:16:12-07:00,25200,2019-09-03 17:16:12-07:00,25200,True,False,"['misc.py', 'test_proximal.py']",['55569067c311138cbf942a683102f3faea09cda1'],2,15,17,2,1.0,1.0,0.45454545454545453
1e9e8c14b7aaff2b57729553796078bbc5eb7c63,Expand box constraint projection tests and add tests for group lasso,Anqi Fu,anqi.fu.1987@gmail.com,Anqi Fu,anqi.fu.1987@gmail.com,2019-09-03 22:27:14-07:00,25200,2019-09-03 22:27:14-07:00,25200,True,False,"['constraint.py', 'test_proximal.py']",['85e20eeac62305ad5fd4b41cc19fb657e1913633'],32,106,138,2,0.0,1.0,0.9629629629629629
1357f36ef25c43cf09dd53f3c15c73600f045a2c,Finish tests for constraints,Anqi Fu,anqi.fu.1987@gmail.com,Anqi Fu,anqi.fu.1987@gmail.com,2019-09-04 19:45:03-07:00,25200,2019-09-04 19:45:03-07:00,25200,True,False,['test_proximal.py'],['1e9e8c14b7aaff2b57729553796078bbc5eb7c63'],66,91,157,1,0.0,1.0,1.0
7260be7d02b6b828965dc5d19248256a6575b14b,Add tests for matrix input proximal operators. Extend trace proximal operator so it can handle a matrix multiplication term as required by the sparse inverse covariance estimation example.,Anqi Fu,anqi.fu.1987@gmail.com,Anqi Fu,anqi.fu.1987@gmail.com,2019-09-04 21:21:19-07:00,25200,2019-09-04 21:21:19-07:00,25200,True,False,"['matrix.py', 'test_proximal.py']",['1357f36ef25c43cf09dd53f3c15c73600f045a2c'],9,40,49,2,1.0,1.0,0.4444444444444444
dbdfc4c7a6665bd4a39ac1b38bc54c71408d7c4b,Add projection onto second-order cone. WIP Adding tests for elementwise proximal operators.,Anqi Fu,anqi.fu.1987@gmail.com,Anqi Fu,anqi.fu.1987@gmail.com,2019-09-04 22:47:29-07:00,25200,2019-09-04 22:47:29-07:00,25200,True,False,"['elementwise.py', 'projection.py', 'test_proximal.py']",['7260be7d02b6b828965dc5d19248256a6575b14b'],25,101,126,3,0.40816326530612246,0.40816326530612246,0.40816326530612246
60b0a8d23f8f7ff596645b32fcc07d932e85f457,"fixed some test failures by restricting places to 3 and changing solvers to SCS; be careful about using OSQP, ECOS, MOSEK, etc., as they will throw errors when solved inaccurately",junziz,junziz@stanford.edu,junziz,junziz@stanford.edu,2019-09-05 12:11:28-07:00,25200,2019-09-05 12:11:28-07:00,25200,True,False,['coupled_qp.py'],['dbdfc4c7a6665bd4a39ac1b38bc54c71408d7c4b'],2,2,4,1,,,
64daa4511b6dcb98965c4bb73ce1b7196f232d31,forgot to commit changes in tests; recommit,junziz,junziz@stanford.edu,junziz,junziz@stanford.edu,2019-09-05 12:13:00-07:00,25200,2019-09-05 12:13:00-07:00,25200,True,False,['test_proximal.py'],['60b0a8d23f8f7ff596645b32fcc07d932e85f457'],5,5,10,1,,,
f6851de1301ad5f4295ff9842a531dda0970065e,Fix mistakes in proximal operator for exponential and entropy (actually negative entropy) functions,Anqi Fu,anqi.fu.1987@gmail.com,Anqi Fu,anqi.fu.1987@gmail.com,2019-09-05 15:49:46-07:00,25200,2019-09-05 15:49:46-07:00,25200,True,False,"['__init__.py', 'elementwise.py', 'base_test.py', 'test_proximal.py']",['dbdfc4c7a6665bd4a39ac1b38bc54c71408d7c4b'],23,82,105,4,1.0,1.0,0.9705882352941176
aad815e086cb001dcf0e1a6e48f3376380c5ebe0,Fix mistakes in proximal operator for exponential and entropy (actually negative entropy) functions,Anqi Fu,anqi.fu.1987@gmail.com,Anqi Fu,anqi.fu.1987@gmail.com,2019-09-05 15:50:09-07:00,25200,2019-09-05 15:50:09-07:00,25200,True,False,['elementwise.py'],['f6851de1301ad5f4295ff9842a531dda0970065e'],5,5,10,1,,,
c7728534ee3797307cd2d2b4981c69614d5a7bf6,Add proximal operator and tests for second-order cone,Anqi Fu,anqi.fu.1987@gmail.com,Anqi Fu,anqi.fu.1987@gmail.com,2019-09-05 18:03:42-07:00,25200,2019-09-05 18:03:42-07:00,25200,True,False,"['__init__.py', 'constraint.py', 'elementwise.py', 'projection.py', 'test_proximal.py']",['e373efaf3c6cffe848b751cc9650144e798a0cf9'],22,70,92,5,0.41379310344827586,1.0,0.7931034482758621
5191179fa4da5c506d56155ee39947da44a5d4f9,Use bisection method for now to project onto the l1 ball,Anqi Fu,anqi.fu.1987@gmail.com,Anqi Fu,anqi.fu.1987@gmail.com,2019-09-05 19:04:52-07:00,25200,2019-09-05 19:04:52-07:00,25200,True,False,"['norm.py', 'projection.py', 'test_proximal.py']",['c7728534ee3797307cd2d2b4981c69614d5a7bf6'],15,30,45,3,1.0,1.0,0.23809523809523808
c35f973325b1ca5281e3935f3dc4ec97ba8aae72,Move bisection method to simplex projection function so max and sigma_max prox's now work,Anqi Fu,anqi.fu.1987@gmail.com,Anqi Fu,anqi.fu.1987@gmail.com,2019-09-05 19:35:04-07:00,25200,2019-09-05 19:35:04-07:00,25200,True,False,"['misc.py', 'projection.py', 'test_proximal.py']",['5191179fa4da5c506d56155ee39947da44a5d4f9'],34,34,68,3,0.0,1.0,0.0
98477402d41b124527f84be5215414f5af726cef,commented out test_norm_inf and test_sigma_max as they are still not working; reduce accuracy requirement of test_norm2 matrix test case based on kona64,junziz,junziz@stanford.edu,junziz,junziz@stanford.edu,2019-09-06 01:51:20-07:00,25200,2019-09-06 01:51:20-07:00,25200,True,False,['test_proximal.py'],['c35f973325b1ca5281e3935f3dc4ec97ba8aae72'],14,14,28,1,0.0,0.0,0.0
770beb47c5dfe32a2ac3f9740de77296215b28f4,Add tests for all the proximal operators used in the paper's experiments,Anqi Fu,anqi.fu.1987@gmail.com,Anqi Fu,anqi.fu.1987@gmail.com,2019-09-07 21:59:58-07:00,25200,2019-09-07 21:59:58-07:00,25200,True,False,"['projection.py', 'test_proximal.py']",['98477402d41b124527f84be5215414f5af726cef'],33,56,89,2,0.35294117647058826,0.0,0.9411764705882353
1d5761f4753c5778a06b5cedae4c711d20983f3b,automatic reshaping WIP; require dependency on CVXPY 1.0.25 for more stable performance across platforms,junziz,junziz@stanford.edu,junziz,junziz@stanford.edu,2019-09-09 15:46:12-07:00,25200,2019-09-09 15:46:12-07:00,25200,True,False,"['utilities.py', 'setup.py']",['770beb47c5dfe32a2ac3f9740de77296215b28f4'],1,51,52,2,0.0,0.0,0.4146341463414634
068311067e6f2b62704563a4b4cde07aaaa51143,WIP Modify proximal operators to support sparse handling where possible,Anqi Fu,anqi.fu.1987@gmail.com,Anqi Fu,anqi.fu.1987@gmail.com,2019-09-09 16:33:41-07:00,25200,2019-09-09 16:33:41-07:00,25200,True,False,"['composition.py', 'constraint.py', 'elementwise.py', 'interface.py', 'matrix.py', 'norm.py', 'quadratic.py', 'test_proximal.py']",['1d5761f4753c5778a06b5cedae4c711d20983f3b'],132,177,309,8,0.85,1.0,0.75
302f684d98289de19ff4a897636f50662bc1ad02,WIP Adding tests to check consistency of results with sparse/dense matrices. Fixed a bunch of bugs in sparse handling.,Anqi Fu,anqi.fu.1987@gmail.com,Anqi Fu,anqi.fu.1987@gmail.com,2019-09-09 22:26:41-07:00,25200,2019-09-09 22:26:41-07:00,25200,True,False,"['composition.py', 'constraint.py', 'elementwise.py', 'interface.py', 'misc.py', 'norm.py', 'test_proximal.py']",['068311067e6f2b62704563a4b4cde07aaaa51143'],39,179,218,7,0.0,0.3373493975903614,0.4578313253012048
40a5764427f2a7a8c9fa9539965cb4baaf41740b,Proximal operator of Huber function now supports sparse vectors/matrices in computation,Anqi Fu,anqi.fu.1987@gmail.com,Anqi Fu,anqi.fu.1987@gmail.com,2019-09-10 10:27:49-07:00,25200,2019-09-10 10:27:49-07:00,25200,True,False,"['elementwise.py', 'norm.py', 'test_proximal.py']",['302f684d98289de19ff4a897636f50662bc1ad02'],30,32,62,3,1.0,1.0,1.0
6c8cdd557e27f553e9a3b6e513c98ad3aa752ec2,Fix bug in proximal operator of group lasso so sparse handling works,Anqi Fu,anqi.fu.1987@gmail.com,Anqi Fu,anqi.fu.1987@gmail.com,2019-09-10 11:13:51-07:00,25200,2019-09-10 11:13:51-07:00,25200,True,False,"['norm.py', 'test_proximal.py']",['40a5764427f2a7a8c9fa9539965cb4baaf41740b'],7,10,17,2,1.0,1.0,1.0
da5d597e9eec44f5dd86457d1d68cbeff76b27ce,fix a small typo in automatic reshaping,junziz,junziz@stanford.edu,junziz,junziz@stanford.edu,2019-09-10 11:27:28-07:00,25200,2019-09-10 11:27:28-07:00,25200,True,False,['utilities.py'],['6c8cdd557e27f553e9a3b6e513c98ad3aa752ec2'],2,2,4,1,,,
83510b52a1dee91507e24ec980e2483464266e85,Fix bugs involving sparse handling in prox_sum_squares_affine and update a few tests to use the proximal library handles,Anqi Fu,anqi.fu.1987@gmail.com,Anqi Fu,anqi.fu.1987@gmail.com,2019-09-10 17:27:21-07:00,25200,2019-09-10 17:27:21-07:00,25200,True,False,"['precondition.py', 'constraint.py', 'matrix.py', 'norm.py', 'quadratic.py', 'test_basic.py', 'test_precondition.py', 'test_proximal.py']",['6c8cdd557e27f553e9a3b6e513c98ad3aa752ec2'],79,50,129,8,0.0,0.0,0.45161290322580644
cdcf01b1e7c8b8b5637373defde13d5973ae19a9,Fix a mistake in proximal operator of sigma_max (matrix 2-norm). Add proximal operator for spectral norm. Add some tests for internal projection functions.,Anqi Fu,anqi.fu.1987@gmail.com,Anqi Fu,anqi.fu.1987@gmail.com,2019-09-11 16:16:15-07:00,25200,2019-09-11 16:16:15-07:00,25200,True,False,"['__init__.py', 'matrix.py', 'norm.py', 'test_projection.py', 'test_proximal.py', 'utilities.py']",['4cf6c7b4364fc5888ec55e5b9c9634c5811b9ea6'],20,124,144,6,1.0,1.0,0.8857142857142857
0f1c20b08b08180ed9cf6635f20118b830241f8c,Fix mistake in projection onto the l1 ball. Add more tests of the projection functions.,Anqi Fu,anqi.fu.1987@gmail.com,Anqi Fu,anqi.fu.1987@gmail.com,2019-09-11 22:19:12-07:00,25200,2019-09-11 22:19:12-07:00,25200,True,False,"['matrix.py', 'norm.py', 'projection.py', 'test_projection.py', 'test_proximal.py']",['cdcf01b1e7c8b8b5637373defde13d5973ae19a9'],35,63,98,5,0.9230769230769231,1.0,0.19230769230769232
3a8853c877020afcc53436a1ca99c83bce3a432a,Provide alternative to bisection method for projection onto the simplex,Anqi Fu,anqi.fu.1987@gmail.com,Anqi Fu,anqi.fu.1987@gmail.com,2019-09-11 23:18:42-07:00,25200,2019-09-11 23:18:42-07:00,25200,True,False,"['projection.py', 'test_projection.py']",['0f1c20b08b08180ed9cf6635f20118b830241f8c'],8,11,19,2,0.4,0.0,0.0
f42fce6ae452788d211195fec6d36684adde3802,Fix a mistake in definition of proximal operator for maximum singular value. Add proximal operator for matrix Frobenius norm.,Anqi Fu,anqi.fu.1987@gmail.com,Anqi Fu,anqi.fu.1987@gmail.com,2019-09-12 20:24:49-07:00,25200,2019-09-12 20:24:49-07:00,25200,True,False,"['__init__.py', 'matrix.py', 'norm.py', 'test_proximal.py']",['3a8853c877020afcc53436a1ca99c83bce3a432a'],11,34,45,4,1.0,1.0,0.6153846153846154
332c7667662f20ba743d8e55d6bc753fd370ab3e,Get rid of redundant spectral norm,Anqi Fu,anqi.fu.1987@gmail.com,Anqi Fu,anqi.fu.1987@gmail.com,2019-09-12 22:28:09-07:00,25200,2019-09-12 22:28:09-07:00,25200,True,False,"['__init__.py', 'matrix.py', 'norm.py', 'test_proximal.py']",['f42fce6ae452788d211195fec6d36684adde3802'],30,6,36,4,0.0,0.0,0.5
f40edd218b7d5acc83881bb3e7cd4845cc9042c6,Fix a mistake in proximal operator for negative log determinant,Anqi Fu,anqi.fu.1987@gmail.com,Anqi Fu,anqi.fu.1987@gmail.com,2019-09-12 22:45:58-07:00,25200,2019-09-12 22:45:58-07:00,25200,True,False,"['matrix.py', 'test_proximal.py']",['332c7667662f20ba743d8e55d6bc753fd370ab3e'],13,9,22,2,0.0,0.0,0.0
ffe31ce20cc667e5b493b83ba735db76ca72c9db,Revert change on proximal operator for negative log determinant,Anqi Fu,anqi.fu.1987@gmail.com,Anqi Fu,anqi.fu.1987@gmail.com,2019-09-12 23:39:26-07:00,25200,2019-09-12 23:39:26-07:00,25200,True,False,"['matrix.py', 'test_proximal.py']",['f40edd218b7d5acc83881bb3e7cd4845cc9042c6'],5,10,15,2,1.0,1.0,1.0
875690c684f355fe928357251c1e330881b16498,fix small test failure issues,junziz,junziz@stanford.edu,junziz,junziz@stanford.edu,2019-09-13 14:19:37-07:00,25200,2019-09-13 14:19:37-07:00,25200,True,False,['test_proximal.py'],['ffe31ce20cc667e5b493b83ba735db76ca72c9db'],4,4,8,1,,,
bda74d3d505170d35ac0bd84bcc3e4af8c5d2174,WIP Add proximal operators for a few simple non-convex sets,Anqi Fu,anqi.fu.1987@gmail.com,Anqi Fu,anqi.fu.1987@gmail.com,2019-09-19 19:27:17-07:00,25200,2019-09-19 19:27:17-07:00,25200,True,False,"['constraint.py', 'elementwise.py', 'misc.py', 'nonconvex.py']",['875690c684f355fe928357251c1e330881b16498'],11,94,105,4,0.5641025641025641,1.0,0.10256410256410256
9f1f82aa378980c166d4cb2ae3cb2a19e9363869,added stratified model example,Shane Barratt,stbarratt@gmail.com,Shane Barratt,stbarratt@gmail.com,2019-09-30 11:53:03-07:00,25200,2019-09-30 11:53:03-07:00,25200,True,False,['stratified_model.py'],['bda74d3d505170d35ac0bd84bcc3e4af8c5d2174'],0,122,122,1,0.3877551020408163,1.0,1.0
347ab1a2dedade1417031b50bc223c869f2c7ced,Update README.md,Junzi Zhang,junziz@stanford.edu,GitHub,noreply@github.com,2019-09-30 12:37:07-07:00,25200,2019-09-30 12:37:07-07:00,25200,True,False,['README.md'],['b105ec1a23eb6a6513369fa3a6a4533317362a20'],1,1,2,1,,,
4fe59f35d3dc190c673bd64e02162049bb7ea47f,Update README.md,Junzi Zhang,junziz@stanford.edu,GitHub,noreply@github.com,2019-09-30 12:37:42-07:00,25200,2019-09-30 12:37:42-07:00,25200,True,False,['README.md'],['347ab1a2dedade1417031b50bc223c869f2c7ced'],1,1,2,1,,,
72ff1984aa6d709020074529e87b0081e1bb6474,Update README.md,Junzi Zhang,junziz@stanford.edu,GitHub,noreply@github.com,2019-09-30 12:38:07-07:00,25200,2019-09-30 12:38:07-07:00,25200,True,False,['README.md'],['4fe59f35d3dc190c673bd64e02162049bb7ea47f'],1,1,2,1,,,
de7bee7af89f22d7eaacc69d43a14c298f1b5713,fix bugs in the stratified model,Junzi Zhang,junziz@stanford.edu,Junzi Zhang,junziz@stanford.edu,2019-09-30 15:46:55-07:00,25200,2019-09-30 15:46:55-07:00,25200,True,False,['stratified_model.py'],['72ff1984aa6d709020074529e87b0081e1bb6474'],9,7,16,1,1.0,0.0,0.0
250e692f40f1e85c897a3f26b9f66659892d2a8c,Add an example with a simple logistic regression split row-wise,Anqi Fu,anqi.fu.1987@gmail.com,Anqi Fu,anqi.fu.1987@gmail.com,2019-10-28 15:03:40-07:00,25200,2019-10-28 15:03:40-07:00,25200,True,False,"['simple_logistic.py', 'stratified_model.py']",['de7bee7af89f22d7eaacc69d43a14c298f1b5713'],2,100,102,2,0.125,1.0,1.0
c2f35a05874a604dc629810f94e975b302343ec1,Refactor an index to avoid notational clash with paper,Anqi Fu,anqi.fu.1987@gmail.com,Anqi Fu,anqi.fu.1987@gmail.com,2019-10-28 15:09:11-07:00,25200,2019-10-28 15:09:11-07:00,25200,True,False,['simple_logistic.py'],['250e692f40f1e85c897a3f26b9f66659892d2a8c'],13,13,26,1,,,
15032878073c621144e0371e8ff7451a2f594091,WIP Adding a markdown cataloging all the proximal operators,Anqi Fu,anqi.fu.1987@gmail.com,Anqi Fu,anqi.fu.1987@gmail.com,2020-03-27 02:23:02-07:00,25200,2020-03-27 02:23:02-07:00,25200,True,False,"['PROXIMAL.md', 'nonconvex.py', 'utilities.py', 'simple_logistic.py']",['c2f35a05874a604dc629810f94e975b302343ec1'],18,38,56,4,,,
917aa95d642b6c558d6dd6190bc55bb4365127ff,Finish tables of proximal operators,Anqi Fu,anqi.fu.1987@gmail.com,Anqi Fu,anqi.fu.1987@gmail.com,2020-03-27 15:15:17-07:00,25200,2020-03-27 15:15:17-07:00,25200,True,False,['PROXIMAL.md'],['15032878073c621144e0371e8ff7451a2f594091'],19,50,69,1,,,
98c8738b25df931305b2e9b1d3727ad88ef220fe,WIP Add an introduction to the proximal operator readme. Move to the a2dr.proximal directory,Anqi Fu,anqi.fu.1987@gmail.com,Anqi Fu,anqi.fu.1987@gmail.com,2020-03-27 23:26:36-07:00,25200,2020-03-27 23:26:36-07:00,25200,True,False,"['PROXIMAL.md', 'README.md', 'README.md']",['917aa95d642b6c558d6dd6190bc55bb4365127ff'],68,104,172,3,,,
4d4f2e4265927620f5e417b62601e7ebda0a3288,"Finish readme for proximal operator library, including examples on additional arguments and compositions",Anqi Fu,anqi.fu.1987@gmail.com,Anqi Fu,anqi.fu.1987@gmail.com,2020-03-28 02:26:47-07:00,25200,2020-03-28 02:26:47-07:00,25200,True,False,['README.md'],['98c8738b25df931305b2e9b1d3727ad88ef220fe'],17,33,50,1,,,
8786159f0b61ab1801171c78960e8b410b67249f,Add Python notebooks for a few examples from the paper,Anqi Fu,anqi.fu.1987@gmail.com,Anqi Fu,anqi.fu.1987@gmail.com,2020-03-30 18:15:21-07:00,25200,2020-03-30 18:15:21-07:00,25200,True,False,"['l1_trend_filter.ipynb', 'nnls.ipynb', 'sparse_inv_cov_est.ipynb']",['4d4f2e4265927620f5e417b62601e7ebda0a3288'],0,394,394,3,,,
c54a64e473aff01b6a3fae9bed198915620eefca,Add notebooks for coupled QP and multitask logistic regression problems,Anqi Fu,anqi.fu.1987@gmail.com,Anqi Fu,anqi.fu.1987@gmail.com,2020-03-30 23:18:42-07:00,25200,2020-03-30 23:18:42-07:00,25200,True,False,"['coupled_qp.ipynb', 'multitask_reg_logistic.ipynb', 'nnls.ipynb', 'sparse_inv_cov_est.ipynb', 'coupled_qp.py', 'optimal_control.py', 'paper_plots.py']",['8786159f0b61ab1801171c78960e8b410b67249f'],5,293,298,7,,,
4524cb761235b9c6f97b407c574454c0db66a6da,WIP Adding notebook for optimal control problem,Anqi Fu,anqi.fu.1987@gmail.com,Anqi Fu,anqi.fu.1987@gmail.com,2020-03-31 01:08:32-07:00,25200,2020-03-31 01:08:32-07:00,25200,True,False,['optimal_control.ipynb'],['c54a64e473aff01b6a3fae9bed198915620eefca'],0,112,112,1,,,
c2e06abf6bc3e863459d18d3753ab6fdd74b25a6,Finish writeup and code for Python notebooks of paper examples,Anqi Fu,anqi.fu.1987@gmail.com,Anqi Fu,anqi.fu.1987@gmail.com,2020-04-01 00:30:06-07:00,25200,2020-04-01 00:30:06-07:00,25200,True,False,"['coupled_qp.ipynb', 'l1_trend_filter.ipynb', 'multitask_reg_logistic.ipynb', 'nnls.ipynb', 'optimal_control.ipynb', 'single_commodity_flow.ipynb', 'sparse_inv_cov_est.ipynb', 'optimal_control.py']",['4524cb761235b9c6f97b407c574454c0db66a6da'],11,428,439,8,,,
e9fe9c7e4345466c556d49541dfbfa90a8f545a7,Refactor paper examples code to match notation in the paper,Anqi Fu,anqi.fu.1987@gmail.com,Anqi Fu,anqi.fu.1987@gmail.com,2020-04-01 01:41:12-07:00,25200,2020-04-01 01:41:12-07:00,25200,True,False,"['single_commodity_flow.ipynb', 'coupled_qp.py', 'l1_trend_filtering.py', 'multitask_reg_logistic.py', 'nnls.py', 'nnls_reg.py', 'optimal_control.py', 'single_commodity_flow.py', 'sparse_inv_cov_est.py']",['c2e06abf6bc3e863459d18d3753ab6fdd74b25a6'],170,176,346,9,0.0,0.0,1.0
9e72bb0cd3ef1cc1c62d2a37287eaf95e08188c3,WIP Fix code and reduce size of problems in Python notebook examples,Anqi Fu,anqi.fu.1987@gmail.com,Anqi Fu,anqi.fu.1987@gmail.com,2020-04-01 16:01:11-07:00,25200,2020-04-01 16:01:11-07:00,25200,True,False,"['snp500.txt', 'l1_trend_filter.ipynb', 'nnls.ipynb', 'sparse_inv_cov_est.ipynb']",['e9fe9c7e4345466c556d49541dfbfa90a8f545a7'],37,2322,2359,4,,,
b9a7b24a04f0ebff84c955a140928b10c6a79574,WIP Fix network graph generation and plotting in commodity flow example. Run a few other examples,Anqi Fu,anqi.fu.1987@gmail.com,Anqi Fu,anqi.fu.1987@gmail.com,2020-04-01 18:14:04-07:00,25200,2020-04-01 18:14:04-07:00,25200,True,False,"['coupled_qp.ipynb', 'multitask_reg_logistic.ipynb', 'optimal_control.ipynb', 'single_commodity_flow.ipynb']",['9e72bb0cd3ef1cc1c62d2a37287eaf95e08188c3'],46,1143,1189,4,,,
ee58da4136f026eca678aa05b3c91b975ecd62ba,Fix some typos in refactoring,Anqi Fu,anqi.fu.1987@gmail.com,Anqi Fu,anqi.fu.1987@gmail.com,2020-04-01 18:24:28-07:00,25200,2020-04-01 18:24:28-07:00,25200,True,False,"['optimal_control.py', 'single_commodity_flow.py', 'sparse_inv_cov_est.py']",['b9a7b24a04f0ebff84c955a140928b10c6a79574'],4,4,8,3,,,
cf4f6c1a1260c939c7a68e6cc5f2a02e00e4a128,Refactor variable names in paper experiments code,Anqi Fu,anqi.fu.1987@gmail.com,Anqi Fu,anqi.fu.1987@gmail.com,2020-04-01 23:44:44-07:00,25200,2020-04-01 23:44:44-07:00,25200,True,False,"['multitask_reg_logistic.ipynb', 'nnls_reg.py', 'optimal_control.py', 'paper_plots.py', 'sparse_inv_cov_est.py']",['ee58da4136f026eca678aa05b3c91b975ecd62ba'],193,3401,3594,5,0.0,0.0,1.0
f7b54fe71bbc4cb19b2445d4aaec49352ed5d873,Fix a typo and change colormap for arc flows to better visualize magnitude,Anqi Fu,anqi.fu.1987@gmail.com,Anqi Fu,anqi.fu.1987@gmail.com,2020-04-02 01:59:57-07:00,25200,2020-04-02 01:59:57-07:00,25200,True,False,['single_commodity_flow.ipynb'],['cf4f6c1a1260c939c7a68e6cc5f2a02e00e4a128'],7,7,14,1,,,
6a9e65cae0ebb82d105ac3544c6d029d117b9c52,Get rid of nonconvex set proximal operators,Anqi Fu,anqi.fu.1987@gmail.com,Anqi Fu,anqi.fu.1987@gmail.com,2020-04-05 21:47:23-07:00,25200,2020-04-05 21:47:23-07:00,25200,True,False,"['README.md', 'nonconvex.py']",['f7b54fe71bbc4cb19b2445d4aaec49352ed5d873'],93,1,94,2,0.4358974358974359,0.0,0.8974358974358975
1d26d5e36ad5ad2273990ba99322dcbf62a81826,add linear infeas detect and the corresponding test,junziz,junziz@stanford.edu,junziz,junziz@stanford.edu,2020-04-06 17:38:18-07:00,25200,2020-04-06 17:38:18-07:00,25200,True,False,"['solver.py', 'test_basic.py']",['6a9e65cae0ebb82d105ac3544c6d029d117b9c52'],3,38,41,2,0.0,0.8461538461538461,0.8461538461538461
7a6ea22cab55f778c732e78202fa8006af459e3a,Update README.md,Junzi Zhang,junziz@stanford.edu,GitHub,noreply@github.com,2020-04-07 11:07:57-07:00,25200,2020-04-07 11:07:57-07:00,25200,True,False,['README.md'],['1d26d5e36ad5ad2273990ba99322dcbf62a81826'],19,20,39,1,,,
593e7d79fc8fd9558c8de4863be5e87202287e96,Update README.md,Junzi Zhang,junziz@stanford.edu,GitHub,noreply@github.com,2020-04-07 11:09:33-07:00,25200,2020-04-07 11:09:33-07:00,25200,True,False,['README.md'],['7a6ea22cab55f778c732e78202fa8006af459e3a'],1,1,2,1,,,
9644af158806cd982bd0fed2460dde9977e031d1,Update README.md,Junzi Zhang,junziz@stanford.edu,GitHub,noreply@github.com,2020-04-08 19:14:13-07:00,25200,2020-04-08 19:14:13-07:00,25200,True,False,['README.md'],['593e7d79fc8fd9558c8de4863be5e87202287e96'],1,11,12,1,,,
8414484ca91ad070097630b05649a17de26b4ffb,Update README.md,Junzi Zhang,junziz@stanford.edu,GitHub,noreply@github.com,2020-04-08 19:15:30-07:00,25200,2020-04-08 19:15:30-07:00,25200,True,False,['README.md'],['9644af158806cd982bd0fed2460dde9977e031d1'],0,1,1,1,,,
86e83e91bf175f384ebb072c1879d0cd9d40e1cb,Update README.md,Junzi Zhang,junziz@stanford.edu,GitHub,noreply@github.com,2020-04-08 19:16:26-07:00,25200,2020-04-08 19:16:26-07:00,25200,True,False,['README.md'],['8414484ca91ad070097630b05649a17de26b4ffb'],3,3,6,1,,,
4d1c70ef604c5eaeafda99b97ccccc24016e85cb,"merge bullet points, clarify compactness",Junzi Zhang,junziz@stanford.edu,GitHub,noreply@github.com,2020-04-09 00:16:53-07:00,25200,2020-04-09 00:16:53-07:00,25200,True,False,['README.md'],['86e83e91bf175f384ebb072c1879d0cd9d40e1cb'],5,3,8,1,,,
1251723805d9bb4122c273207c2a2168b151813e,"edit contact email to be a public one, and mention linear infeasibility output",junziz,junziz@stanford.edu,junziz,junziz@stanford.edu,2020-04-12 00:34:42-07:00,25200,2020-04-12 00:34:42-07:00,25200,True,False,"['README.md', 'setup.py']",['4d1c70ef604c5eaeafda99b97ccccc24016e85cb'],1,2,3,2,,,
8fc3d871cc7f0d9ba43e2d4df7e585d2da33dd5c,Update README.md,Junzi Zhang,junziz@stanford.edu,GitHub,noreply@github.com,2020-04-12 00:35:36-07:00,25200,2020-04-12 00:35:36-07:00,25200,True,False,['README.md'],['1251723805d9bb4122c273207c2a2168b151813e'],0,1,1,1,,,
b427a165054e59ee65a5d36d7f3b50d04e1f1ee8,"add printout, and small edits to readme",junziz,junziz@stanford.edu,junziz,junziz@stanford.edu,2020-04-12 02:28:12-07:00,25200,2020-04-12 02:28:12-07:00,25200,True,False,"['README.md', 'precondition.py', 'solver.py']",['8fc3d871cc7f0d9ba43e2d4df7e585d2da33dd5c'],16,51,67,3,0.0,0.0,0.0
8b734061c527968da56d36a42c2943332a463ce4,suppress undesired printout,junziz,junziz@stanford.edu,junziz,junziz@stanford.edu,2020-04-12 02:45:05-07:00,25200,2020-04-12 02:45:05-07:00,25200,True,False,['solver.py'],['b427a165054e59ee65a5d36d7f3b50d04e1f1ee8'],0,3,3,1,0.0,0.0,0.0
404ef710f0ef926019abe721e598af01a64da6f9,update readme in examples,Junzi Zhang,junziz@stanford.edu,GitHub,noreply@github.com,2020-04-12 02:57:18-07:00,25200,2020-04-12 02:57:18-07:00,25200,True,False,['README.md'],['8b734061c527968da56d36a42c2943332a463ce4'],2,2,4,1,,,
d41188271efa7b16288562c4f640e1c6eee3ccd6,Update README.md,Junzi Zhang,junziz@stanford.edu,GitHub,noreply@github.com,2020-04-12 02:58:29-07:00,25200,2020-04-12 02:58:29-07:00,25200,True,False,['README.md'],['404ef710f0ef926019abe721e598af01a64da6f9'],1,1,2,1,,,
7a7c7cafeabf1b88638235048225221bf222111d,Update README.md,Junzi Zhang,junziz@stanford.edu,GitHub,noreply@github.com,2020-04-12 02:59:31-07:00,25200,2020-04-12 02:59:31-07:00,25200,True,False,['README.md'],['d41188271efa7b16288562c4f640e1c6eee3ccd6'],1,1,2,1,,,
c7c664706fa185b8717a87b153a0e6709da0fd0f,fix r_best issue,junziz,junziz@stanford.edu,junziz,junziz@stanford.edu,2020-04-12 03:26:41-07:00,25200,2020-04-12 03:26:41-07:00,25200,True,False,['solver.py'],['7a7c7cafeabf1b88638235048225221bf222111d'],2,4,6,1,0.0,0.0,0.0
cc20eb854836a43e30b18a2dd5702ecf5fa7d411,add verbose option,junziz,junziz@stanford.edu,junziz,junziz@stanford.edu,2020-04-12 03:41:40-07:00,25200,2020-04-12 03:41:40-07:00,25200,True,False,"['README.md', 'precondition.py', 'solver.py']",['c7c664706fa185b8717a87b153a0e6709da0fd0f'],33,54,87,3,0.0,0.0,0.0
36458ecc87c1c7b332b377ba59b5900d07eedc85,suppress potential warnings in prox evaluations; fix typo of m and n printout; use a more relaxed linear infeasibility detection threshold,junziz,junziz@stanford.edu,junziz,junziz@stanford.edu,2020-04-12 04:52:56-07:00,25200,2020-04-12 04:52:56-07:00,25200,True,False,"['solver.py', 'simple_logistic.py']",['cc20eb854836a43e30b18a2dd5702ecf5fa7d411'],3,11,14,2,0.0,0.0,0.0
62879e1d0f7d87d2567285d4473a7c088553e6e3,rerun most of the notebooks; fix some small typos and printing issues in a2dr solver,junziz,junziz@stanford.edu,junziz,junziz@stanford.edu,2020-04-12 08:06:40-07:00,25200,2020-04-12 08:06:40-07:00,25200,True,False,"['solver.py', 'coupled_qp.ipynb', 'equil.ipynb', 'l1_trend_filter.ipynb', 'multitask_reg_logistic.ipynb', 'nnls.ipynb', 'optimal_control.ipynb', 'paper_plots.ipynb', 'single_commodity_flow.ipynb', 'sparse_inv_cov_est.ipynb']",['36458ecc87c1c7b332b377ba59b5900d07eedc85'],2002,1856,3858,10,0.0,0.0,0.0
12f64d5f64c892a2ae159e5b8584084834aaac6e,finish rerun all notebooks,junziz,junziz@stanford.edu,junziz,junziz@stanford.edu,2020-04-12 12:22:27-07:00,25200,2020-04-12 12:22:27-07:00,25200,True,False,"['coupled_qp.pdf', 'coupled_qp_rerun.pdf', 'l1_trend_filter.pdf', 'multitask_reglog.pdf', 'nnls.pdf', 'nnls_rerun.pdf', 'opt_cont.pdf', 'reg_effect.pdf', 'single_com_flow.pdf', 'sparse_inv_cov_est_large.pdf', 'sparse_inv_cov_est_small.pdf', 'paper_plots.ipynb', 'paper_plots.py']",['62879e1d0f7d87d2567285d4473a7c088553e6e3'],2130,915,3045,13,,,
b5a3fcb8b196b6753e1e5f62dc1d830e26aabfea,fix some file unclosed issue in solver.py print out; rerun paper_plots,junziz,junziz@stanford.edu,junziz,junziz@stanford.edu,2020-04-12 17:50:36-07:00,25200,2020-04-12 17:50:36-07:00,25200,True,False,"['solver.py', 'coupled_qp.pdf', 'l1_trend_filter.pdf', 'multitask_reglog.pdf', 'nnls.pdf', 'nnls_rerun.pdf', 'opt_cont.pdf', 'reg_effect.pdf', 'single_com_flow.pdf', 'sparse_inv_cov_est_large.pdf', 'sparse_inv_cov_est_small.pdf', 'paper_plots.ipynb']",['12f64d5f64c892a2ae159e5b8584084834aaac6e'],605,382,987,12,0.0,0.0,0.0
f6fff544d948c95a180d23135d6f29fc17578a5d,rerun all notebooks to double check (apart from paper_plots),junziz,junziz@stanford.edu,junziz,junziz@stanford.edu,2020-04-12 18:04:57-07:00,25200,2020-04-12 18:04:57-07:00,25200,True,False,"['coupled_qp.ipynb', 'l1_trend_filter.ipynb', 'multitask_reg_logistic.ipynb', 'nnls.ipynb', 'optimal_control.ipynb', 'single_commodity_flow.ipynb', 'sparse_inv_cov_est.ipynb']",['b5a3fcb8b196b6753e1e5f62dc1d830e26aabfea'],192,192,384,7,,,
845b955ed87da89cfd28d04049df88811d0bea56,finish rerun all,junziz,junziz@stanford.edu,junziz,junziz@stanford.edu,2020-04-12 20:29:35-07:00,25200,2020-04-12 20:29:35-07:00,25200,True,False,"['coupled_qp.pdf', 'l1_trend_filter.pdf', 'multitask_reglog.pdf', 'nnls.pdf', 'nnls_rerun.pdf', 'opt_cont.pdf', 'reg_effect.pdf', 'single_com_flow.pdf', 'sparse_inv_cov_est_large.pdf', 'sparse_inv_cov_est_small.pdf', 'paper_plots.ipynb']",['f6fff544d948c95a180d23135d6f29fc17578a5d'],365,363,728,11,,,
0dd17eee16e762f57a9406ae021bd4ada3f81926,Update README.md,Junzi Zhang,junziz@stanford.edu,GitHub,noreply@github.com,2020-04-13 21:10:30-07:00,25200,2020-04-13 21:10:30-07:00,25200,True,False,['README.md'],['845b955ed87da89cfd28d04049df88811d0bea56'],1,1,2,1,,,
16ba6ce330a16dc5123936a93567c3c009b3d40c,fix some typos in printout; switch back to max iter = 1000,junziz,junziz@stanford.edu,junziz,junziz@stanford.edu,2020-04-13 22:49:15-07:00,25200,2020-04-13 22:49:15-07:00,25200,True,False,"['solver.py', 'setup.py']",['0dd17eee16e762f57a9406ae021bd4ada3f81926'],13,17,30,2,0.0,0.0,0.0
80128682404d44b1cac57ed19ad98662c93c6050,version change,junziz,junziz@stanford.edu,junziz,junziz@stanford.edu,2020-04-13 22:50:12-07:00,25200,2020-04-13 22:50:12-07:00,25200,True,False,['README.md'],['16ba6ce330a16dc5123936a93567c3c009b3d40c'],2,2,4,1,,,
d8718290f90778ae3dcf4af1f8fe8174fd8cb643,rerun notebooks apart from paper_plots,junziz,junziz@stanford.edu,junziz,junziz@stanford.edu,2020-04-13 23:48:51-07:00,25200,2020-04-13 23:48:51-07:00,25200,True,False,"['README.md', 'coupled_qp.ipynb', 'l1_trend_filter.ipynb', 'multitask_reg_logistic.ipynb', 'nnls.ipynb', 'optimal_control.ipynb', 'single_commodity_flow.ipynb', 'sparse_inv_cov_est.ipynb']",['80128682404d44b1cac57ed19ad98662c93c6050'],256,274,530,8,,,
735edc2254c52bbc46a64e142db0d49167a315ac,finish running the paper_plots.ipynb,junziz,junziz@stanford.edu,junziz,junziz@stanford.edu,2020-04-14 00:45:37-07:00,25200,2020-04-14 00:45:37-07:00,25200,True,False,"['coupled_qp.pdf', 'l1_trend_filter.pdf', 'multitask_reglog.pdf', 'nnls.pdf', 'nnls_rerun.pdf', 'opt_cont.pdf', 'reg_effect.pdf', 'single_com_flow.pdf', 'sparse_inv_cov_est_large.pdf', 'sparse_inv_cov_est_small.pdf', 'paper_plots.ipynb']",['d8718290f90778ae3dcf4af1f8fe8174fd8cb643'],519,563,1082,11,,,
5290dcbfe0bc7a4a25c57a76f4eb7e7c74599505,fix some printout and version issues,junziz,junziz@stanford.edu,junziz,junziz@stanford.edu,2020-04-14 15:01:23-07:00,25200,2020-04-14 15:01:23-07:00,25200,True,False,"['README.md', 'solver.py', 'coupled_qp.pdf', 'l1_trend_filter.pdf', 'multitask_reglog.pdf', 'nnls.pdf', 'nnls_rerun.pdf', 'opt_cont.pdf', 'reg_effect.pdf', 'single_com_flow.pdf', 'sparse_inv_cov_est_large.pdf', 'sparse_inv_cov_est_small.pdf', 'coupled_qp.ipynb', 'l1_trend_filter.ipynb', 'multitask_reg_logistic.ipynb', 'nnls.ipynb', 'optimal_control.ipynb', 'paper_plots.ipynb', 'single_commodity_flow.ipynb', 'sparse_inv_cov_est.ipynb', 'setup.py']",['735edc2254c52bbc46a64e142db0d49167a315ac'],783,781,1564,21,,,
8f08b4eb2c28e37bb29b0d1c931907274aa397f5,single source the version; edits to readme to reflect pypi,junziz,junziz@stanford.edu,junziz,junziz@stanford.edu,2020-04-15 18:36:55-07:00,25200,2020-04-15 18:36:55-07:00,25200,True,False,"['README.md', '__init__.py', 'solver.py', 'utilities.py', 'setup.py']",['5290dcbfe0bc7a4a25c57a76f4eb7e7c74599505'],6,57,63,5,0.9565217391304348,0.9565217391304348,0.9565217391304348
4e671b507c06bdf3998451859cec4335e7510ace,fix readme,junziz,junziz@stanford.edu,junziz,junziz@stanford.edu,2020-04-15 21:23:35-07:00,25200,2020-04-15 21:23:35-07:00,25200,True,False,"['.gitignore', 'README.md']",['8f08b4eb2c28e37bb29b0d1c931907274aa397f5'],2,4,6,2,,,
0eb60dbbf07c9d73f6679602971f78e0e0ff92d1,improve README and printout formatting; bump to version 0.2.3.post1 for pypi update; rerun experiments,junziz,junziz@stanford.edu,junziz,junziz@stanford.edu,2020-04-16 00:45:23-07:00,25200,2020-04-16 00:45:23-07:00,25200,True,False,"['README.md', '__init__.py', 'solver.py', 'coupled_qp.pdf', 'l1_trend_filter.pdf', 'multitask_reglog.pdf', 'nnls.pdf', 'nnls_rerun.pdf', 'opt_cont.pdf', 'reg_effect.pdf', 'single_com_flow.pdf', 'sparse_inv_cov_est_large.pdf', 'sparse_inv_cov_est_small.pdf', 'coupled_qp.ipynb', 'equil.ipynb', 'l1_trend_filter.ipynb', 'multitask_reg_logistic.ipynb', 'nnls.ipynb', 'optimal_control.ipynb', 'paper_plots.ipynb', 'single_commodity_flow.ipynb', 'sparse_inv_cov_est.ipynb']",['4e671b507c06bdf3998451859cec4335e7510ace'],2209,2215,4424,22,0.0,0.0,0.0
7ef58d8abd37ae9a4256b5aef5fce014a056afe1,increase SCS accuracy to avoid test error,junziz,junziz@stanford.edu,junziz,junziz@stanford.edu,2020-04-16 13:20:52-07:00,25200,2020-04-16 13:20:52-07:00,25200,True,False,['test_proximal.py'],['0eb60dbbf07c9d73f6679602971f78e0e0ff92d1'],21,22,43,1,0.0,1.0,1.0
e6b6b0bb98a093d597c431d6395f9af8fcce5531,fix nosetests failure of neg_log_det and SCS inaccuracies,junziz,junziz@stanford.edu,junziz,junziz@stanford.edu,2020-04-19 17:28:53-07:00,25200,2020-04-19 17:28:53-07:00,25200,True,False,"['composition.py', 'test_proximal.py']",['7ef58d8abd37ae9a4256b5aef5fce014a056afe1'],8,39,47,2,0.6666666666666666,1.0,0.75
3901bed1591ac7a5fc7a917d1dc15464a7e5f686,code cleanup,junziz,junziz@stanford.edu,junziz,junziz@stanford.edu,2020-04-23 22:33:26-07:00,25200,2020-04-23 22:33:26-07:00,25200,True,False,"['composition.py', 'test_proximal.py']",['e6b6b0bb98a093d597c431d6395f9af8fcce5531'],53,50,103,2,0.0,1.0,1.0
dec378f6a98fb8bf020128a0a755d6fe246cbd10,add KL proximal,junziz,junziz@stanford.edu,junziz,junziz@stanford.edu,2020-05-06 03:12:56-07:00,25200,2020-05-06 03:12:56-07:00,25200,True,False,"['__init__.py', 'misc.py', 'test_proximal.py']",['3901bed1591ac7a5fc7a917d1dc15464a7e5f686'],2,43,45,3,1.0,1.0,0.6190476190476191
c9d561b5268d5d11dfce296f3058327849803f6d,"code cleanup, bump to version 0.2.3.post2",junziz,junziz@stanford.edu,junziz,junziz@stanford.edu,2020-05-06 03:21:19-07:00,25200,2020-05-06 03:21:19-07:00,25200,True,False,"['README.md', '__init__.py', 'test_proximal.py']",['dec378f6a98fb8bf020128a0a755d6fe246cbd10'],12,4,16,3,0.0,0.0,0.0
bb6175f3f570bf04da869d58c87f51073a39d177,update proximal documentation; reorganize test proximal; and rerun examples,junziz,junziz@stanford.edu,junziz,junziz@stanford.edu,2020-05-07 00:04:11-07:00,25200,2020-05-07 00:04:11-07:00,25200,True,False,"['README.md', '__init__.py', 'misc.py', 'test_proximal.py', 'coupled_qp.pdf', 'l1_trend_filter.pdf', 'multitask_reglog.pdf', 'nnls.pdf', 'nnls_rerun.pdf', 'opt_cont.pdf', 'reg_effect.pdf', 'single_com_flow.pdf', 'sparse_inv_cov_est_large.pdf', 'sparse_inv_cov_est_small.pdf', 'coupled_qp.ipynb', 'l1_trend_filter.ipynb', 'multitask_reg_logistic.ipynb', 'nnls.ipynb', 'optimal_control.ipynb', 'paper_plots.ipynb', 'single_commodity_flow.ipynb', 'sparse_inv_cov_est.ipynb']",['c9d561b5268d5d11dfce296f3058327849803f6d'],597,608,1205,22,0.8333333333333334,1.0,1.0
1ccc0f1c529256354bca77427fef9ca9e6892bfb,fix np.real issue in prox_kl and prox_neg_entr,junziz,junziz@stanford.edu,junziz,junziz@stanford.edu,2020-05-18 23:02:41-07:00,25200,2020-05-18 23:02:41-07:00,25200,True,False,"['elementwise.py', 'misc.py']",['bb6175f3f570bf04da869d58c87f51073a39d177'],2,2,4,2,,,
29aaa2b9e9bf9f6ace44958388317d846fcb2f33,suppress printing in verbose=False,junziz,junziz@stanford.edu,junziz,junziz@stanford.edu,2020-05-19 00:42:29-07:00,25200,2020-05-19 00:42:29-07:00,25200,True,False,['solver.py'],['1ccc0f1c529256354bca77427fef9ca9e6892bfb'],2,2,4,1,,,
bc537837a5f343d35d9b8b20ec00021223fd40a1,Update README.md,Junzi Zhang,junziz@stanford.edu,GitHub,noreply@github.com,2020-07-21 10:00:25-07:00,25200,2020-07-21 10:00:25-07:00,25200,True,False,['README.md'],['29aaa2b9e9bf9f6ace44958388317d846fcb2f33'],1,1,2,1,,,
310a95fb6e8758588cff9cdedc472c33e008c07a,"Update README.md

add formal publication venue for citation",Junzi Zhang,junziz@stanford.edu,GitHub,noreply@github.com,2020-11-11 07:22:47-08:00,28800,2020-11-11 07:22:47-08:00,28800,True,False,['README.md'],['bc537837a5f343d35d9b8b20ec00021223fd40a1'],2,6,8,1,,,
0f188ff1ea012eb1e6e0486abe4fbc89bb818e42,fix typos in the code; rerun; bump version to 0.2.3.post3,junziz,junziz@stanford.edu,junziz,junziz@stanford.edu,2020-12-07 23:25:03-08:00,28800,2020-12-07 23:25:03-08:00,28800,True,False,"['README.md', '__init__.py', 'solver.py', 'coupled_qp.pdf', 'coupled_qp_rerun.pdf', 'l1_trend_filter.pdf', 'multitask_reglog.pdf', 'nnls.pdf', 'nnls_rerun.pdf', 'opt_cont.pdf', 'reg_effect.pdf', 'single_com_flow.pdf', 'sparse_inv_cov_est_large.pdf', 'sparse_inv_cov_est_small.pdf', 'coupled_qp.ipynb', 'l1_trend_filter.ipynb', 'multitask_reg_logistic.ipynb', 'nnls.ipynb', 'optimal_control.ipynb', 'paper_plots.ipynb', 'single_commodity_flow.ipynb', 'sparse_inv_cov_est.ipynb']",['310a95fb6e8758588cff9cdedc472c33e008c07a'],596,595,1191,22,0.0,0.0,0.0
b101b13c17448f43c5c9bb3ec6bcdf18aca73a66,add some commented out code for additional regularization effect tests,junziz,junziz@stanford.edu,junziz,junziz@stanford.edu,2020-12-10 23:57:41-08:00,28800,2020-12-10 23:57:41-08:00,28800,True,False,"['coupled_qp.py', 'l1_trend_filtering.py', 'multitask_reg_logistic.py', 'optimal_control.py', 'single_commodity_flow.py', 'sparse_inv_cov_est.py']",['0f188ff1ea012eb1e6e0486abe4fbc89bb818e42'],0,24,24,6,,,
