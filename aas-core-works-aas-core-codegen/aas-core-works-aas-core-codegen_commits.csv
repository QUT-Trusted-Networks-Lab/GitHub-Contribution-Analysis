Hash,Commit Message,Author Name,Author Email,Committor Name,Committor Email,Author Date,Author Timezone,Committor Date,Committor Timezone,in_main_branch,merge,modified_files,parents,deletions,insertions,lines,files,dmm_unit_size,dmm_unit_complexity,dmm_unit_interfacing
a680b29e7e4b213ce90087e4882dfc49541912f5,Initial commit,Marko Ristin,marko@ristin.ch,GitHub,noreply@github.com,2021-06-04 17:01:52+02:00,-7200,2021-06-04 17:01:52+02:00,-7200,True,False,"['.gitignore', 'LICENSE']",[],0,150,150,2,,,
34f0112b09d7a7993bff5f965d78698dc75d31b3,"Write initial C# generator (#3)

This is an initial code which provides a C# generator as well as the
working continuous integration pipeline.",Marko Ristin,marko.ristin@gmail.com,GitHub,noreply@github.com,2021-12-27 18:21:54+01:00,-3600,2021-12-27 18:21:54+01:00,-3600,True,False,"['ci.yml', 'publish-to-pypi.yml', 'release-package.yaml', '.gitignore', '.gitignore', 'aas-core-csharp-codegen.iml', 'codeStyleConfig.xml', 'rist.xml', 'Project_Default.xml', 'profiles_settings.xml', 'misc.xml', 'modules.xml', 'vcs.xml', 'LICENSE', 'README.rst', '__init__.py', '__main__.py', 'common.py', '__init__.py', 'common.py', 'description.py', '__init__.py', '_generate.py', 'main.py', 'naming.py', '__init__.py', '_generate.py', '__init__.py', '_generate.py', 'unrolling.py', '__init__.py', '_generate.py', '__init__.py', '_generate.py', '__init__.py', '_hierarchy.py', '_stringify.py', '_translate.py', '_types.py', 'construction.py', 'doc.py', 'pattern_verification.py', 'rendering.py', 'type_inference.py', 'main.py', 'naming.py', '__init__.py', '_rules.py', '_stringify.py', '_translate.py', '_types.py', 'tree.py', 'run.py', 'specific_implementations.py', 'stringify.py', '__init__.py', 'check_help_in_readme.py', 'check_init_and_setup_coincide.py', 'mypy.ini', 'precommit.py', 'pylint.rc', 'diagram.svg', 'requirements.txt', 'setup.py', 'jsonization.cs', 'stdout.txt', 'stringification.cs', 'types.cs', 'verification.cs', 'visitation.cs', 'meta_model.py', 'Lang_string_set_json_converter.cs', 'Lang_string_set.cs', 'Error.cs', 'Errors.cs', 'verify_Lang_string_set.cs', 'visit_Lang_string_set.cs', 'namespace.txt', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_error.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_error.txt', 'meta_model.py', 'expected_error.txt', 'meta_model.py', 'expected_error.txt', 'meta_model.py', 'expected_error.txt', 'meta_model.py', 'expected_error.txt', 'meta_model.py', 'expected_error.txt', 'meta_model.py', 'expected_error.txt', 'meta_model.py', 'expected_error.txt', 'meta_model.py', 'expected_error.txt', 'meta_model.py', 'expected_error.txt', 'meta_model.py', 'expected_error.txt', 'meta_model.py', 'expected_error.txt', 'meta_model.py', 'expected_error.txt', 'meta_model.py', 'expected_error.txt', 'meta_model.py', 'expected_error.txt', 'meta_model.py', 'expected_error.txt', 'meta_model.py', 'expected_error.txt', 'meta_model.py', 'expected_error.txt', 'meta_model.py', 'expected_error.txt', 'meta_model.py', 'expected_error.txt', 'meta_model.py', 'expected_error.txt', 'meta_model.py', 'expected_error.txt', 'meta_model.py', 'expected_error.txt', 'meta_model.py', 'expected_error.txt', 'meta_model.py', 'expected_error.txt', 'meta_model.py', 'expected_error.txt', 'meta_model.py', 'expected_error.txt', 'meta_model.py', 'expected_error.txt', 'meta_model.py', 'expected_error.txt', 'meta_model.py', 'expected_error.txt', 'meta_model.py', 'expected_error.txt', 'meta_model.py', 'expected_error.txt', 'meta_model.py', 'expected_error.txt', 'meta_model.py', 'expected_error.txt', 'meta_model.py', 'expected_error.txt', 'meta_model.py', 'expected_error.txt', 'meta_model.py', 'expected_error.txt', 'meta_model.py', 'expected_error.txt', 'meta_model.py', 'expected_error.txt', 'meta_model.py', 'expected_error.txt', 'meta_model.py', 'expected_error.txt', 'meta_model.py', 'expected_error.txt', 'meta_model.py', 'expected_error.txt', 'meta_model.py', 'expected_error.txt', 'meta_model.py', 'expected_error.txt', 'meta_model.py', 'expected_error.txt', 'meta_model.py', 'expected_error.txt', 'meta_model.py', 'expected_error.txt', 'meta_model.py', 'expected_error.txt', 'meta_model.py', 'expected_error.txt', 'meta_model.py', 'expected_error.txt', 'meta_model.py', '__init__.py', 'common.py', '__init__.py', 'live_test_main.py', 'test_common.py', 'test_description.py', 'test_main.py', 'description.py', '__init__.py', 'test_constructor.py', 'test_hierarchy.py', 'test_translate.py', 'test_parse.py']",['a680b29e7e4b213ce90087e4882dfc49541912f5'],1,77002,77003,279,0.18438213237691556,0.475383110531464,0.5682099771763939
c4daf22ab3ef4c3e10580960417d65972cebaa87,"Fix GitHub workflow CI (#4)

This patch fixes a minor mistake in the script where the jobs were
renamed, but not updated in references appropriately.

Additionally, a couple of minor fixes in the precommit checks are
included as well.",Marko Ristin,marko.ristin@gmail.com,GitHub,noreply@github.com,2021-12-27 18:38:32+01:00,-3600,2021-12-27 18:38:32+01:00,-3600,True,False,"['ci.yml', 'precommit.py']",['34f0112b09d7a7993bff5f965d78698dc75d31b3'],7,18,25,2,0.0,0.0,1.0
858568d5369baf0b57705876d780635a2d335760,"Add CONTRIBUTING.rst (#5)

This patch includes a document to help new developers join the project.",Marko Ristin,marko.ristin@gmail.com,GitHub,noreply@github.com,2021-12-27 18:50:27+01:00,-3600,2021-12-27 18:50:27+01:00,-3600,True,False,"['CONTRIBUTING.rst', 'README.rst']",['c4daf22ab3ef4c3e10580960417d65972cebaa87'],0,115,115,2,,,
7dc1772dda4ce8996a53d3d8a3aabd5439f2fb26,"Release 0.0.1rc1 (#6)

* The initial release candidate.
  This is actually an alpha release!
  Since the UAG Verwaltungsschale still needs to decide on fundamentals
  of the meta-model (such as basic primitive types) yet, this release
  is only meant for first experimental usage.",Marko Ristin,marko.ristin@gmail.com,GitHub,noreply@github.com,2021-12-27 18:55:55+01:00,-3600,2021-12-27 18:55:55+01:00,-3600,True,False,"['CHANGELOG.rst', 'README.rst']",['858568d5369baf0b57705876d780635a2d335760'],0,11,11,2,,,
961f854acbb64a01a31da864029044128202e36e,"Release 0.0.1rc1.post1 (#7)

* A post release to test the publishing pipeline.",Marko Ristin,marko.ristin@gmail.com,GitHub,noreply@github.com,2021-12-27 19:06:07+01:00,-3600,2021-12-27 19:06:07+01:00,-3600,True,False,"['CHANGELOG.rst', '__init__.py', 'setup.py']",['7dc1772dda4ce8996a53d3d8a3aabd5439f2fb26'],3,15,18,3,,,
eae8bc1756fd9ff2fcfdd3c46e18c38c79b83338,"Make the diagram in Readme clearer (#8)

This patch first fixes the URL in the readme as GitHub changed the
standard location.

Second, we add a cluster in the graph to outline the boundaries of the
aas-core-codegen.",Marko Ristin,marko.ristin@gmail.com,GitHub,noreply@github.com,2021-12-27 19:23:51+01:00,-3600,2021-12-27 19:23:51+01:00,-3600,True,False,"['README.rst', 'diagram.svg']",['961f854acbb64a01a31da864029044128202e36e'],57,70,127,2,,,
2ee15afa6fd851373f971d727681a25b2cf16b41,Fix link to CHANGELOG in Readme (#9),Marko Ristin,marko.ristin@gmail.com,GitHub,noreply@github.com,2021-12-27 19:34:20+01:00,-3600,2021-12-27 19:34:20+01:00,-3600,True,False,['README.rst'],['eae8bc1756fd9ff2fcfdd3c46e18c38c79b83338'],1,1,2,1,,,
17dc5ec5f0c8cbaeaceab5c49d6edda95d538a12,"Re-structure test data to follow the modules (#11)

We rename the subdirectories in `test_data` directory to follow the
modules in the `tests`.",Marko Ristin,marko.ristin@gmail.com,GitHub,noreply@github.com,2022-01-02 12:37:30+01:00,-3600,2022-01-02 12:37:30+01:00,-3600,True,False,"['README.rst', 'jsonization.cs', 'stdout.txt', 'stringification.cs', 'types.cs', 'verification.cs', 'visitation.cs', 'meta_model.py', 'Lang_string_set_json_converter.cs', 'Lang_string_set.cs', 'Error.cs', 'Errors.cs', 'verify_Lang_string_set.cs', 'visit_Lang_string_set.cs', 'namespace.txt', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_error.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_error.txt', 'meta_model.py', 'expected_error.txt', 'meta_model.py', 'expected_error.txt', 'meta_model.py', 'expected_error.txt', 'meta_model.py', 'expected_error.txt', 'meta_model.py', 'expected_error.txt', 'meta_model.py', 'expected_error.txt', 'meta_model.py', 'expected_error.txt', 'meta_model.py', 'expected_error.txt', 'meta_model.py', 'expected_error.txt', 'meta_model.py', 'expected_error.txt', 'meta_model.py', 'expected_error.txt', 'meta_model.py', 'expected_error.txt', 'meta_model.py', 'expected_error.txt', 'meta_model.py', 'expected_error.txt', 'meta_model.py', 'expected_error.txt', 'meta_model.py', 'expected_error.txt', 'meta_model.py', 'expected_error.txt', 'meta_model.py', 'expected_error.txt', 'meta_model.py', 'expected_error.txt', 'meta_model.py', 'expected_error.txt', 'meta_model.py', 'expected_error.txt', 'meta_model.py', 'expected_error.txt', 'meta_model.py', 'expected_error.txt', 'meta_model.py', 'expected_error.txt', 'meta_model.py', 'expected_error.txt', 'meta_model.py', 'expected_error.txt', 'meta_model.py', 'expected_error.txt', 'meta_model.py', 'expected_error.txt', 'meta_model.py', 'expected_error.txt', 'meta_model.py', 'expected_error.txt', 'meta_model.py', 'expected_error.txt', 'meta_model.py', 'expected_error.txt', 'meta_model.py', 'expected_error.txt', 'meta_model.py', 'expected_error.txt', 'meta_model.py', 'expected_error.txt', 'meta_model.py', 'expected_error.txt', 'meta_model.py', 'expected_error.txt', 'meta_model.py', 'expected_error.txt', 'meta_model.py', 'expected_error.txt', 'meta_model.py', 'expected_error.txt', 'meta_model.py', 'expected_error.txt', 'meta_model.py', 'expected_error.txt', 'meta_model.py', 'expected_error.txt', 'meta_model.py', 'expected_error.txt', 'meta_model.py', 'expected_error.txt', 'meta_model.py', 'expected_error.txt', 'meta_model.py', 'expected_error.txt', 'meta_model.py', 'expected_error.txt', 'meta_model.py', 'expected_error.txt', 'meta_model.py', 'expected_error.txt', 'meta_model.py', 'live_test_main.py', 'test_main.py', 'test_translate.py', 'test_parse.py']",['2ee15afa6fd851373f971d727681a25b2cf16b41'],5,5,10,207,,,
16ab6081cdc1cab058c28d2591c1f5c987ce3687,"Add `--version` flag (#12)

This patch adds the `--version` flag to the main program so that we can
track the versions when reporting issues.",Marko Ristin,marko.ristin@gmail.com,GitHub,noreply@github.com,2022-01-14 21:40:40+01:00,-3600,2022-01-14 21:40:40+01:00,-3600,True,False,"['README.rst', 'main.py']",['17dc5ec5f0c8cbaeaceab5c49d6edda95d538a12'],0,13,13,2,0.0,1.0,1.0
d2da1fbe2bb7c8e31c9b9182fc346a8a2e38ab67,"Fix encoding to `utf-8` on file I/O (#14)

This patch fixes the encoding when reading and writing files to UTF-8.
This is necessary so that the test files are not scrambled on Windows.",Marko Ristin,marko.ristin@gmail.com,GitHub,noreply@github.com,2022-01-14 23:24:59+01:00,-3600,2022-01-14 23:24:59+01:00,-3600,True,False,"['main.py', 'types.cs', 'test_main.py']",['16ab6081cdc1cab058c28d2591c1f5c987ce3687'],27,42,69,3,0.0,0.0,1.0
3d604af2d25e7ba30604c813d6fc0a4f12ca5596,"Make `indent_but_first_line` ignore empty lines (#15)

This patch fixes the function `indent_but_first_line` to properly ignore
the empty lines and do not indent them. Only non-empty lines are
indented.",Marko Ristin,marko.ristin@gmail.com,GitHub,noreply@github.com,2022-01-14 23:44:41+01:00,-3600,2022-01-14 23:44:41+01:00,-3600,True,False,"['common.py', 'jsonization.cs']",['d2da1fbe2bb7c8e31c9b9182fc346a8a2e38ab67'],63,71,134,2,0.0,1.0,1.0
ba5eaea42df6b135296d18cea4a69d5cdadfabbb,"Fix second pass to resolve descendants correctly (#16)

There was a bug such that the descendants were actually ignored in the
second pass which should have properly resolved the inheritances.

This patch fixes the bug.",Marko Ristin,marko.ristin@gmail.com,GitHub,noreply@github.com,2022-01-14 23:50:09+01:00,-3600,2022-01-14 23:50:09+01:00,-3600,True,False,"['_generate.py', '_translate.py', 'jsonization.cs', 'expected_symbol_table.txt', 'expected_symbol_table.txt']",['3d604af2d25e7ba30604c813d6fc0a4f12ca5596'],534,5281,5815,5,0.0,0.0,0.0020197486535008975
7de7de7bf7e6795a5f4551bc5fd9acc9e1b4a319,"Ignore primitive types for origins in hierarchy (#17)

The precondition in the hierarchy was wrong when determining the
origins. Namely, the constrained primitives *always* inherit from a
primitive type, but can be still considered as origins of the hierarchy
as long as they do not inherit from other constrained primitives.",Marko Ristin,marko.ristin@gmail.com,GitHub,noreply@github.com,2022-01-14 23:57:23+01:00,-3600,2022-01-14 23:57:23+01:00,-3600,True,False,['_hierarchy.py'],['ba5eaea42df6b135296d18cea4a69d5cdadfabbb'],1,7,8,1,,,
036af13a305155c474dc1a4cde4c9611b0adadbb,"Reverse the invariants (#18)

This patch fixes a bug related to the order of the invariants. Namely,
the invariants are specified as decorators in a top-down order, while we
need to interpret the decorators in the reversed order (bottom-up) as
they decorate the function one by one.",Marko Ristin,marko.ristin@gmail.com,GitHub,noreply@github.com,2022-01-15 00:02:31+01:00,-3600,2022-01-15 00:02:31+01:00,-3600,True,False,['_translate.py'],['7de7de7bf7e6795a5f4551bc5fd9acc9e1b4a319'],0,5,5,1,0.0,0.0,1.0
57746cafdaad3f1ad48ba3c14de0efa67bc8dcbc,"Rename `implemented_for` to `specified_for` (#19)

The properties are ""specified for"" a class. The term ""implemented for""
does not really apply and is confusing. This patch renames the attribute
accordingly.",Marko Ristin,marko.ristin@gmail.com,GitHub,noreply@github.com,2022-01-15 00:08:05+01:00,-3600,2022-01-15 00:08:05+01:00,-3600,True,False,"['_generate.py', '_stringify.py', '_translate.py', '_types.py', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt']",['036af13a305155c474dc1a4cde4c9611b0adadbb'],396,396,792,13,,,
1e53bf6823f7a61001b35c1fc60086dd56812813,"Note the origin of the invariants (#20)

After this patch, we note down which classes and constrained
primitives the invariants are specified for. This allows us to consider
only the invariants specified for a particular class and ignore the
invariants inherited from the ancestors.

This will be useful when we generate schemas since invariants in the
schemas are inherited, unlike, say, C# code.",Marko Ristin,marko.ristin@gmail.com,GitHub,noreply@github.com,2022-01-15 00:18:22+01:00,-3600,2022-01-15 00:18:22+01:00,-3600,True,False,"['_stringify.py', '_translate.py', '_types.py', 'expected_symbol_table.txt']",['57746cafdaad3f1ad48ba3c14de0efa67bc8dcbc'],2,70,72,4,0.0,0.29411764705882354,0.8529411764705882
a8157245dba3964425e2a0415e62e695c4f8243e,"Improve errors on unmatched verification functions (#21)

In this patch we improve the error messages reported when a
non-implementation-specific verification function could not be matched.
This is necessary so that the user can have a more fine-grained cause
why the matching failed.

Simply reporting that the function could not be matched did not work at
all.",Marko Ristin,marko.ristin@gmail.com,GitHub,noreply@github.com,2022-01-15 00:25:32+01:00,-3600,2022-01-15 00:25:32+01:00,-3600,True,False,"['_translate.py', 'pattern_verification.py']",['1e53bf6823f7a61001b35c1fc60086dd56812813'],44,92,136,2,0.0,0.0,1.0
360c9b14d2b25cb1b8c65ef3efc794883f345e7a,"Provide generator for JSON schema (#13)

This is a major change which introduces inferrence of constraints based
on the meta-model which can also be represented in a JSON schema (and in
other similiar schemas such as XSD).",Marko Ristin,marko.ristin@gmail.com,GitHub,noreply@github.com,2022-01-15 00:28:47+01:00,-3600,2022-01-15 00:28:47+01:00,-3600,True,False,"['README.rst', '__init__.py', '_common.py', '_len.py', '_pattern.py', '_stringify.py', '__init__.py', '_translate.py', '_types.py', 'pattern_verification.py', '__init__.py', 'main.py', 'main.py', 'schema.json', 'stdout.txt', 'meta_model.py', 'Lang_string_set.json', 'schema_base.json', 'common.py', '__init__.py', 'test_len_on_properties.py', 'test_len_on_self.py', 'test_patterns_on_properties.py', 'test_patterns_on_self.py', '__init__.py', 'test_main.py', 'test_parse.py']",['a8157245dba3964425e2a0415e62e695c4f8243e'],74,7590,7664,27,0.1108482595471443,0.7573504562352146,0.7096992227103751
731f706e2d12bf80722ac55d920fcf5402fb26ef,"Release 0.0.2 (#22)

* Provide generator for JSON schema (#13)
* Improve errors on unmatched verification functions (#21)
* Note the origin of the invariants (#20)
* Rename ``implemented_for`` to ``specified_for`` (#19)
* Reverse the invariants (#18)
* Ignore primitive types for origins in hierarchy (#17)
* Fix second pass to resolve descendants correctly (#16)
* Make ``indent_but_first_line`` ignore empty lines (#15)
* Fix encoding to ``utf-8`` on file I/O (#14)
* Add ``--version`` flag (#12)",Marko Ristin,marko.ristin@gmail.com,GitHub,noreply@github.com,2022-01-15 00:36:42+01:00,-3600,2022-01-15 00:36:42+01:00,-3600,True,False,"['CHANGELOG.rst', '__init__.py', 'setup.py']",['360c9b14d2b25cb1b8c65ef3efc794883f345e7a'],2,16,18,3,,,
9b59f766fa934c9c6e43f32473d4750150f7f57b,"Revert lost `--version` command flag (#23)

This patch reverts unintentional changes in the commit
360c9b14d2b25cb1b8c65ef3efc794883f345e7a. We cherry-picked from the
development branch and omitted to include the logic for `--version` in
the pull request.",Marko Ristin,marko.ristin@gmail.com,GitHub,noreply@github.com,2022-01-22 07:30:58+01:00,-3600,2022-01-22 07:30:58+01:00,-3600,True,False,"['README.rst', 'main.py']",['731f706e2d12bf80722ac55d920fcf5402fb26ef'],1,13,14,2,0.0,1.0,1.0
40dadafcafd41da0672bfdf49758202b75ad01f2,"Report underlying messages in unit tests (#24)

Previously, in case of errrors in unit tests, we reported a string
representation of the error. This is unreadable and slows down the
debugging. In this patch, we report the most underlying errors formatted
as a string.",Marko Ristin,marko.ristin@gmail.com,GitHub,noreply@github.com,2022-01-22 07:45:34+01:00,-3600,2022-01-22 07:45:34+01:00,-3600,True,False,"['test_description.py', 'test_constructor.py', 'test_hierarchy.py', 'test_translate.py', 'test_parse.py']",['9b59f766fa934c9c6e43f32473d4750150f7f57b'],17,17,34,5,,,
5d57218b6ea43cbb756f7720897f28268d1de44c,"Remove `ExpressionWithDeclarations` from our tree (#25)

Since we do not have a clear use case yet for
`ExpressionWithDeclarations` (and consequently for `Declaration`), we
remove these two classes from *our* internal abstract syntax tree.

Additionally, there were breaking changes between Python 3.8 and 3.9
which have repercussions on parsing indices (and hence how we get to
`ExpressionWithDeclarations`). At this moment, we decide not to support
the concept and avoid the additional implementation complexity.

Once and if we have a clear use case, we will add these two classes
back into the parse tree.",Marko Ristin,marko.ristin@gmail.com,GitHub,noreply@github.com,2022-01-22 08:22:38+01:00,-3600,2022-01-22 08:22:38+01:00,-3600,True,False,"['_generate.py', '_rules.py', 'tree.py']",['40dadafcafd41da0672bfdf49758202b75ad01f2'],189,0,189,3,0.17777777777777778,0.2518518518518518,0.1259259259259259
143fbcf6d5f1f8bb4b9ac9d763f1aa18c1bd3e22,"Add support for Python 3.9 (#26)

Previously, we only supported Python 3.8. Since there were breaking
changes in the `ast` module of Python 3.9, we have to switch on the
Python version and adapt the parsing accordingly.",Marko Ristin,marko.ristin@gmail.com,GitHub,noreply@github.com,2022-01-22 08:55:39+01:00,-3600,2022-01-22 08:55:39+01:00,-3600,True,False,"['ci.yml', '.gitignore', 'aas-core-csharp-codegen.iml', '_translate.py', 'setup.py', 'test_parse.py']",['5d57218b6ea43cbb756f7720897f28268d1de44c'],136,216,352,6,0.4186046511627907,0.4186046511627907,1.0
8ee217f5b85f1a758cdecbc365861bf17d46cf73,"Add support for Python 3.10 (#27)

This patch comprises minor fixes necessary to support Python 3.10.
Notably, we only had to make changes in the continuous integration.",Marko Ristin,marko.ristin@gmail.com,GitHub,noreply@github.com,2022-01-22 09:16:54+01:00,-3600,2022-01-22 09:16:54+01:00,-3600,True,False,"['ci.yml', '.gitignore', 'aas-core-csharp-codegen.iml', 'misc.xml', 'precommit.py', 'setup.py', 'test_parse.py']",['143fbcf6d5f1f8bb4b9ac9d763f1aa18c1bd3e22'],21,51,72,7,0.5,0.5,1.0
df623f47261347bc566859f3afc2cdea984f9569,"Release 0.0.3 (#28)

* Add support for Python 3.10 (#27)
* Add support for Python 3.9 (#26)
* Remove ``ExpressionWithDeclarations`` from our tree (#25)
* Revert lost `--version` command flag (#23)",Marko Ristin,marko.ristin@gmail.com,GitHub,noreply@github.com,2022-01-22 09:26:44+01:00,-3600,2022-01-22 09:26:44+01:00,-3600,True,False,"['CHANGELOG.rst', '__init__.py', 'setup.py']",['8ee217f5b85f1a758cdecbc365861bf17d46cf73'],2,10,12,3,,,
6ad2d92a7f2f452bc2347980d07b16d4302c6060,"Allow enumeration literals to be arbitrary strings (#31)

The string representation (""values"") of the enumeration literals has
been currently tied to an ``Identifier``. Actually there is no
reason to restrict the literal values to identifiers, and arbitrary
strings are also valid.

With this patch we lift that restriction.",Marko Ristin,marko.ristin@gmail.com,GitHub,noreply@github.com,2022-02-04 17:03:38+01:00,-3600,2022-02-04 17:03:38+01:00,-3600,True,False,"['aas-core-csharp-codegen.iml', 'misc.xml', '_types.py', '_translate.py', '_types.py', 'expected_symbol_table.txt', 'meta_model.py', 'test_translate.py']",['df623f47261347bc566859f3afc2cdea984f9569'],8,9,17,8,,,
7dbc3ce485a4aa2dfbbe0de1a69ec43ef778ab3a,"Upgrade black to 22.1.0 (#33)

This patch upgrade the black to the latest version since we faced
various black-related bugs. We hope that the new version will be able to
fix them.",Marko Ristin,marko.ristin@gmail.com,GitHub,noreply@github.com,2022-02-04 17:49:14+01:00,-3600,2022-02-04 17:49:14+01:00,-3600,True,False,"['precommit.py', 'setup.py']",['6ad2d92a7f2f452bc2347980d07b16d4302c6060'],2,2,4,2,,,
fe154135fb1723f0344a5ecc1652131699367a5b,"Avoid exceptions in precommit steps (#34)

The terminal output is littered with the uninformative stack trace
when a command call in the ``precommit.py`` fails.

This patch wraps each command call such that we report a more succinct
message, and thus make running precommit checks in the IDE a bit more
user-friendly.",Marko Ristin,marko.ristin@gmail.com,GitHub,noreply@github.com,2022-02-04 17:56:34+01:00,-3600,2022-02-04 17:56:34+01:00,-3600,True,False,['precommit.py'],['7dbc3ce485a4aa2dfbbe0de1a69ec43ef778ab3a'],42,110,152,1,0.0,0.2535211267605634,0.7464788732394366
9d74404bd769fcc610a273513c02d740ca650739,"Include test and CI code in pylint precommit check (#35)

We excluded the test and continuous integration code from pylint checks
since we did not really care about most of the rules. However, if
there is a ``TODO`` in the tests, there is no check to actually detect
it. There were already multiple cases where we checked in ``TODO`` code
inadvertently.

Therefore we add the test code in pylint check in this patch.

This patch also includes all the fixes which were necessary to make
pylint happy.",Marko Ristin,marko.ristin@gmail.com,GitHub,noreply@github.com,2022-02-04 18:18:10+01:00,-3600,2022-02-04 18:18:10+01:00,-3600,True,False,"['check_help_in_readme.py', 'check_init_and_setup_coincide.py', 'precommit.py', 'common.py', 'live_test_main.py', 'test_common.py', 'test_description.py', 'test_main.py', 'test_len_on_properties.py', 'test_len_on_self.py', 'test_patterns_on_properties.py', 'test_patterns_on_self.py', 'test_constructor.py', 'test_hierarchy.py', 'test_translate.py', 'test_main.py', 'test_parse.py']",['fe154135fb1723f0344a5ecc1652131699367a5b'],168,212,380,17,0.0,0.5,1.0
d6e5a1fd9163f6e26435f20c6df42a790248bbfd,"Infer type of enumeration literals in invariants (#32)

Currently, we do not consider the broader scope of an environment and
miss to de-reference enumerations and, consequently, enumeration
literals. This patch:
* encapsulates the logic for populating the global scope into
  an environment,
* encapsulates the logic for inferring the types of the node tree of an
  invariant, and
* tests this in isolation.",Marko Ristin,marko.ristin@gmail.com,GitHub,noreply@github.com,2022-02-04 19:11:22+01:00,-3600,2022-02-04 19:11:22+01:00,-3600,True,False,"['_generate.py', '_types.py', 'type_inference.py', 'test_type_inference.py']",['9d74404bd769fcc610a273513c02d740ca650739'],65,355,420,4,0.2512820512820513,0.7846153846153846,0.14871794871794872
911b3132ff01473c41389335ed50f442a8e89ae8,"Fix double curly brackets in C# verification (#36)

There was a minor bug where double curly brackets were written in a code
block, but the string literal has not been interpolated.

The bug went unnoticed since we did not re-run live test on C#.",Marko Ristin,marko.ristin@gmail.com,GitHub,noreply@github.com,2022-02-09 10:11:03+01:00,-3600,2022-02-09 10:11:03+01:00,-3600,True,False,"['_generate.py', 'verification.cs']",['d6e5a1fd9163f6e26435f20c6df42a790248bbfd'],2,2,4,2,,,
192b8d6c5739976b615f7f6815ce646b0ec6e8d1,"Make jsonization in C# two-pass (#37)

The current meta-model does not allow for one-pass deserialization, so
we have to revert to two-pass deserialization.",Marko Ristin,marko.ristin@gmail.com,GitHub,noreply@github.com,2022-02-09 10:14:57+01:00,-3600,2022-02-09 10:14:57+01:00,-3600,True,False,"['_generate.py', '__init__.py', '_types.py', 'jsonization.cs', 'live_test_main.py']",['911b3132ff01473c41389335ed50f442a8e89ae8'],4908,2343,7251,5,0.9971648440664237,1.0,0.9218307006885379
8e51e2342a2bfafe8131a99a924c9f3fd50bc88c,"Remove `RefTypeAnnotation` from the IR (#39)

This patch removes the `RefTypeAnnotation` from the intermediate
representation. Since RDF+SHACL schemas do not point to the underlying
referenced type, but to the class `Reference`, we do not need to resolve
the referenced type anymore.

In the future, we consider using an approach based on genericity.",Marko Ristin,marko.ristin@gmail.com,GitHub,noreply@github.com,2022-02-09 15:34:53+01:00,-3600,2022-02-09 15:34:53+01:00,-3600,True,False,"['common.py', '_generate.py', '_generate.py', 'unrolling.py', '_generate.py', '__init__.py', '_stringify.py', '_translate.py', '_types.py', 'type_inference.py', 'main.py', '_stringify.py', '_translate.py', '_types.py', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'meta_model.py', 'schema.json', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'meta_model.py', 'meta_model.py', 'meta_model.py', 'meta_model.py', 'meta_model.py', 'meta_model.py', 'meta_model.py', 'meta_model.py', 'meta_model.py', 'meta_model.py', 'meta_model.py', 'meta_model.py', 'meta_model.py', 'meta_model.py', 'meta_model.py', 'meta_model.py', 'meta_model.py', 'meta_model.py', 'meta_model.py', 'meta_model.py', 'meta_model.py', 'meta_model.py', 'meta_model.py', 'meta_model.py', 'meta_model.py', 'meta_model.py', 'meta_model.py', 'meta_model.py', 'meta_model.py', 'meta_model.py', 'meta_model.py', 'meta_model.py', 'meta_model.py', 'meta_model.py', 'meta_model.py', 'meta_model.py', 'meta_model.py', 'meta_model.py', 'meta_model.py', 'meta_model.py', 'meta_model.py', 'meta_model.py', 'meta_model.py', 'meta_model.py', 'meta_model.py', 'meta_model.py', 'meta_model.py', 'meta_model.py', 'meta_model.py', 'meta_model.py', 'meta_model.py', 'test_description.py', 'test_len_on_properties.py', 'test_len_on_self.py', 'test_patterns_on_properties.py', 'test_patterns_on_self.py', 'test_constructor.py', 'test_hierarchy.py', 'test_translate.py', 'test_type_inference.py', 'test_parse.py']",['192b8d6c5739976b615f7f6815ce646b0ec6e8d1'],3173,809,3982,163,1.0,0.4534746760895171,0.5594817432273262
e908f4ccaab5042a05536326d6f4eef0ef0ade85,"Add V3RC01 in test data for JSON schema (#40)

Currently, we only used version V3RC02 of the meta-model for testing the
generation of JSON schema. With this patch, we add V3RC01 to the test
suite as well.",Marko Ristin,marko.ristin@gmail.com,GitHub,noreply@github.com,2022-02-09 15:41:53+01:00,-3600,2022-02-09 15:41:53+01:00,-3600,True,False,"['schema.json', 'stdout.txt', 'meta_model.py', 'Lang_string_set.json', 'schema_base.json']",['8e51e2342a2bfafe8131a99a924c9f3fd50bc88c'],0,4776,4776,5,0.18932527693857,1.0,0.1691842900302115
51ea33e727aa6437ca3483b2c6a86e4f78a6ab35,"Add `ValueDataType` in JSON schema test for V3RC01 (#41)

This patch introduces the `ValueDataType` into the test case of JSON
Schema based on the meta-model version V3RC01.",Marko Ristin,marko.ristin@gmail.com,GitHub,noreply@github.com,2022-02-09 23:11:58+01:00,-3600,2022-02-09 23:11:58+01:00,-3600,True,False,"['schema.json', 'meta_model.py', 'Value_data_type.json']",['e908f4ccaab5042a05536326d6f4eef0ef0ade85'],23,43,66,3,1.0,1.0,1.0
ad4840dcbd60635ddc20c7dc15fc2b65295d8d5f,"Upgrade docutils to 0.18.1 (#43)

We have to lift the minimum docutils version to 0.18.1 since we use some
of its novel features (*e.g.*, `findall`) which are not available in the
current docutils version 0.17.1.

The problem went unnoticed since we always installed the newest version
locally, and became only apparent when the lowest version has been
installed.

Fixes #42.",Marko Ristin,marko.ristin@gmail.com,GitHub,noreply@github.com,2022-02-11 13:56:01+01:00,-3600,2022-02-11 13:56:01+01:00,-3600,True,False,['requirements.txt'],['51ea33e727aa6437ca3483b2c6a86e4f78a6ab35'],1,1,2,1,,,
e253e032871c8307d8ecc5a560f8f6999b8f1b55,"Fix outdated comment in C# generator (#44)

There was a spot where we forgot to erase the reference to
`RefAnnotationType` which was removed from the intermediate
representation in #39.",Marko Ristin,marko.ristin@gmail.com,GitHub,noreply@github.com,2022-02-11 21:24:34+01:00,-3600,2022-02-11 21:24:34+01:00,-3600,True,False,['_generate.py'],['ad4840dcbd60635ddc20c7dc15fc2b65295d8d5f'],7,1,8,1,1.0,0.0,1.0
9cdbfe6f73ef8b6ae4cb0631b5cfdd2ee091e535,"Introduce topolically sorted symbols in the table (#45)

We sort the symbols which support inheritance (such as classes and
constrained primitives) topologically by the inheritance relationships.
This will allow us to process the data from the ancestors to the
descendants where we can always guarantee that the ancestors have been
processed first.",Marko Ristin,marko.ristin@gmail.com,GitHub,noreply@github.com,2022-02-11 21:42:10+01:00,-3600,2022-02-11 21:42:10+01:00,-3600,True,False,"['common.py', '__init__.py', '_stringify.py', '_translate.py', '_types.py', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt']",['e253e032871c8307d8ecc5a560f8f6999b8f1b55'],0,212,212,20,0.0,0.10714285714285714,1.0
dcbb607f8a1b711574a4a45839077957e46ef9cb,"Generte RDF and SHACL schemas (#46)

We add a generator for RDF+SHACL schemas and test it based on V3RC01.",Marko Ristin,marko.ristin@gmail.com,GitHub,noreply@github.com,2022-02-11 22:22:41+01:00,-3600,2022-02-11 22:22:41+01:00,-3600,True,False,"['README.rst', '_len.py', 'main.py', '__init__.py', '_description.py', 'common.py', 'main.py', 'naming.py', 'rdf.py', 'shacl.py', 'rdf-ontology.ttl', 'shacl-schema.ttl', 'stdout.txt', 'meta_model.py', 'as_rdfs_range.ttl', 'owl_class.ttl', 'preamble.ttl', 'shape.ttl', 'preamble.ttl', 'url_prefix.txt', '__init__.py', 'test_common.py', 'test_description.py', 'test_main.py']",['9cdbfe6f73ef8b6ae4cb0631b5cfdd2ee091e535'],2,10412,10414,24,0.19086251067463705,0.6319385140905209,0.40606319385140904
6a00c21fcf2c8cd4f14c05fcadb8ea992ade538e,"Remove `Value_data_type` from JSONSchema tests (#47)

We currently do not handle `ValueDataType` as a special type, but
consider it simply a string.

With this patch, we remove `Value_data_type` from the tests for JSON
schema and equalize the meta-models for RDF and JSON Schema tests.",Marko Ristin,marko.ristin@gmail.com,GitHub,noreply@github.com,2022-02-16 11:45:46+01:00,-3600,2022-02-16 11:45:46+01:00,-3600,True,False,"['schema.json', 'meta_model.py', 'Value_data_type.json']",['dcbb607f8a1b711574a4a45839077957e46ef9cb'],35,24,59,3,,,
b99d73762a1385c3c94a65c8db11e5e8f7699e2c,"Fix RDF schema generation with Chang (#48)

This patch includes various minor fixes we discovered were necessary in
order to match the current RDF schema on
github.com/admin-shell-io/aas-specs.

The differences were inspected together with @changqin26.",Marko Ristin,marko.ristin@gmail.com,GitHub,noreply@github.com,2022-02-16 14:31:18+01:00,-3600,2022-02-16 14:31:18+01:00,-3600,True,False,"['common.py', 'naming.py', 'rdf.py', 'rdf-ontology.ttl', 'shacl-schema.ttl', 'preamble.ttl', 'test_common.py']",['6a00c21fcf2c8cd4f14c05fcadb8ea992ade538e'],2033,1805,3838,7,0.0,0.0,0.0
ece0e9271104217d7ae16e44b507e1388f426d6a,"Approximate RDF to aas-specs (#49)

This is a further iteration on approximation to the RDF specs in
github.com/admin-shell-io/aas-specs.

Additionally, we updated V3RC01 meta-model for JSON Schema as well since
we spotted a couple of inconsistencies with the book.",Marko Ristin,marko.ristin@gmail.com,GitHub,noreply@github.com,2022-02-16 18:31:32+01:00,-3600,2022-02-16 18:31:32+01:00,-3600,True,False,"['naming.py', 'rdf.py', 'schema.json', 'meta_model.py', 'rdf-ontology.ttl', 'meta_model.py']",['b99d73762a1385c3c94a65c8db11e5e8f7699e2c'],630,630,1260,6,,,
1f30cc0bb7f5d9742d4840ae14967dd4157b784f,"Fix minor errors in test data for V3RC01 (#50)

This patch comprises minor fixes that were discovered while diff'ing
against the official RDF schema.",Marko Ristin,marko.ristin@gmail.com,GitHub,noreply@github.com,2022-02-16 18:53:16+01:00,-3600,2022-02-16 18:53:16+01:00,-3600,True,False,"['schema.json', 'meta_model.py', 'rdf-ontology.ttl', 'shacl-schema.ttl', 'meta_model.py', 'test_main.py']",['ece0e9271104217d7ae16e44b507e1388f426d6a'],13,13,26,6,,,
995bf50681302fe6b93d0ad1664bcea3d1261810,"Release 0.0.4 (#51)

* Approximate RDF to aas-specs (#49)
* Fix RDF schema generation (#48)
* Generte RDF and SHACL schemas (#46)
* Introduce topologically sorted symbols in the table (#45)
* Upgrade docutils to 0.18.1 (#43)
* Remove `RefTypeAnnotation` from the IR (#39)
* Make jsonization in C# two-pass (#37)
* Fix double curly brackets in C# verification (#36)
* Infer type of enumeration literals in invariants (#32)
* Allow enumeration literals to be arbitrary strings (#31)",Marko Ristin,marko.ristin@gmail.com,GitHub,noreply@github.com,2022-02-17 05:03:16+01:00,-3600,2022-02-17 05:03:16+01:00,-3600,True,False,"['CHANGELOG.rst', '__init__.py', 'setup.py']",['1f30cc0bb7f5d9742d4840ae14967dd4157b784f'],2,16,18,3,,,
ceadbe3a86a1587698d86649b8adcbbf33cd7473,"Sync with aas-core-meta (#52)

This patch propagates back the latest meta-models from aas-core-meta to
the testing data.",Marko Ristin,marko.ristin@gmail.com,GitHub,noreply@github.com,2022-02-17 05:45:41+01:00,-3600,2022-02-17 05:45:41+01:00,-3600,True,False,"['jsonization.cs', 'types.cs', 'verification.cs', 'meta_model.py', 'meta_model.py', 'meta_model.py']",['995bf50681302fe6b93d0ad1664bcea3d1261810'],1262,1256,2518,6,1.0,0.0,0.2727272727272727
6bafd78a6201972f1860726708d61052bf7215c7,"Approximate naming and `allOf` to aas-specs JSON (#53)

We always introduced an `allOf` even though there is a single
definition. With this patch, we check for the number of possible
definitions and, if there is only one, write the properties directly in
the definition.

Additionally, we fix the naming to coincide more with the official JSON
schema in the http://github.com/admin-shell-io/aas-specs.",Marko Ristin,marko.ristin@gmail.com,GitHub,noreply@github.com,2022-02-17 06:21:52+01:00,-3600,2022-02-17 06:21:52+01:00,-3600,True,False,"['main.py', 'naming.py', 'jsonization.cs', 'schema.json', 'schema.json', 'test_main.py']",['ceadbe3a86a1587698d86649b8adcbbf33cd7473'],685,525,1210,6,0.0,0.375,1.0
690554cd72ddba376df81ee6f9da7da88fd38fbe,"Remove redundant `type` property in JSON schema (#54)

Currently we always include the `type` property even though a definition
""inherits"" from another definition through `allOf`.

With this patch, the `type` property is only defined if there are no
ancestor definitions.",Marko Ristin,marko.ristin@gmail.com,GitHub,noreply@github.com,2022-02-17 06:47:01+01:00,-3600,2022-02-17 06:47:01+01:00,-3600,True,False,"['main.py', 'schema.json', 'schema.json']",['6bafd78a6201972f1860726708d61052bf7215c7'],58,5,63,3,0.0,0.0,1.0
a8edd064079c6512950d565c82841d169d160e7c,"Add `modelType` in JSON schema (#55)

We add the discrimantor property `modelType`, conforming to the official
specs in admin-shell-io aas-specs repository.",Marko Ristin,marko.ristin@gmail.com,GitHub,noreply@github.com,2022-02-17 07:07:39+01:00,-3600,2022-02-17 07:07:39+01:00,-3600,True,False,"['main.py', 'schema.json', 'meta_model.py', 'schema.json']",['690554cd72ddba376df81ee6f9da7da88fd38fbe'],9,177,186,4,0.0,0.0,1.0
203db4036296a717f94365335a900fd435e45acc,"Use `oneOf` instead of `anyOf` in JSON schema (#56)

The qualifier `anyOf` is too restrictive for abstract classes since we
want to reject overlapping properties.",Marko Ristin,marko.ristin@gmail.com,GitHub,noreply@github.com,2022-02-17 07:25:26+01:00,-3600,2022-02-17 07:25:26+01:00,-3600,True,False,"['main.py', 'schema.json', 'schema.json']",['a8edd064079c6512950d565c82841d169d160e7c'],10,10,20,3,,,
7426c2fc8f14ea7fa06dcd5f08a010fe3a165cf1,"Fix naming for set of symbols used in properties (#57)

We erroneously called the function
`collect_ids_of_classes_in_properties`, while we actually collected the
IDs of the symbols.",Marko Ristin,marko.ristin@gmail.com,GitHub,noreply@github.com,2022-02-17 07:39:57+01:00,-3600,2022-02-17 07:39:57+01:00,-3600,True,False,"['__init__.py', '_translate.py', '_types.py', 'main.py']",['203db4036296a717f94365335a900fd435e45acc'],7,7,14,4,,,
7f225f6fe0abc29c8202d07a6fe71c4240d51fe5,"Skip unused symbols in JSON schema (#58)

With this patch, we omit to generate the code for all the symbols which
are not used in any of the properties of any of the classes.",Marko Ristin,marko.ristin@gmail.com,GitHub,noreply@github.com,2022-02-17 07:46:21+01:00,-3600,2022-02-17 07:46:21+01:00,-3600,True,False,"['main.py', 'schema.json', 'schema.json']",['7426c2fc8f14ea7fa06dcd5f08a010fe3a165cf1'],149,8,157,3,0.0,0.0,1.0
e22ae62cec6ad9b44a2d593d9f1a0674f63854b2,"Fix test data after diffing aas-specs JSON schema (#59)

These are minor fixes after comparing against the JSON schema in
http://github.com/admin-shell-io/aas-specs.",Marko Ristin,marko.ristin@gmail.com,GitHub,noreply@github.com,2022-02-17 08:25:00+01:00,-3600,2022-02-17 08:25:00+01:00,-3600,True,False,"['schema.json', 'meta_model.py', 'rdf-ontology.ttl', 'shacl-schema.ttl', 'meta_model.py']",['7f225f6fe0abc29c8202d07a6fe71c4240d51fe5'],33,12,45,5,,,
296dadab7d4ed3035462c99a459f9c09068faf6f,"Remove `ID` from abbreviations in `naming` (#60)

In the book, all the identifiers are abbreviated as ""Id"" instead of
""ID"". This patch makes the code generation consistent with the book.",Marko Ristin,marko.ristin@gmail.com,GitHub,noreply@github.com,2022-02-17 14:27:42+01:00,-3600,2022-02-17 14:27:42+01:00,-3600,True,False,"['naming.py', 'rdf-ontology.ttl']",['e22ae62cec6ad9b44a2d593d9f1a0674f63854b2'],21,21,42,2,,,
0835eab3767b257dea9956f84e8e10d9e06bc8d1,"Update test data for V3RC01 after RDF review (#61)

This is a batch of changes in the meta-model after reviewing official
RDF specs for V3RC01.",Marko Ristin,marko.ristin@gmail.com,GitHub,noreply@github.com,2022-02-17 14:37:30+01:00,-3600,2022-02-17 14:37:30+01:00,-3600,True,False,"['schema.json', 'meta_model.py', 'rdf-ontology.ttl', 'shacl-schema.ttl', 'meta_model.py']",['296dadab7d4ed3035462c99a459f9c09068faf6f'],96,93,189,5,,,
0f03be7810c01227576426b9057ba18a78f97b5a,"Update RDF gen after review of V3RC01 (#62)

This is a batch of minor changes to fix discrepancies detected while
reviewing the official RDF schema for V3RC01.",Marko Ristin,marko.ristin@gmail.com,GitHub,noreply@github.com,2022-02-17 14:41:07+01:00,-3600,2022-02-17 14:41:07+01:00,-3600,True,False,"['naming.py', 'rdf.py', 'rdf-ontology.ttl', 'shacl-schema.ttl']",['0835eab3767b257dea9956f84e8e10d9e06bc8d1'],545,551,1096,4,0.0,0.5,0.5
5b89ea2ee35aecaca9a1bed7ac81d420cc560f29,"Fix once more test data for V3RC01 (#63)

This is yet another batch of fixes for V3RC01 test data after reviewing
official JSON schema.",Marko Ristin,marko.ristin@gmail.com,GitHub,noreply@github.com,2022-02-17 15:35:07+01:00,-3600,2022-02-17 15:35:07+01:00,-3600,True,False,"['schema.json', 'meta_model.py', 'Lang_string_set.json', 'schema_base.json', 'rdf-ontology.ttl', 'shacl-schema.ttl', 'meta_model.py']",['0f03be7810c01227576426b9057ba18a78f97b5a'],158,145,303,7,,,
af388687d88caf4c0e39b52c7d8ec9ca900b479d,"Update snippets in RDF for V3RC01 (#64)

We remove some of the namespaces since we do not use them in the schema.",Marko Ristin,marko.ristin@gmail.com,GitHub,noreply@github.com,2022-02-18 15:24:47+01:00,-3600,2022-02-18 15:24:47+01:00,-3600,True,False,"['rdf-ontology.ttl', 'preamble.ttl']",['5b89ea2ee35aecaca9a1bed7ac81d420cc560f29'],4,0,4,2,,,
90dfc2c0516781d555a4ec546267753789c3b79b,"Adapt RDF enums to match the official schema (#65)

We change the order of `rdfs:comment` and `rdfs:label` as well as remove
subclassing in the enumerations in order to match the official RDF
schema.",Marko Ristin,marko.ristin@gmail.com,GitHub,noreply@github.com,2022-02-18 15:27:46+01:00,-3600,2022-02-18 15:27:46+01:00,-3600,True,False,"['rdf.py', 'rdf-ontology.ttl']",['af388687d88caf4c0e39b52c7d8ec9ca900b479d'],71,62,133,2,1.0,1.0,0.0
d1a3c688d84caa13a99d977164f86085a1edab4b,"Update test data for V3RC01 after JSON review (#66)

We change `values` to `value` in `SubmodelElementCollection`. See [this
comment].

[this comment]: https://github.com/admin-shell-io/aas-specs/pull/98#discussion_r809116327",Marko Ristin,marko.ristin@gmail.com,GitHub,noreply@github.com,2022-02-18 15:33:33+01:00,-3600,2022-02-18 15:33:33+01:00,-3600,True,False,"['schema.json', 'meta_model.py', 'rdf-ontology.ttl', 'shacl-schema.ttl', 'meta_model.py']",['90dfc2c0516781d555a4ec546267753789c3b79b'],11,11,22,5,,,
e7230aabc00201a4b4fa3196f7752334b4d60b1b,"Nest constrained primitives in JSON (#67)

The references can not be directly extended in JSON, see [this
StackOverflow answer]. Therefore we nest further constraints in `allOf`.

[this StackOverflow answer]: https://stackoverflow.com/questions/60673675/apply-addtional-constraints-to-a-refered-definition-in-json-schema",Marko Ristin,marko.ristin@gmail.com,GitHub,noreply@github.com,2022-02-18 15:55:28+01:00,-3600,2022-02-18 15:55:28+01:00,-3600,True,False,"['main.py', 'schema.json', 'schema.json']",['d1a3c688d84caa13a99d977164f86085a1edab4b'],20,44,64,3,0.0,0.0,1.0
54a33f52730acbad27eb3d765069faa8d975c54e,"Refactor parsing of decorators for extensibility (#68)

We change the order of parsing functions and introduce a union to
abstract a general class decorators. To make parsing of novel decorators
easier, we additionally introduce a dispatch function so that there is a
single point of entry for class decorators.",Marko Ristin,marko.ristin@gmail.com,GitHub,noreply@github.com,2022-02-27 12:07:01+01:00,-3600,2022-02-27 12:07:01+01:00,-3600,True,False,"['_translate.py', 'expected_error.txt']",['e7230aabc00201a4b4fa3196f7752334b4d60b1b'],271,321,592,2,0.11538461538461539,0.11538461538461539,1.0
6ebd7d9f7ce6f06dcdcdb4b6502248e0faa3eb82,"Parse `reference_in_the_book` (#69)

We want to point the reader of the code directly to the PDF of the
original specs. Therefore we parse the marker `reference_in_the_book`
and include the information in the intermediate representation.",Marko Ristin,marko.ristin@gmail.com,GitHub,noreply@github.com,2022-02-27 17:43:57+01:00,-3600,2022-02-27 17:43:57+01:00,-3600,True,False,"['__init__.py', '_stringify.py', '_translate.py', '_types.py', '__init__.py', '_stringify.py', '_translate.py', '_types.py', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt']",['54a33f52730acbad27eb3d765069faa8d975c54e'],27,1553,1580,57,0.19704433497536947,0.28078817733990147,0.8472906403940886
f922078be2c76567177382af585c23477f8248f5,"Equalize test data for V3RC2 (#70)

Subtle discrepancies sneaked in during the development between different
meta-models for V3RC02. With this patch, we equalize all the meta-models
with aas-core-meta repository.

We expect more of such equalizations in the future as well.",Marko Ristin,marko.ristin@gmail.com,GitHub,noreply@github.com,2022-02-28 19:41:58+01:00,-3600,2022-02-28 19:41:58+01:00,-3600,True,False,"['expected_symbol_table.txt', 'meta_model.py', 'schema.json', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py']",['6ebd7d9f7ce6f06dcdcdb4b6502248e0faa3eb82'],1068,1050,2118,6,1.0,0.0,1.0
b415064b447833fc43bb4dc02f243f12a87c95e7,"Introduce `constraintref` role in the docs (#71)

We introduce a special role, `constraintref`, to indicate references to
constraints. In a future pull request, we will introduce handling of the
constraints as field lists.",Marko Ristin,marko.ristin@gmail.com,GitHub,noreply@github.com,2022-02-28 19:52:29+01:00,-3600,2022-02-28 19:52:29+01:00,-3600,True,False,"['description.py', '_translate.py', 'doc.py', 'rendering.py', '_description.py', 'meta_model.py', 'meta_model.py', 'meta_model.py', 'meta_model.py', 'test_translate.py']",['f922078be2c76567177382af585c23477f8248f5'],28,132,160,10,0.547945205479452,0.9726027397260274,0.6301369863013698
499b7ab87e695df81313978443bb909a969439f7,"Update test data for V3RC01 after SHACL review (#73)

We reviewed the ""official"" SHACL schema for V3RC01 and propagated back
the resolved differences to our test data.",Marko Ristin,marko.ristin@gmail.com,GitHub,noreply@github.com,2022-03-02 19:00:23+01:00,-3600,2022-03-02 19:00:23+01:00,-3600,True,False,"['schema.json', 'meta_model.py', 'rdf-ontology.ttl', 'shacl-schema.ttl', 'meta_model.py']",['b415064b447833fc43bb4dc02f243f12a87c95e7'],109,259,368,5,1.0,1.0,1.0
96b840ba8c3300af1e00ce36582a2caf088edab8,"Propagate postfixes from aas-core-meta (#74)

We synchronize our test data for V3RC01 with aas-core-meta repository
after various fixes were made.",Marko Ristin,marko.ristin@gmail.com,GitHub,noreply@github.com,2022-03-02 19:19:06+01:00,-3600,2022-03-02 19:19:06+01:00,-3600,True,False,"['schema.json', 'meta_model.py', 'shacl-schema.ttl', 'meta_model.py']",['499b7ab87e695df81313978443bb909a969439f7'],2,5,7,4,,,
d29015c118c11f54c478bf353343f798f9228b48,"Check in precommit for identical test meta-models (#75)

We had a couple of glitches where we forgot to keep the test
meta-models in sync. This patch adds a check in the pre-commit script so
that we can automatically ensure that a subset of test meta-models is
in itself identical.",Marko Ristin,marko.ristin@gmail.com,GitHub,noreply@github.com,2022-03-03 07:32:30+01:00,-3600,2022-03-03 07:32:30+01:00,-3600,True,False,['precommit.py'],['96b840ba8c3300af1e00ce36582a2caf088edab8'],0,43,43,1,0.0,0.0,1.0
0880fddf659309901f38b830bf7cdd18b35f1745,"Add `:constraintref:` to all meta-models (#76)

We sync with aas-core-meta and add `:constraintref:` to all test
meta-models to reflect the references to constraints.",Marko Ristin,marko.ristin@gmail.com,GitHub,noreply@github.com,2022-03-03 07:37:25+01:00,-3600,2022-03-03 07:37:25+01:00,-3600,True,False,"['types.cs', 'meta_model.py', 'meta_model.py', 'meta_model.py', 'meta_model.py', 'meta_model.py', 'rdf-ontology.ttl', 'meta_model.py']",['d29015c118c11f54c478bf353343f798f9228b48'],66,66,132,8,,,
45922638661db4ca7a3c3d5c3f1b2b2b3a821900,"In-line constrained primitives in JSON Schema (#77)

Since the JSON schema is going to be also used for OpenAPI 3 schema, we
should not introduce additional definitions. Therefore we in-line the
constraints of constrained primitives in the actual properties of the
objects.

This change also had repercussions on SHACL generation as we in-line
the constrained primitives there as well.",Marko Ristin,marko.ristin@gmail.com,GitHub,noreply@github.com,2022-03-03 10:58:32+01:00,-3600,2022-03-03 10:58:32+01:00,-3600,True,False,"['__init__.py', '_inline.py', '_len.py', '_pattern.py', '__init__.py', '_types.py', 'main.py', 'common.py', 'rdf.py', 'shacl.py', 'schema.json', 'schema.json', 'test_len_on_properties.py', 'test_len_on_self.py', 'test_patterns_on_properties.py', 'test_patterns_on_self.py']",['0880fddf659309901f38b830bf7cdd18b35f1745'],559,677,1236,16,1.0,1.0,0.5982142857142857
6e5b0599daa5ad374b2ae3127770124d96613e34,"Remove `*_abstract` definitions from JSON (#78)

We need to remove the `*_abstract` definitions which specified the
""closed world"" with `oneOf` since the generated JSON schema is also used
for various downstream code generations (*e.g.*, in OpenAPI 3 schemas
and respective server generations).",Marko Ristin,marko.ristin@gmail.com,GitHub,noreply@github.com,2022-03-03 11:05:31+01:00,-3600,2022-03-03 11:05:31+01:00,-3600,True,False,"['main.py', 'schema.json', 'schema.json']",['45922638661db4ca7a3c3d5c3f1b2b2b3a821900'],203,37,240,3,1.0,1.0,0.0
5c527e1b9fe0a9a97facd06e8147c2957e3bce53,"Fix data specifications in V3RC01 (#79)

We propagate back the fixes from aas-core-meta after going over the
book.",Marko Ristin,marko.ristin@gmail.com,GitHub,noreply@github.com,2022-03-03 12:54:48+01:00,-3600,2022-03-03 12:54:48+01:00,-3600,True,False,"['schema.json', 'meta_model.py', 'rdf-ontology.ttl', 'shacl-schema.ttl', 'meta_model.py']",['6e5b0599daa5ad374b2ae3127770124d96613e34'],22,67,89,5,0.0,1.0,0.0
c333ec082df48ceaa01ab8d6ad6e58e52324498f,"Propagate fixes of V3RC01 from aas-core-meta (#80)

This patch is a mere propagation of fixes from aas-core-meta repository.",Marko Ristin,marko.ristin@gmail.com,GitHub,noreply@github.com,2022-03-03 13:10:31+01:00,-3600,2022-03-03 13:10:31+01:00,-3600,True,False,"['schema.json', 'meta_model.py', 'rdf-ontology.ttl', 'shacl-schema.ttl', 'meta_model.py']",['5c527e1b9fe0a9a97facd06e8147c2957e3bce53'],22,22,44,5,,,
f9893ffe6dfd70784367238b12b73bbcd82faf5a,"Approximate to official SHACL for V3RC01 (#81)

This patch includes all the minor changes which were necessary to come
as close as possible to the ""official"" SHACL schema for V3RC01.",Marko Ristin,marko.ristin@gmail.com,GitHub,noreply@github.com,2022-03-03 13:39:41+01:00,-3600,2022-03-03 13:39:41+01:00,-3600,True,False,"['rist.xml', 'rdf.py', 'shacl.py', 'shacl-schema.ttl', 'preamble.ttl']",['c333ec082df48ceaa01ab8d6ad6e58e52324498f'],1878,836,2714,5,0.0,0.0,0.0
994e9d058804b288788bd686e8358b1eb717c99c,"Fix `ModelTypes` enumeration in JSON (#82)

Instead of automatically inferring `modelType` in serialization, which
was error prone and succeptible to changes between meta-model versions,
we use serialization settings to determine the enumeration `ModelTypes`
in JSON schema.",Marko Ristin,marko.ristin@gmail.com,GitHub,noreply@github.com,2022-03-03 14:22:58+01:00,-3600,2022-03-03 14:22:58+01:00,-3600,True,False,"['_translate.py', 'main.py', '_translate.py', 'schema.json', 'schema.json']",['f9893ffe6dfd70784367238b12b73bbcd82faf5a'],24,66,90,5,0.0,0.0,1.0
0f2566a34c63206c98c3d6f9abfbd90bde0fe748,"Add scripts for propagation from aas-core-meta (#83)

We write multiple scripts to facilitate back-propagation of changes from
the aas-core-meta repository to our test data.",Marko Ristin,marko.ristin@gmail.com,GitHub,noreply@github.com,2022-03-03 21:18:11+01:00,-3600,2022-03-03 21:18:11+01:00,-3600,True,False,"['precommit.py', '__init__.py', 'fetch_meta_models_from_aas_core_meta.py', 'run_tests_with_rerecord.py', 'setup.py', 'test_main.py', 'test_translate.py', 'test_main.py', 'test_main.py', 'test_parse.py']",['994e9d058804b288788bd686e8358b1eb717c99c'],18,142,160,10,0.0,0.8533333333333334,1.0
4a9eabdc17b972dd5ad1e3b81d2552866881542d,"Perform back-propagation from aas-core-meta (#84)

We propagate back meta-models from aas-core-meta repository back to our
test data.",Marko Ristin,marko.ristin@gmail.com,GitHub,noreply@github.com,2022-03-03 21:22:08+01:00,-3600,2022-03-03 21:22:08+01:00,-3600,True,False,"['jsonization.cs', 'types.cs', 'verification.cs', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'schema.json', 'meta_model.py', 'schema.json', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'meta_model.py']",['0f2566a34c63206c98c3d6f9abfbd90bde0fe748'],198,177,375,13,0.0,0.0,1.0
16c95822b7875ecf08f9eeb62c2083d39195b0f2,"Document `dev_scripts` (#85)

We mention `dev_scripts` in `CONTRIBUTING.rst` so that other developers
are aware of their existence.",Marko Ristin,marko.ristin@gmail.com,GitHub,noreply@github.com,2022-03-03 21:26:20+01:00,-3600,2022-03-03 21:26:20+01:00,-3600,True,False,['CONTRIBUTING.rst'],['4a9eabdc17b972dd5ad1e3b81d2552866881542d'],0,8,8,1,,,
ce763c0b10391b97a3292501c2f673f3da95232a,"Fix links related to `dev_scripts` in the docs (#86)

We erroneously wrote markdown instead of ReST.",Marko Ristin,marko.ristin@gmail.com,GitHub,noreply@github.com,2022-03-03 21:28:54+01:00,-3600,2022-03-03 21:28:54+01:00,-3600,True,False,['CONTRIBUTING.rst'],['16c95822b7875ecf08f9eeb62c2083d39195b0f2'],2,5,7,1,,,
fcaae6b3c42971c4edda658e3f3d402bec9c194a,"Enforce base64 encoding for bytearrays in JSON (#87)

We specify the encoding for bytearrays in JSON schema so that invalid
strings are correctly rejected.",Marko Ristin,marko.ristin@gmail.com,GitHub,noreply@github.com,2022-03-04 19:33:15+01:00,-3600,2022-03-04 19:33:15+01:00,-3600,True,False,"['main.py', 'schema.json', 'schema.json']",['ce763c0b10391b97a3292501c2f673f3da95232a'],2,7,9,3,0.0,0.0,1.0
53547068bacf2f384a74b4c4610fc22b08c50ddd,"Document the bottleneck in C# verification (#88)

We add a remark to warn the users of the code that passing paths around
is expensive. Hopefully we will be notified when this becomes a problem.
Otherwise, if the time permits at the end we plan to come back and
optimize the error handling so that we avoid this cost.",Marko Ristin,marko.ristin@gmail.com,GitHub,noreply@github.com,2022-03-09 12:02:59+01:00,-3600,2022-03-09 12:02:59+01:00,-3600,True,False,"['_generate.py', 'verification.cs']",['fcaae6b3c42971c4edda658e3f3d402bec9c194a'],2,44,46,2,0.0,0.0,0.0
81e9df83a8b91327d42dacc3de4e926524e08bb0,"Re-write two-pass serialization based on NET6 (#89)

We use `System.Text.Json.Nodes` to de/serialize instances of the
meta-model to JSON. Previously we used `System.Text.Json` instead which
had exponential time complexity with the object depth.",Marko Ristin,marko.ristin@gmail.com,GitHub,noreply@github.com,2022-03-12 10:25:52+01:00,-3600,2022-03-12 10:25:52+01:00,-3600,True,False,"['rist.xml', 'common.py', '_generate.py', 'unrolling.py', '_generate.py', '__init__.py', '_types.py', 'jsonization.cs', 'types.cs', 'verification.cs', 'visitation.cs', 'meta_model.py', 'Lang_string_set_from.cs', 'Lang_string_set_json_converter.cs', 'transform_Lang_string_set.cs', 'expected_symbol_table.txt', 'meta_model.py', 'schema.json', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'live_test_main.py']",['53547068bacf2f384a74b4c4610fc22b08c50ddd'],9555,9947,19502,22,0.9786585365853658,0.0,1.0
c01eb1795073a338a06b3856f32de576e298d619,"Optimize path handling in C# JSON deserialization (#90)

Currently, we pass in the path on every call to a deserialization
method. This is problematic since this induces a time complexity
of `O(n^2)` with `n` being the maximum length of a path. We need to
append the suffix on each call and therefore make a complete copy of the
previous path (the strings are stored as blocks in memory akin to arrays
in C#).

With this patch, we use an intermediate structure (`Error`) which stores
the path as a linked list. We append to this linked list when we unwind
the calls so that the time complexity is brought down to `O(n)`.

Additionally, the suffixes are appended only in case of errors which
should yield even better performance assuming that the correct data is
usually much more probable than incorrect data.",Marko Ristin,marko.ristin@gmail.com,GitHub,noreply@github.com,2022-03-15 07:22:13+01:00,-3600,2022-03-15 07:22:13+01:00,-3600,True,False,"['rist.xml', '_generate.py', 'jsonization.cs', 'Lang_string_set_from.cs']",['81e9df83a8b91327d42dacc3de4e926524e08bb0'],2725,7565,10290,4,0.0,0.19144648454993282,1.0
a47f3ba9c7bb5b2af157e551660ea2d201e8ff16,"Generate JSON paths for C# jsonization errors (#91)

Currently, we generate ""kind of"" XPaths for reporting the errors in JSON
de/serialization.

With this patch, we generate proper JSON paths instead, which also
support proper escaping and are more familiar to developers working with
JSON.",Marko Ristin,marko.ristin@gmail.com,GitHub,noreply@github.com,2022-03-16 09:50:16+01:00,-3600,2022-03-16 09:50:16+01:00,-3600,True,False,"['_generate.py', 'jsonization.cs']",['c01eb1795073a338a06b3856f32de576e298d619'],524,830,1354,2,0.02857142857142857,0.02857142857142857,0.6535714285714286
f9fffe51481d8f4ab50f453bb9bb45c942c67511,"Refactor errors to `Reporting` in C# (#92)

We want to generalize code for handling errors to verification as well
as to XML de/serialization in the future. Therefore we move all the code
related to the errors to a separate static class, `Reporting`.",Marko Ristin,marko.ristin@gmail.com,GitHub,noreply@github.com,2022-03-16 10:19:55+01:00,-3600,2022-03-16 10:19:55+01:00,-3600,True,False,"['rist.xml', 'common.py', '_generate.py', 'main.py', '__init__.py', '_generate.py', 'jsonization.cs', 'reporting.cs', 'Lang_string_set_from.cs', 'test_main.py']",['a47f3ba9c7bb5b2af157e551660ea2d201e8ff16'],1286,1936,3222,10,0.0,0.26842105263157895,1.0
88600dcd24b1a1f8976d2a6849c6819cf78f8679,"Refactor verification in `IEnumerable` in C# (#93)

Currently, we use `Errors` as a custom-tailored container. In this
patch, we use `IEnumerable` and `yield return` instead to use standards
language idioms.

This also allows us to reduce the time complexity to `O(n)` (from
`O(n^2)`) where `n` is the length of the maximum path segment.

Additionally, we substantially simplify the code to use pattern matching
instead of a powerfule and complex, but at the moment unnecessary,
unrolling.",Marko Ristin,marko.ristin@gmail.com,GitHub,noreply@github.com,2022-03-16 15:20:37+01:00,-3600,2022-03-16 15:20:37+01:00,-3600,True,False,"['_generate.py', '_generate.py', '_generate.py', 'jsonization.cs', 'reporting.cs', 'verification.cs', 'Error.cs', 'Errors.cs', 'verify_Lang_string_set.cs', 'visit_Lang_string_set.cs', 'transform_Lang_string_set.cs', 'live_test_main.py']",['f9fffe51481d8f4ab50f453bb9bb45c942c67511'],4572,4033,8605,12,0.0,0.0,1.0
749190cfcbea006b737b0517810e24faecac9570,"Undo debugging code in C# live test (#94)

This was an unintentional omission.",Marko Ristin,marko.ristin@gmail.com,GitHub,noreply@github.com,2022-03-16 15:25:26+01:00,-3600,2022-03-16 15:25:26+01:00,-3600,True,False,['live_test_main.py'],['88600dcd24b1a1f8976d2a6849c6819cf78f8679'],2,0,2,1,1.0,1.0,0.0
2f6fd8ca727c09ab8bff5189839b56cb4b5e3f60,"Handle `all` in intermediate representation (#95)

We add support for `all` built-in as well as simple generator
expressions in the intermediate representation.",Marko Ristin,marko.ristin@gmail.com,GitHub,noreply@github.com,2022-03-16 17:50:39+01:00,-3600,2022-03-16 17:50:39+01:00,-3600,True,False,"['_generate.py', 'type_inference.py', '_rules.py', 'tree.py', 'jsonization.cs', 'types.cs', 'verification.cs', 'meta_model.py', 'is_model_reference_to.cs', 'expected_symbol_table.txt', 'meta_model.py', 'schema.json', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py']",['749190cfcbea006b737b0517810e24faecac9570'],1394,1943,3337,15,0.3745928338762215,0.4723127035830619,0.9771986970684039
bca1a5cfe4e72088c772c2503dd16491707bcd32,"Stack heritage in second passes (#96)

We refactor `intermediate.translate` in a major way such that the
heritage of the classes and constrained primitives is stacked only in
the second passes. The benefits are the following:

+ The code is easier to read. Instead of hacking around with the `parse`
  representation, we can use resolved references to parents.
+ We were re-parsing the properties and methods in the classes from the
  ancestors simply because we could not access them due to inappropriate
  representation. This makes the reporting of errors convoluted as we
  would have to re-report the errors on every inherited property or
  method. With this change, we parse the properties and methods only
  once and report the errors correctly.

However, this refactoring has one big drawback, which we still found
acceptable:

- The state of the symbol table is not immutable any more. We have to
  break the typing system in various places since the actual values
  during the translation are now not know ahead of time. For example,
  the serialization settings are unknown prior to executing its
  inheritance.

  Theoretically, we could introduce yet another representation to suit
  this temporal ""limbo"" state before the values are finalized. At this
  point in time, this would be a lot of work without any tangible
  benefits and we doubt that the readability of the code would even
  improve. In the future, if there are bugs related to the mutability of
  the symbol table in `translate` module we should definitely revisit
  this decision.",Marko Ristin,marko.ristin@gmail.com,GitHub,noreply@github.com,2022-03-19 08:22:02+01:00,-3600,2022-03-19 08:22:02+01:00,-3600,True,False,"['_translate.py', '_types.py', 'jsonization.cs', 'types.cs', 'verification.cs', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt']",['2f6fd8ca727c09ab8bff5189839b56cb4b5e3f60'],3090,3336,6426,8,0.34705882352941175,0.16470588235294117,1.0
3503bf63e21ce326682fd40df71556990f35183d,"Fix minor issues reported by PyCharm (#97)

PyCharm is a bit stricter than mypy so a couple of (potential) typing
issues and typos went unnoticed. This change fixes them.",Marko Ristin,marko.ristin@gmail.com,GitHub,noreply@github.com,2022-03-21 06:50:48+01:00,-3600,2022-03-21 06:50:48+01:00,-3600,True,False,['_translate.py'],['bca1a5cfe4e72088c772c2503dd16491707bcd32'],6,13,19,1,,,
92139259d99c7fde39e8c5afdbf397d7dacc670d,"Shorten translation functions in `intermediate` (#98)

The translation functions in `intermediate._translate` had a
non-informative prefix where we denoted the *source* of the translation.
This distinction was indeed unnecessary as for each intermediate object
there was only one source.

We thus shortened all the translation functions simply from `_{source
object}_to_{target object}` to `_to_{target object}`.

This made the code substantially more readable.",Marko Ristin,marko.ristin@gmail.com,GitHub,noreply@github.com,2022-03-21 07:00:34+01:00,-3600,2022-03-21 07:00:34+01:00,-3600,True,False,['_translate.py'],['3503bf63e21ce326682fd40df71556990f35183d'],59,41,100,1,1.0,0.7777777777777778,0.0
7e91e02f5195b7f5c256bf71f128148196165594,"Exclude abstract classes from `stringify` (#99)

There is no point of enforcing abstract classes to be stringified. Hence
we exclude them from the `Dumpable` union and list only the concrete
classes. This makes the stringify modules easier to follow.

Mind that you can still write a stringification method for an abstract
class -- it is simply not enforced to have such a method.",Marko Ristin,marko.ristin@gmail.com,GitHub,noreply@github.com,2022-03-23 23:19:02+01:00,-3600,2022-03-23 23:19:02+01:00,-3600,True,False,"['_stringify.py', '_translate.py', '_types.py', '_stringify.py', '_translate.py', '_types.py', 'stringify.py']",['92139259d99c7fde39e8c5afdbf397d7dacc670d'],28,25,53,7,0.0,0.0,1.0
1a3a4476b70cae8ddc3bd13384ba55537f6f150f,"Translate enumeration literal in a function (#100)

This makes the future refactorings easier to follow, especially when we
add error reporting.",Marko Ristin,marko.ristin@gmail.com,GitHub,noreply@github.com,2022-03-23 23:30:17+01:00,-3600,2022-03-23 23:30:17+01:00,-3600,True,False,['_translate.py'],['7e91e02f5195b7f5c256bf71f128148196165594'],18,27,45,1,1.0,1.0,1.0
5296c983bf9feb1b8342a28b2f0253a44d9e2958,"Separate constructor extraction in intermediate (#101)

We refactor the extraction of the constructor in the
`intermediate._translate` to a separate function. This helps with
conflicting variable names and makes the code easier to read.",Marko Ristin,marko.ristin@gmail.com,GitHub,noreply@github.com,2022-03-23 23:40:56+01:00,-3600,2022-03-23 23:40:56+01:00,-3600,True,False,['_translate.py'],['1a3a4476b70cae8ddc3bd13384ba55537f6f150f'],35,52,87,1,0.0,1.0,1.0
ba54fa93dd99b85070de8e5c500fe1e580d81f63,"Refactor translation of meta-model information (#102)

We move out the translation of the meta-model information in
`intermediate._translate` to a separate function so that we can trace
the changes to this particular piece of logic more easily.

This will also make adding errors in the upcoming changes nicer to
trace.",Marko Ristin,marko.ristin@gmail.com,GitHub,noreply@github.com,2022-03-23 23:50:06+01:00,-3600,2022-03-23 23:50:06+01:00,-3600,True,False,['_translate.py'],['5296c983bf9feb1b8342a28b2f0253a44d9e2958'],12,16,28,1,1.0,1.0,1.0
af96469f4ff1178ee9f8b54be590a7a9d2cfa0e5,"Simplify iteration over intermediate doc elements (#103)

We used two functions (`_over_descriptions` and
`_over_symbol_descriptions`) in `intermediate._translate` only to call
`findall` on the corresponding documents.

In this patch, we integrate the `findall` in a single function,
`_find_all_in_descriptions`. This saves us one indention level and makes
the code even easier to follow.",Marko Ristin,marko.ristin@gmail.com,GitHub,noreply@github.com,2022-03-24 00:05:48+01:00,-3600,2022-03-24 00:05:48+01:00,-3600,True,False,['_translate.py'],['ba54fa93dd99b85070de8e5c500fe1e580d81f63'],168,169,337,1,0.0,0.0,1.0
0cf413238c249a2e4742efff349419b8595127d6,"Refactor `intermediate._translate._verify` (#104)

We split the individual regions of `intermediate._translate._verify`
into separate functions. This is necessary so that we reduce the
variable scope to avoid naming conflicts as well as type conflicts.",Marko Ristin,marko.ristin@gmail.com,GitHub,noreply@github.com,2022-03-24 00:26:31+01:00,-3600,2022-03-24 00:26:31+01:00,-3600,True,False,['_translate.py'],['af96469f4ff1178ee9f8b54be590a7a9d2cfa0e5'],89,132,221,1,0.7083333333333334,1.0,1.0
2c38e78ebe3eaceeceef8d4d1b4c5cd0f5861adf,"Allow selection in rerendering dev script (#105)

During a debugging session it is helpful if we do not waste time
re-rendering all the outputs in the test data, but only a subset that we
are actively developing.

This change introduces a `--select` parameter to that end in the
`run_tests_with_rerecord.py` script.",Marko Ristin,marko.ristin@gmail.com,GitHub,noreply@github.com,2022-03-24 00:41:06+01:00,-3600,2022-03-24 00:41:06+01:00,-3600,True,False,['run_tests_with_rerecord.py'],['0cf413238c249a2e4742efff349419b8595127d6'],8,26,34,1,0.0,1.0,1.0
e24694e7c2a78c88d518ac03c5e8d8303160d6e8,"Extract structure information from docstrings (#106)

Currently, we implemented the parsing of the docstrings using duct tape
in C# code generation. This does not scale to other languages or
browsable representation.

Thus we extract more detailed and better structured information from
docstrings in a principled manner at the intermediate stage so that the
generators become simpler and easier to write.",Marko Ristin,marko.ristin@gmail.com,GitHub,noreply@github.com,2022-03-24 00:42:34+01:00,-3600,2022-03-24 00:42:34+01:00,-3600,True,False,"['rist.xml', 'description.py', '_generate.py', '_generate.py', '__init__.py', '_stringify.py', '_translate.py', '_types.py', 'rendering.py', '_translate.py', '_description.py', 'rdf.py', 'stringify.py', 'types.cs', 'verification.cs', 'meta_model.py', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'meta_model.py', 'expected_error.txt', 'meta_model.py', 'expected_error.txt', 'meta_model.py', 'meta_model.py', 'meta_model.py', 'meta_model.py', 'rdf-ontology.ttl', 'meta_model.py', 'test_description.py', 'description.py', 'test_translate.py']",['2c38e78ebe3eaceeceef8d4d1b4c5cd0f5861adf'],3550,7757,11307,33,0.07958477508650519,0.39965397923875434,0.9558823529411765
3f875dff802b5914d2456137923959e46e16c0a1,"Check the order of properties and constructor args (#107)

We verify that the order of the properties and the order of the
constructor arguments is consistent. We match them simply by names and
do not analyze the code any further.

We hope that this makes the meta-model more consistent and thus easier
to read.",Marko Ristin,marko.ristin@gmail.com,GitHub,noreply@github.com,2022-03-25 10:49:44+01:00,-3600,2022-03-25 10:49:44+01:00,-3600,True,False,"['_translate.py', 'jsonization.cs', 'types.cs', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_error.txt', 'meta_model.py', 'expected_error.txt', 'meta_model.py', 'meta_model.py', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'meta_model.py']",['e24694e7c2a78c88d518ac03c5e8d8303160d6e8'],411,569,980,15,0.2268041237113402,0.5051546391752577,0.5463917525773195
b9565d870237ef4aa2009ba66f06b6997823ccee,"Fix failing remote continuous integration (#108)

We forgot to add the encoding in `read_text` and `write_text` calls.
This went unnoticed locally on Windows, but became apparent remotely on
Linux.

This patch fixes the issue by explicitly specifying the encoding as
`utf-8` wherever necessary.",Marko Ristin,marko.ristin@gmail.com,GitHub,noreply@github.com,2022-03-25 11:02:03+01:00,-3600,2022-03-25 11:02:03+01:00,-3600,True,False,"['specific_implementations.py', 'check_help_in_readme.py', 'expected_symbol_table.txt', 'live_test_main.py', 'test_main.py', 'test_translate.py', 'test_main.py', 'test_parse.py']",['3f875dff802b5914d2456137923959e46e16c0a1'],26,48,74,8,0.0,0.0,1.0
6809f205a94805b91ddccaf377ca3c129c4f7900,"Re-order V3RC02 tests to match aas-core-meta (#109)

We need to update and polish the meta-models in aas-core-meta. Hence we
first re-shuffle the data on our side to make the diffs minimal.",Marko Ristin,marko.ristin@gmail.com,GitHub,noreply@github.com,2022-03-25 12:14:49+01:00,-3600,2022-03-25 12:14:49+01:00,-3600,True,False,"['draw_bipartite_graph_based_on_lines.py', 'setup.py', 'jsonization.cs', 'stringification.cs', 'types.cs', 'verification.cs', 'visitation.cs', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'schema.json', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py']",['b9565d870237ef4aa2009ba66f06b6997823ccee'],17795,17832,35627,14,0.0,1.0,1.0
a64413aa9062aec2ae3d17be0a71ab9cef3a4505,"Apply `black` on test meta-models (#110)

This makes the changes in the test data easier to trace.",Marko Ristin,marko.ristin@gmail.com,GitHub,noreply@github.com,2022-03-25 12:21:01+01:00,-3600,2022-03-25 12:21:01+01:00,-3600,True,False,"['precommit.py', 'meta_model.py', 'meta_model.py', 'meta_model.py', 'meta_model.py', 'meta_model.py', 'meta_model.py', 'meta_model.py', 'meta_model.py', 'meta_model.py']",['6809f205a94805b91ddccaf377ca3c129c4f7900'],1307,1300,2607,10,0.0,0.0,0.5714285714285714
267a60d3daa496328d7f6dac7d7fca4b6b7ce47e,"Produce better errors on unexpected enum elements (#111)

When we parse an enumeration and there were errors, they were not
conclusive enough. We try to improve them with necessary details in this
patch.",Marko Ristin,marko.ristin@gmail.com,GitHub,noreply@github.com,2022-03-25 12:59:51+01:00,-3600,2022-03-25 12:59:51+01:00,-3600,True,False,"['_translate.py', 'expected_error.txt']",['a64413aa9062aec2ae3d17be0a71ab9cef3a4505'],3,5,8,2,0.0,0.0,1.0
efeeb318993de07cdc759351df0eca4f346292f6,"Exclude `ast` class names from errors (#112)

We have to exclude the type of the problematic `ast` nodes from the
errors since they differ between Python versions. This makes:

1) testing a bit harder (as we'd have to have different test data
   *per Python version*), and
2) reporting errors would be confusing if the user and the developer
   have different Python versions.",Marko Ristin,marko.ristin@gmail.com,GitHub,noreply@github.com,2022-03-26 09:32:05+01:00,-3600,2022-03-26 09:32:05+01:00,-3600,True,False,"['_translate.py', 'expected_error.txt']",['267a60d3daa496328d7f6dac7d7fca4b6b7ce47e'],3,4,7,2,,,
c98d228e39ab856402408def0ae12faa9b57d632,"Script syncing of the test meta-models (#113)

We group the test meta-models by version and enforce that they coincide
within the same group. However, we often develop the code and *change*
a meta-model at the same time. Once we are done with the development, we
had to tediously sync the meta-models within the group by hand.

In this change, we write a script to automate this syncing in order to
speed the development process.",Marko Ristin,marko.ristin@gmail.com,GitHub,noreply@github.com,2022-03-26 09:37:18+01:00,-3600,2022-03-26 09:37:18+01:00,-3600,True,False,"['check_test_meta_models_coincide.py', 'precommit.py', 'sync_meta_model.py']",['efeeb318993de07cdc759351df0eca4f346292f6'],35,178,213,3,0.0,0.3050847457627119,1.0
781dfd4efd8ad88b9cb4839709c72e14b953a38d,"Return errors instead of raising in C# jsonization (#114)

We had an assertion before warning against a missing feature. This is
not informative for the end user since it seems as if there is
a program bug rather than a missing feature.

With this change, we return an error which is then accompanied by the
line and column for the end user, as they might expect.",Marko Ristin,marko.ristin@gmail.com,GitHub,noreply@github.com,2022-03-28 10:42:22+02:00,-7200,2022-03-28 10:42:22+02:00,-7200,True,False,['_generate.py'],['c98d228e39ab856402408def0ae12faa9b57d632'],19,26,45,1,0.0,0.0,1.0
9ad6f26cd5b933c0539c6c6c16db3722867e8b09,"Infer schema constraints only for strings (#115)

We exclude other primitive types from the inference as we currently do
not have a principle approached to constraining other primitive types in
a schema.",Marko Ristin,marko.ristin@gmail.com,GitHub,noreply@github.com,2022-03-28 11:04:31+02:00,-7200,2022-03-28 11:04:31+02:00,-7200,True,False,['_inline.py'],['781dfd4efd8ad88b9cb4839709c72e14b953a38d'],18,25,43,1,,,
4a2599bbbe859de0ef6cd81328538c9e8d8a1837,"Sync test data with `aas-core-meta` (#116)

We want to add aas-core-codegen to the pre-commit checks of
aas-core-meta so we sync the test data to the files in aas-core-meta to
have both versions in sync.",Marko Ristin,marko.ristin@gmail.com,GitHub,noreply@github.com,2022-03-28 11:14:35+02:00,-7200,2022-03-28 11:14:35+02:00,-7200,True,False,"['jsonization.cs', 'stringification.cs', 'types.cs', 'verification.cs', 'visitation.cs', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'meta_model.py', 'schema.json', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'meta_model.py']",['9ad6f26cd5b933c0539c6c6c16db3722867e8b09'],13252,22001,35253,14,0.1089178709904829,0.5378921395840677,0.7416284807895664
8ad321160f0e4782d42f3137a8679a0647b64599,"Release 0.0.5 (#117)

* Infer schema constraints only for strings (#115)
* Return errors instead of raising in C# jsonization (#114)
* Exclude ``ast`` class names from errors (#112)
* Produce better errors on unexpected enum elements (#111)
* Check the order of properties and constructor args (#107)
* Extract structure information from docstrings (#106)
* Handle ``all`` in intermediate representation (#95)
* Introduce ``constraintref`` role in the docs (#71)
* Parse ``reference_in_the_book`` (#69)
* Remove ``ID`` from abbreviations in ``naming`` (#60)
* Fix naming for set of symbols used in properties (#57)

C#
--
* Refactor verification in ``IEnumerable`` in C# (#93)
* Refactor errors to ``Reporting`` in C# (#92)
* Generate JSON paths for C# jsonization errors (#91)
* Optimize path handling in C# JSON deserialization (#90)
* Re-write two-pass serialization based on NET6 (#89)

JSON Schema
-----------
* Enforce base64 encoding for bytearrays in JSON (#87)
* Fix ``ModelTypes`` enumeration in JSON (#82)
* Remove ``*_abstract`` definitions from JSON (#78)
* In-line constrained primitives in JSON Schema (#77)
* Nest constrained primitives in JSON (#67)
* Skip unused symbols in JSON schema (#58)
* Use ``oneOf`` instead of ``anyOf`` in JSON schema (#56)
* Add ``modelType`` in JSON schema (#55)
* Remove redundant ``type`` property in JSON schema (#54)

RDF+SHACL
---------
* Update RDF gen after review of V3RC01 (#62)",Marko Ristin,marko.ristin@gmail.com,GitHub,noreply@github.com,2022-03-28 11:28:29+02:00,-7200,2022-03-28 11:28:29+02:00,-7200,True,False,"['CHANGELOG.rst', '__init__.py', 'setup.py']",['4a2599bbbe859de0ef6cd81328538c9e8d8a1837'],2,41,43,3,,,
8f274522cf0534d285c049ab4a091e29c659a8a5,"Fix swallowed errors in `infer_for_schema` (#118)

We had an indentation error in a loop so the reporting of errors was
always skipped in `infer_for_schema` for length constraints.

This patch fixes the issue.",Marko Ristin,marko.ristin@gmail.com,GitHub,noreply@github.com,2022-03-28 15:51:35+02:00,-7200,2022-03-28 15:51:35+02:00,-7200,True,False,"['_inline.py', '_len.py']",['8ad321160f0e4782d42f3137a8679a0647b64599'],5,4,9,2,,,
cafedbb48ef322bd977c9d5b9e2a726c6c15e488,"Script smoke-testing a meta-model (#119)

We write a script to run the common pre-generation steps (parsing,
translation, infer constraints for schema). This allows us to run
smoke-tests on mea-models *before* generating the code.

This is particularly useful for continuous integration in, say,
aas-core-meta repository.",Marko Ristin,marko.ristin@gmail.com,GitHub,noreply@github.com,2022-03-28 16:00:18+02:00,-7200,2022-03-28 16:00:18+02:00,-7200,True,False,"['rist.xml', 'main.py', '__init__.py', 'main.py', 'check_test_meta_models_coincide.py', 'setup.py', 'v3rc1.py', 'v3rc2.py', 'expected_stderr.txt', 'meta_model.py', 'expected_stderr.txt', 'meta_model.py', 'expected_stderr.txt', 'meta_model.py', 'test_main.py']",['8f274522cf0534d285c049ab4a091e29c659a8a5'],2,6828,6830,15,0.17587209302325582,0.9496124031007752,0.17587209302325582
001310ad1c30169e810a71536de26a71ed82f7ba,"Release 0.0.6 (#120)

* Script smoke-testing a meta-model (#119)
* Fix swallowed errors in ``infer_for_schema`` (#118)",Marko Ristin,marko.ristin@gmail.com,GitHub,noreply@github.com,2022-03-28 16:09:21+02:00,-7200,2022-03-28 16:09:21+02:00,-7200,True,False,"['CHANGELOG.rst', '__init__.py', 'setup.py']",['cafedbb48ef322bd977c9d5b9e2a726c6c15e488'],2,7,9,3,,,
1db763763ff883c23423254b90877533849b629f,"Remove a TODO from `tests.smoke` (#121)

We mistakenly merged a TODO in the module `tests.smoke` since it lacked
the `__init__.py` marker in the directory and was thus omitted by
pylint.",Marko Ristin,marko.ristin@gmail.com,GitHub,noreply@github.com,2022-03-30 12:46:08+02:00,-7200,2022-03-30 12:46:08+02:00,-7200,True,False,"['__init__.py', 'test_main.py']",['001310ad1c30169e810a71536de26a71ed82f7ba'],3,0,3,2,,,
dd271d919fad02c4a5ec44373adbe5f94891531a,"Upgrade black to 22.3.0 (#123)

We had problems on the remote CI server complaining about the `click`
library. We simply upgrade black to the latest version and hope that
this upgrade fixes the issue.",Marko Ristin,marko.ristin@gmail.com,GitHub,noreply@github.com,2022-03-30 12:57:07+02:00,-7200,2022-03-30 12:57:07+02:00,-7200,True,False,['setup.py'],['1db763763ff883c23423254b90877533849b629f'],1,1,2,1,,,
a7075803927c042179442cd5aa87b668d55f948c,"Add pylint disables in `tests.smoke` (#122)

For some reason, pylint forgot to warn us about the missing disables in
the `tests.smoke` and we hastly merged in the changes.",Marko Ristin,marko.ristin@gmail.com,GitHub,noreply@github.com,2022-03-30 13:00:13+02:00,-7200,2022-03-30 13:00:13+02:00,-7200,True,False,['test_main.py'],['dd271d919fad02c4a5ec44373adbe5f94891531a'],0,4,4,1,,,
e82d381ad9ed0b167ceacdde6a02057417346001,"Include constraints in description iterations (#124)

We mistakenly omitted property constraints when we iterated over the
description elements. This resulted in unresolved attribute references.",Marko Ristin,marko.ristin@gmail.com,GitHub,noreply@github.com,2022-03-30 13:02:20+02:00,-7200,2022-03-30 13:02:20+02:00,-7200,True,False,"['description.py', '_translate.py']",['a7075803927c042179442cd5aa87b668d55f948c'],0,32,32,2,0.35,0.0,1.0
c5ebccfecacee3e51964e07aa59c5b12979e456b,"Sync test data with aas-core-meta V3RC02 (#125)

We sync the test meta-models with V3RC02 from the repository
aas-core-meta so that we follow on the latest developments.",Marko Ristin,marko.ristin@gmail.com,GitHub,noreply@github.com,2022-03-30 13:10:28+02:00,-7200,2022-03-30 13:10:28+02:00,-7200,True,False,"['jsonization.cs', 'stringification.cs', 'types.cs', 'verification.cs', 'visitation.cs', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'schema.json', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'v3rc2.py']",['e82d381ad9ed0b167ceacdde6a02057417346001'],7164,7267,14431,13,0.0,0.0,1.0
53d103bb0eee90f475845001700690b0d105f29e,"Write XSD generator (#126)

This is the initial version of the generator for XML Schema Definition
(XSD).",Marko Ristin,marko.ristin@gmail.com,GitHub,noreply@github.com,2022-03-30 13:20:05+02:00,-7200,2022-03-30 13:20:05+02:00,-7200,True,False,"['README.rst', 'main.py', 'main.py', '__init__.py', 'main.py', 'naming.py', 'check_test_meta_models_coincide.py', 'run_tests_with_rerecord.py', 'schema.xml', 'stdout.txt', 'meta_model.py', 'Lang_string_set.xml', 'root_element.xml', '__init__.py', 'test_main.py']",['c5ebccfecacee3e51964e07aa59c5b12979e456b'],4,5334,5338,15,0.09759271307742355,0.7143786597267404,0.41249186727391024
9b680a3a3d4dafad922ad3d72dd508abfc54c70f,"Assert that `self` is not in descendants (#127)

We add an assertion in the intermediate stage to make sure that the
descendants and concrete descendants are computed correctly. This also
helps the readability of the code, as the users can directly refer to
the assertions in case of uncertainty.",Marko Ristin,marko.ristin@gmail.com,GitHub,noreply@github.com,2022-03-30 18:34:09+02:00,-7200,2022-03-30 18:34:09+02:00,-7200,True,False,['_translate.py'],['53d103bb0eee90f475845001700690b0d105f29e'],8,31,39,1,0.0,1.0,1.0
39d9cf827a176cd60b10e80ce751efa8d45036cf,"Fix interfaces in XSD (#128)

We did not really handle the interfaces (abstract classes or concrete
classes with one or more concrete descendants). With this change, we
represent them as choices of possible elements.",Marko Ristin,marko.ristin@gmail.com,GitHub,noreply@github.com,2022-03-30 19:27:31+02:00,-7200,2022-03-30 19:27:31+02:00,-7200,True,False,"['rist.xml', '_types.py', '_translate.py', 'main.py', 'naming.py', 'schema.xml', 'root_element.xml']",['9b680a3a3d4dafad922ad3d72dd508abfc54c70f'],81,497,578,7,0.0,0.39166666666666666,1.0
a98bd3c390ec794336ab74acc2a43b3936d9a0b3,"Fix XSD to use correct environment type (#130)

We fix the snippet in the test data to use the appropriate type for the
environment (`environment_t`). Previously, we mistakenly took the type
from V3RC01, `assetAdministrationShellEnvironment_t`.",Marko Ristin,marko.ristin@gmail.com,GitHub,noreply@github.com,2022-04-01 10:39:33+02:00,-7200,2022-04-01 10:39:33+02:00,-7200,True,False,"['schema.xml', 'root_element.xml']",['39d9cf827a176cd60b10e80ce751efa8d45036cf'],2,2,4,2,,,
63f0078c042b281f13abc03c376d10ea3f02c21f,"Undo escaping of `\x??` in XSD (#131)

Many schema validators do not handle special escape characters `\x??` in
`xs:pattern` correctly, we have to undo the escaping in the patterns
and put them in `xs:pattern` in their original unicode characters.",Marko Ristin,marko.ristin@gmail.com,GitHub,noreply@github.com,2022-04-01 12:12:46+02:00,-7200,2022-04-01 12:12:46+02:00,-7200,True,False,"['main.py', 'schema.xml', 'test_main.py']",['a98bd3c390ec794336ab74acc2a43b3936d9a0b3'],6,101,107,3,0.5466666666666666,0.8666666666666667,1.0
ce8451b55783e40f0d4746869e134b2740e69208,"Test generated XML schema on the examples (#132)

Since we are not so sure about the XML schema, we introduce examples
which we validate using a validator library `xmlschema`.",Marko Ristin,marko.ristin@gmail.com,GitHub,noreply@github.com,2022-04-01 13:57:13+02:00,-7200,2022-04-01 13:57:13+02:00,-7200,True,False,"['main.py', 'setup.py', 'minimal_asset_administration_shell.xml', 'minimal_concept_description.xml', 'empty_environment_with_optional_properties_empty.xml', 'empty_environment_with_optional_properties_missing.xml', 'minimal_submodel.xml', 'minimal_property.xml', 'property_with_id_short.xml', 'submodel_with_two_submodel_elements.xml', 'schema.xsd', 'test_main.py']",['63f0078c042b281f13abc03c376d10ea3f02c21f'],10,117,127,12,0.0,1.0,1.0
f4860e8e03805361af4f80e1912096254f7255e9,"Fix the version for XSD test data (#133)

We change the snippets and the examples to reflect the correct version
of the XSD.",Marko Ristin,marko.ristin@gmail.com,GitHub,noreply@github.com,2022-04-01 14:02:32+02:00,-7200,2022-04-01 14:02:32+02:00,-7200,True,False,"['minimal_asset_administration_shell.xml', 'minimal_concept_description.xml', 'empty_environment_with_optional_properties_empty.xml', 'empty_environment_with_optional_properties_missing.xml', 'minimal_submodel.xml', 'minimal_property.xml', 'property_with_id_short.xml', 'submodel_with_two_submodel_elements.xml', 'schema.xsd', 'Lang_string_set.xml', 'root_element.xml']",['ce8451b55783e40f0d4746869e134b2740e69208'],12,12,24,11,,,
2451ac61d29de946e4d0201498be44b27f4109b6,"Remark why pre-conditions are not conjunctions (#134)

We add a note in the types of the intermediate representation why the
pre-conditions of a method are not modeled in the disjunctive normal
form which is common for programming languages supporting contracts.

Namely, we do not handle overriding of the methods at the moment, so we
leave this change in the intermediate representation for the future. The
note was however necessary to avoid confusion.",Marko Ristin,marko.ristin@gmail.com,GitHub,noreply@github.com,2022-04-07 09:55:23+02:00,-7200,2022-04-07 09:55:23+02:00,-7200,True,False,"['_translate.py', '_types.py']",['f4860e8e03805361af4f80e1912096254f7255e9'],2,24,26,2,,,
b69eaa83c98abf32e2bb95b6cf93186e0f431fcd,"Fix stringify of ``parse.tree.IsNone`` (#135)

We forgot to include ``original_node`` in the stringification by
mistake.",Marko Ristin,marko.ristin@gmail.com,GitHub,noreply@github.com,2022-04-07 12:21:41+02:00,-7200,2022-04-07 12:21:41+02:00,-7200,True,False,['tree.py'],['2451ac61d29de946e4d0201498be44b27f4109b6'],1,4,5,1,1.0,1.0,1.0
17bbd212f94bb9c1710a89a6da38a48094ab18ca,"Represent string constants as literals in C# (#136)

We mistakenly used ``repr`` to represent string literals in invariants.
With this patch, we correctly render the constant as a proper C# string
literal.",Marko Ristin,marko.ristin@gmail.com,GitHub,noreply@github.com,2022-04-07 12:24:52+02:00,-7200,2022-04-07 12:24:52+02:00,-7200,True,False,['_generate.py'],['b69eaa83c98abf32e2bb95b6cf93186e0f431fcd'],1,1,2,1,,,
d2171f1b516d9266b65be5f3366fb123e29f1df0,"Fix formatting of multi-line invariants in C# (#137)

We mistakenly used ``textwrap.dedent`` which fails when one of the
string interpolations consists of multiple lines.

With this patch, we fix the issue by avoiding ``textwrap.dedent`` and
using a vanilla string literal.",Marko Ristin,marko.ristin@gmail.com,GitHub,noreply@github.com,2022-04-07 12:27:25+02:00,-7200,2022-04-07 12:27:25+02:00,-7200,True,False,['_generate.py'],['17bbd212f94bb9c1710a89a6da38a48094ab18ca'],5,6,11,1,1.0,1.0,0.0
b0f8eb827f77be965b2ad7999b7e602d0de7620a,"Test with ``aas-core-meta`` releases (#138)

Previously, we manually copy/pasted ``meta_model.py`` from
``aas-core-meta`` repository. While this was simple, it became tedious
and intractable as the number of changes increased.

Instead, we started publishing ``aas-core-meta`` releases and using them
directly in this repository as a development dependency. This makes it
easier for us to spot exactly which version of the meta-model we are
testing against.",Marko Ristin,marko.ristin@gmail.com,GitHub,noreply@github.com,2022-04-07 12:34:23+02:00,-7200,2022-04-07 12:34:23+02:00,-7200,True,False,"['check_test_meta_models_coincide.py', 'precommit.py', 'fetch_meta_models_from_aas_core_meta.py', 'sync_meta_model.py', 'setup.py', 'jsonization.cs', 'reporting.cs', 'stdout.txt', 'stringification.cs', 'types.cs', 'verification.cs', 'visitation.cs', 'README.rst', 'concept_description_category_is_valid.cs', 'extension_names_are_unique.cs', 'id_shorts_are_unique.cs', 'is_model_reference_to.cs', 'is_xs_date_time_stamp_utc.cs', 'lang_strings_have_unique_languages.cs', 'properties_or_ranges_have_value_type.cs', 'qualifier_types_are_unique.cs', 'submodel_element_is_of_type.cs', 'submodel_elements_have_identical_semantic_ids.cs', 'value_consistent_with_xsd_type.cs', 'namespace.txt', 'meta_model.py', 'Lang_string_set_from.cs', 'transform_Lang_string_set.cs', 'Lang_string_set.cs', 'transform_Lang_string_set.cs', 'meta_model.py', 'expected_symbol_table.txt', 'schema.json', 'stdout.txt', 'Lang_string_set.json', 'schema_base.json', 'schema.json', 'stdout.txt', 'Lang_string_set.json', 'schema_base.json', 'meta_model.py', 'meta_model.py', 'meta_model.py', 'expected_symbol_table.txt', 'rdf-ontology.ttl', 'shacl-schema.ttl', 'stdout.txt', 'as_rdfs_range.ttl', 'owl_class.ttl', 'preamble.ttl', 'shape.ttl', 'preamble.ttl', 'url_prefix.txt', 'meta_model.py', 'README.rst', 'v3rc1.py', 'v3rc2.py', 'minimal_asset_administration_shell.xml', 'minimal_concept_description.xml', 'empty_environment_with_optional_properties_empty.xml', 'empty_environment_with_optional_properties_missing.xml', 'minimal_submodel.xml', 'minimal_property.xml', 'property_with_id_short.xml', 'submodel_with_two_submodel_elements.xml', 'schema.xsd', 'stdout.txt', 'Lang_string_set.xml', 'root_element.xml', 'meta_model.py', 'live_test_main.py', 'test_main.py', 'test_translate.py', 'test_main.py', 'test_main.py', 'test_main.py', 'test_parse.py', 'test_main.py']",['d2171f1b516d9266b65be5f3366fb123e29f1df0'],30066,6702,36768,78,0.8689085209461385,0.0,1.0
622d4b7fdc6f8d0ebf997318641a490e75d8bc28,"Break lines on invariants in C# (#139)

This change is a rudimentary heuristic to break long conditions into
much more readable multiple lines.",Marko Ristin,marko.ristin@gmail.com,GitHub,noreply@github.com,2022-04-07 12:53:41+02:00,-7200,2022-04-07 12:53:41+02:00,-7200,True,False,"['_generate.py', 'verification.cs']",['b0f8eb827f77be965b2ad7999b7e602d0de7620a'],58,218,276,2,0.0,0.0,1.0
4d64c1c23535311d373853c8c9ec5385c1a6006f,"Wrap the invariant descriptions in C# (#140)

We need to re-flow the invariant descriptions in the generated C# code
to a pre-defined line width. Otherwise, the code is barely readable in
cases where invariant descriptions are long.",Marko Ristin,marko.ristin@gmail.com,GitHub,noreply@github.com,2022-04-08 11:50:57+02:00,-7200,2022-04-08 11:50:57+02:00,-7200,True,False,"['common.py', '_generate.py', 'verification.cs', 'test_verification.py']",['622d4b7fdc6f8d0ebf997318641a490e75d8bc28'],75,341,416,4,0.11538461538461539,0.32211538461538464,0.9519230769230769
e8359d54049d99390658b1ad0746cb10a97a0314,"Fix `NOTE` comments (#141)

I had an error in my live template where the day of the note was written
without a preceding zero in the days.

This patch makes the note comments uniform again.",Marko Ristin,marko.ristin@gmail.com,GitHub,noreply@github.com,2022-04-08 11:53:52+02:00,-7200,2022-04-08 11:53:52+02:00,-7200,True,False,"['_generate.py', '_inline.py', '_len.py', '_types.py']",['4d64c1c23535311d373853c8c9ec5385c1a6006f'],14,14,28,4,,,
1fd2b7c4d101d1b1ddb8e2f3443d0f4d81d4f2d6,"Render the descriptions with smoke at intermediate (#142)

We introduce an additional verification at the intermediate stage to
check that all documentation elements can be rendered using a dummy
smoke renderer. This is necessary since we had bad suprises over at
aas-core-meta, so we want to catch these issues as soon as possible.",Marko Ristin,marko.ristin@gmail.com,GitHub,noreply@github.com,2022-04-08 16:28:37+02:00,-7200,2022-04-08 16:28:37+02:00,-7200,True,False,"['_translate.py', 'expected_error.txt', 'meta_model.py']",['e8359d54049d99390658b1ad0746cb10a97a0314'],79,230,309,3,0.7818181818181819,1.0,1.0
70232a24af60dcc38549d54f46a174d6c9fbaf46,"Make `modelType`'s strings in JSON schema (#143)

We make `modelType`'s strings instead of objects since there is no use
to prepare for extensibility at this point.

Additionally, we have to delete the test data for V3RC01 since RC01
expected the model types to be objects, which makes no sense for V3RC02.",Marko Ristin,marko.ristin@gmail.com,GitHub,noreply@github.com,2022-04-08 16:53:36+02:00,-7200,2022-04-08 16:53:36+02:00,-7200,True,False,"['main.py', 'schema.json', 'stdout.txt', 'Lang_string_set.json', 'schema_base.json', 'schema.json']",['1fd2b7c4d101d1b1ddb8e2f3443d0f4d81d4f2d6'],1474,2,1476,6,1.0,1.0,0.0
a6813c340eda57b699634dd430feb2e62a6580ab,"Add examples for JSON schema (#144)

We check the generated schema against the examples. This is necessary to
make sure that we manually can quickly inspect if everything is working
as expected.",Marko Ristin,marko.ristin@gmail.com,GitHub,noreply@github.com,2022-04-09 07:50:50+02:00,-7200,2022-04-09 07:50:50+02:00,-7200,True,False,"['mypy.ini', 'run_tests_with_rerecord.py', 'setup.py', 'minimal_asset_administration_shell.json', 'minimal_concept_description.json', 'empty_environment_with_optional_properties_empty.json', 'empty_environment_with_optional_properties_missing.json', 'minimal_submodel.json', 'minimal_property.json', 'property_with_id_short.json', 'submodel_with_two_submodel_elements.json', '__init__.py', '__init__.py', 'test_main.py']",['70232a24af60dcc38549d54f46a174d6c9fbaf46'],8,138,146,14,0.0,0.9545454545454546,1.0
76a9c7b85c3246edcf585271aa62e6ddbdf6edc7,"Release 0.0.7 (#145)

* Render the descriptions with smoke at intermediate (#142)

C#
--
* Represent string constants as literals in C# (#136)
* Fix formatting of multi-line invariants in C# (#137)
* Break lines on invariants in C# (#139)
* Wrap the invariant descriptions in C# (#140)

JSON Schema
-----------
* Make ``modelType``'s strings in JSON schema (#143)

XSD
---
* Write XSD generator (#126)
* Fix interfaces in XSD (#128)
* Fix XSD to use correct environment type (#130)
* Undo escaping of ``\x??`` in XSD (#131)",Marko Ristin,marko.ristin@gmail.com,GitHub,noreply@github.com,2022-04-09 08:01:39+02:00,-7200,2022-04-09 08:01:39+02:00,-7200,True,False,"['CHANGELOG.rst', '__init__.py', 'setup.py']",['a6813c340eda57b699634dd430feb2e62a6580ab'],2,25,27,3,,,
5280608ffe8acebc480647f3b6636278325ebba6,"Update ``aas-core-meta`` to 2022.4.30a3 (#146)

We update to the latest version of ``aas-core-meta`` to keep up with the
changes and make the diffs traceable.",Marko Ristin,marko.ristin@gmail.com,GitHub,noreply@github.com,2022-04-09 09:01:25+02:00,-7200,2022-04-09 09:01:25+02:00,-7200,True,False,"['setup.py', 'jsonization.cs', 'stringification.cs', 'types.cs', 'verification.cs', 'visitation.cs', 'expected_symbol_table.txt', 'schema.json', 'expected_symbol_table.txt', 'schema.xsd']",['76a9c7b85c3246edcf585271aa62e6ddbdf6edc7'],20457,16964,37421,10,0.8747826086956522,0.7191304347826087,0.021739130434782608
522b963afdf55c2bf255e197ca044458415d4af2,"Update ``aas-core-meta`` to 2022.4.30a5 (#147)

We update to the latest version of ``aas-core-meta`` to keep up with the
changes and make the diffs of the test data more traceable.",Marko Ristin,marko.ristin@gmail.com,GitHub,noreply@github.com,2022-04-09 09:52:00+02:00,-7200,2022-04-09 09:52:00+02:00,-7200,True,False,"['setup.py', 'jsonization.cs', 'stringification.cs', 'types.cs', 'verification.cs', 'visitation.cs', 'expected_symbol_table.txt', 'schema.json', 'expected_symbol_table.txt', 'schema.xsd']",['5280608ffe8acebc480647f3b6636278325ebba6'],6235,65,6300,10,0.8652068126520681,0.6822384428223844,0.033576642335766425
d64a7ec4e22bc498bca55e41c09c96b401a12f7e,"Sort definitions in JSON schema (#148)

Sorted definitions are:
1) Easier to diff,
2) Easier to search, and
3) Easier to compare against RDF+SHACL schemas.",Marko Ristin,marko.ristin@gmail.com,GitHub,noreply@github.com,2022-04-09 22:04:44+02:00,-7200,2022-04-09 22:04:44+02:00,-7200,True,False,"['main.py', 'schema.json']",['522b963afdf55c2bf255e197ca044458415d4af2'],610,612,1222,2,0.0,0.0,1.0
6fb10a1f85bdcea75183c1906dba67b2e26dae1b,"Sort schema elements by tag and name in XSD (#149)

We group the children of the ``<schema>`` by their tag and then sort by
``name`` attribute within the group.

This makes it easier to:
* diff,
* search, and
* compare against JSON Schema and RDF+SHACL.",Marko Ristin,marko.ristin@gmail.com,GitHub,noreply@github.com,2022-04-09 22:33:41+02:00,-7200,2022-04-09 22:33:41+02:00,-7200,True,False,"['main.py', 'schema.xsd']",['d64a7ec4e22bc498bca55e41c09c96b401a12f7e'],735,798,1533,2,0.0,0.0,1.0
056f480019b60563452a966a95561acf0ce2b820,"Release 0.0.8 (#150)

JSON
----
* Sort definitions in JSON schema (#148)

XSD
---
* Sort schema elements by tag and name in XSD (#149)",Marko Ristin,marko.ristin@gmail.com,GitHub,noreply@github.com,2022-04-09 22:39:38+02:00,-7200,2022-04-09 22:39:38+02:00,-7200,True,False,"['rist.xml', 'CHANGELOG.rst', '__init__.py', 'setup.py']",['6fb10a1f85bdcea75183c1906dba67b2e26dae1b'],2,15,17,4,,,
f83d8d21e8d2973544950a063b12ac576fc5cf45,"Implement a practical set of visitors in C# (#151)

With this change, we provide a practical set of visitors in
``visitation.cs`` in C#.

Previously, we did not have a practical use case for the visitors.
Now we implemented xmlization (coming in the future patch), and so
figured out what kind of visitors were still missing.",Marko Ristin,marko.ristin@gmail.com,GitHub,noreply@github.com,2022-04-14 00:09:06+02:00,-7200,2022-04-14 00:09:06+02:00,-7200,True,False,"['_generate.py', 'visitation.cs']",['056f480019b60563452a966a95561acf0ce2b820'],33,536,569,2,0.7246835443037974,0.7341772151898734,1.0
6ef4ac769a6e95b9f01f99cd7aecb680ad8669c5,"Allow null enums in C# stringification (#152)

Since we are going to return a nullable string anyhow, we accept just as
well nullable enum literals. This makes the client code a bit easier to
manage.

Additionally, C# is kind of peculiar about nullable value types. See
this StackOverflow answer for more information: [1].

[1]: https://stackoverflow.com/questions/54593923/nullable-reference-types-with-generic-return-type/54594285#54594285",Marko Ristin,marko.ristin@gmail.com,GitHub,noreply@github.com,2022-04-14 00:18:30+02:00,-7200,2022-04-14 00:18:30+02:00,-7200,True,False,"['_generate.py', 'stringification.cs']",['f83d8d21e8d2973544950a063b12ac576fc5cf45'],53,144,197,2,0.0,1.0,1.0
cd5473805d57c14ac75f786043aea9c9384db3ae,"Remove unused arguments in C# jsonization (#153)

We missed an unused argument (related to implementation-specific
snippets). Removing it simplified the code a bit.",Marko Ristin,marko.ristin@gmail.com,GitHub,noreply@github.com,2022-04-14 00:23:57+02:00,-7200,2022-04-14 00:23:57+02:00,-7200,True,False,['_generate.py'],['6ef4ac769a6e95b9f01f99cd7aecb680ad8669c5'],14,3,17,1,1.0,1.0,0.5
b06d8bafcc8818962f9b81ed45abb71293ca76e4,"Specify more implementation keys in C# jsonization (#154)

We add a segment in the middle of the key to make it more explicit to
which class in the de/serialization Uberclass the snippets will belong
to. This makes it easier for the reader of the snippets to follow where
they are going to be inserted.",Marko Ristin,marko.ristin@gmail.com,GitHub,noreply@github.com,2022-04-14 00:29:17+02:00,-7200,2022-04-14 00:29:17+02:00,-7200,True,False,['_generate.py'],['cd5473805d57c14ac75f786043aea9c9384db3ae'],10,10,20,1,,,
fb076609a96895ac3342e69f073af3e0bf83bc12,"Fix documentation about classes in C# jsonization (#155)

We fix the documentation comment and replace ""entities"" with ""classes""
to avoid confusing the reader. There is indeed a meta-model class
""Entity"", so this can be indeed misleading.",Marko Ristin,marko.ristin@gmail.com,GitHub,noreply@github.com,2022-04-14 00:32:42+02:00,-7200,2022-04-14 00:32:42+02:00,-7200,True,False,"['_generate.py', 'jsonization.cs']",['b06d8bafcc8818962f9b81ed45abb71293ca76e4'],2,2,4,2,,,
e0b1e51ca13b7d3de52a8a7fcd65871e01fd6bb1,"Verify the limitedness of type annotations (#156)

We check at the intermediate stage that only a limited set of type
annotation patterns is used. This greately simplifies the generators.

However, we anticipate that more complex type patterns are going to be
used in the meta-models in the future. At the moment, we stick to the
simple generators, and explicitly check for these simplifying
assumptions.",Marko Ristin,marko.ristin@gmail.com,GitHub,noreply@github.com,2022-04-14 00:57:44+02:00,-7200,2022-04-14 00:57:44+02:00,-7200,True,False,"['_generate.py', '_translate.py', 'expected_symbol_table.txt', 'meta_model.py']",['fb076609a96895ac3342e69f073af3e0bf83bc12'],106,121,227,4,1.0,1.0,0.0
ca81d671f93d5222eddd615af6c94d9e1c3aff50,"Write xmlization for C# (#157)

In this change, we generate the C# code to de/serialize from and to XML.",Marko Ristin,marko.ristin@gmail.com,GitHub,noreply@github.com,2022-04-14 01:08:05+02:00,-7200,2022-04-14 01:08:05+02:00,-7200,True,False,"['main.py', '_generate.py', '__init__.py', '_generate.py', 'reporting.cs', 'xmlization.cs', 'test_main.py']",['e0b1e51ca13b7d3de52a8a7fcd65871e01fd6bb1'],4,20086,20090,7,0.02519224147825089,0.1124756111557443,0.9934580511878802
a48e3c8f2029b80c61f0d63eae95a5ced77a5e26,"Update test data to aas-core-meta 2022.4.30a6 (#158)

We update the test data to match the meta-models in aas-core-meta
repository at latest version 2022.4.30a6.",Marko Ristin,marko.ristin@gmail.com,GitHub,noreply@github.com,2022-04-20 10:32:16+02:00,-7200,2022-04-20 10:32:16+02:00,-7200,True,False,"['setup.py', 'jsonization.cs', 'types.cs', 'verification.cs', 'visitation.cs', 'xmlization.cs', 'expected_symbol_table.txt', 'schema.json', 'expected_symbol_table.txt', 'schema.xsd']",['ca81d671f93d5222eddd615af6c94d9e1c3aff50'],2178,130,2308,10,0.9704391891891891,0.924831081081081,0.017736486486486486
5a52fb149cf73c566fbbcf4b1bd809ce09f930ec,"Adapt RDF and SHACL to match aas-specs V3RC02 (#159)

We make changes to RDF and SHACL generation so that our generated
schemas are as similar as possible to the schemas in
admin-shell-io/aas-specs repository for the version V3RC02 on the branch
[feature/rdf/updateToV3.0RC02].

[feature/rdf/updateToV3.0RC02]: https://github.com/admin-shell-io/aas-specs/tree/feature/rdf/updateToV3.0RC02",Marko Ristin,marko.ristin@gmail.com,GitHub,noreply@github.com,2022-04-20 15:55:44+02:00,-7200,2022-04-20 15:55:44+02:00,-7200,True,False,"['.gitignore', 'rdf.py', 'rdf-ontology.ttl', 'rdf-ontology.ttl', 'shacl-schema.ttl', 'stdout.txt', 'preamble.ttl', 'preamble.ttl', 'url_prefix.txt', 'test_main.py']",['a48e3c8f2029b80c61f0d63eae95a5ced77a5e26'],521,3628,4149,10,0.0,0.0,0.5
4ed6b47415fc13a93a6ce00d04b325b3baea0781,"Refactor dev requirements into a txt file (#160)

We refactor the development requirements (*i.e.*, dependencies) into a
separate text file, ``requirements-dev.txt``, to be consistent with
``requirements.txt``.",Marko Ristin,marko.ristin@gmail.com,GitHub,noreply@github.com,2022-05-04 08:24:09+02:00,-7200,2022-05-04 08:24:09+02:00,-7200,True,False,"['requirements-dev.txt', 'setup.py']",['5a52fb149cf73c566fbbcf4b1bd809ce09f930ec'],13,15,28,2,,,
dac0899e9fff7cecee9704348e2c7b9e9faccfaf,"Fix unspecified indentions in C# (#161)

At a couple of spots we did not specify the indentions in C# code
generations, but just left four spaces in the templates (``    ``).

We replace the indentions with the explicit snippet (``{I}``, ``{II}``
*etc.*).",Marko Ristin,marko.ristin@gmail.com,GitHub,noreply@github.com,2022-05-04 09:25:29+02:00,-7200,2022-05-04 09:25:29+02:00,-7200,True,False,"['_generate.py', '_generate.py']",['4ed6b47415fc13a93a6ce00d04b325b3baea0781'],52,52,104,2,,,
df2a6f2b77d2ef1c1bf31cf3c36b27eb4f12b86d,"Fix indention in snippets of C# jsonization (#162)

There was a bug related to ``textwrap.dedent`` where we start the
template with an indention (``{I}``) which is later ""eaten"" by
``textwrap.dedent``.

We remove ``textwrap.dedent`` for these cases so that the formatting in
the generated code becomes correct.",Marko Ristin,marko.ristin@gmail.com,GitHub,noreply@github.com,2022-05-04 11:05:35+02:00,-7200,2022-05-04 11:05:35+02:00,-7200,True,False,"['_generate.py', 'jsonization.cs']",['dac0899e9fff7cecee9704348e2c7b9e9faccfaf'],375,371,746,2,1.0,0.0,0.0
9608bc51228bf4597c5e0ad3788f687be34edb2d,"Remove ``textwrap.dedent`` (#163)

We used ``textwrap.dedent`` thinking that it would help us with the code
layout. However, there were too many bugs when we included snippets
*within* the text which included newlines and indention of their own.

Spotting and fixing these bugs was far too tedious, so we decided to
remove ``textwrap.dedent`` from the code base altogether as we think
that the benefits (better code layout) are not worth the drawbacks (hard
to fix bugs).",Marko Ristin,marko.ristin@gmail.com,GitHub,noreply@github.com,2022-05-04 12:01:11+02:00,-7200,2022-05-04 12:01:11+02:00,-7200,True,False,"['.gitignore', 'common.py', '_generate.py', '_generate.py', '_generate.py', '_generate.py', '_generate.py', '_generate.py', 'rdf.py', 'shacl.py']",['df2a6f2b77d2ef1c1bf31cf3c36b27eb4f12b86d'],1002,857,1859,10,1.0,0.7887323943661971,0.22535211267605634
bf50d24b300dacd015fff1a7f03623c27b757d64,"Allow for subclass checks in intermediate (#164)

We introduce a function to check for subclassing between two classes in
the intermediate layer to simplify the life of the downstream clients.",Marko Ristin,marko.ristin@gmail.com,GitHub,noreply@github.com,2022-05-13 19:51:50+02:00,-7200,2022-05-13 19:51:50+02:00,-7200,True,False,"['.gitignore', 'rist.xml', '_types.py', 'test_types.py']",['9608bc51228bf4597c5e0ad3788f687be34edb2d'],0,200,200,4,0.10204081632653061,1.0,1.0
fca02d0bda93158c126179b7cde680681cb55f62,"Make stringify output multi-line string (#165)

Currently, stringify outputs a single-line string representation of
text. This makes it very hard to diff test data against changes when we
manually need to inspect it.

Hence we render the multi-line text in the stringified test data as
multi-line string literals to make the diffing easier for the developer.",Marko Ristin,marko.ristin@gmail.com,GitHub,noreply@github.com,2022-05-18 06:55:53+02:00,-7200,2022-05-18 06:55:53+02:00,-7200,True,False,"['stringify.py', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt']",['bf50d24b300dacd015fff1a7f03623c27b757d64'],1189,11426,12615,15,0.0,0.0,1.0
071434f7d4410a644f327ff31325f44b0562d50e,"Fix stacking of inferred schema constraints (#166)

We infer the schema constraints (currently only length and patterns)
based on the meta-model. We do not inherit them by default since we
usually generate the invariants for each class in the schema
*separately* and let the schema engine deal with the inheritance.

However, in the case of test data generation, it would be helpful if the
schema constraints are properly inherited among the classes.

In this patch, we re-structure the code and the tests to cater for that
use case and extend the logic with an additional function to stack the
schema constraints by the class ontology.

Unsurprisingly, a couple of bugs were discovered and fixed along
the re-structuring.",Marko Ristin,marko.ristin@gmail.com,GitHub,noreply@github.com,2022-05-18 07:16:32+02:00,-7200,2022-05-18 07:16:32+02:00,-7200,True,False,"['__init__.py', '_inline.py', '_len.py', '_pattern.py', '_stringify.py', '_types.py', 'stringify.py', 'schema.xsd', 'common.py', 'test_len_on_properties.py', 'test_len_on_self.py', 'test_patterns_on_properties.py', 'test_patterns_on_self.py']",['fca02d0bda93158c126179b7cde680681cb55f62'],602,1443,2045,13,0.0,0.9234042553191489,1.0
68e749678b56e0d6cb46deb7ef87c307bfc4eba5,"Fix methods ignored in intermediate (#167)

We missed to translate implementation-specific methods to intermediate
representation due to a subtle bug where we checked for wrong run-time
types. This patch fixes the bug.",Marko Ristin,marko.ristin@gmail.com,GitHub,noreply@github.com,2022-05-18 08:16:55+02:00,-7200,2022-05-18 08:16:55+02:00,-7200,True,False,"['_translate.py', 'expected_symbol_table.txt', 'meta_model.py']",['071434f7d4410a644f327ff31325f44b0562d50e'],3,72,75,3,1.0,1.0,
d411a289fae62a418dc108bf4a714abd17134fa5,"Allow contracts for impl.-specific methods (#168)

Since the implementation-specific methods are going to be manually
written and the contracts need not be transpiled, we allow the contracts
in the intermediate stage.",Marko Ristin,marko.ristin@gmail.com,GitHub,noreply@github.com,2022-05-18 09:38:30+02:00,-7200,2022-05-18 09:38:30+02:00,-7200,True,False,['_translate.py'],['68e749678b56e0d6cb46deb7ef87c307bfc4eba5'],0,12,12,1,0.0,0.0,1.0
506683d4a6e76287e495116513fbabd9c344069d,"Expect C# snippets for types in a directory (#169)

We move all the snippets for methods and classes in C# to a separate
directory to make the browsing of the snippets a bit easier for the
developer.",Marko Ristin,marko.ristin@gmail.com,GitHub,noreply@github.com,2022-05-18 09:40:18+02:00,-7200,2022-05-18 09:40:18+02:00,-7200,True,False,['_generate.py'],['d411a289fae62a418dc108bf4a714abd17134fa5'],3,3,6,1,,,
61a42e5de86c2d97f5d8ec83bc71e7bf656965b9,"Introduce `specified_for` for methods (#170)

Since the methods are inherited, we need to introduce `specified_for`
in the intermediate representation so that we do not re-generate the
same method in the descendant classes.",Marko Ristin,marko.ristin@gmail.com,GitHub,noreply@github.com,2022-05-18 11:40:47+02:00,-7200,2022-05-18 11:40:47+02:00,-7200,True,False,"['_generate.py', '_stringify.py', '_translate.py', '_types.py', 'category_or_default.cs', 'value_type_or_default.cs', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt']",['506683d4a6e76287e495116513fbabd9c344069d'],13,114,127,13,0.36,0.64,0.92
e1ab46d2629c5b23d96988df7300d697a1fbcb95,"Re-visit inheritance of methods and signatures (#171)

We re-visited how the methods are inherited and interfaces are
generated, and discovered a couple of subtle bugs related to
how we ignored `specified_for` of a method during the translation stage
to intermediate.

This patch fixes the issue.",Marko Ristin,marko.ristin@gmail.com,GitHub,noreply@github.com,2022-05-18 14:45:20+02:00,-7200,2022-05-18 14:45:20+02:00,-7200,True,False,"['_generate.py', '_types.py', 'expected_symbol_table.txt', 'expected_symbol_table.txt']",['61a42e5de86c2d97f5d8ec83bc71e7bf656965b9'],32,10,42,4,1.0,0.0,0.0
8eaad955e9d3d3b47478a2dcb0b8cbf36eb9151d,"Update to latest aas-core-meta 2022.5.30a1 (#172)

We update the snippets in the test data for the latest aas-core-meta
release.",Marko Ristin,marko.ristin@gmail.com,GitHub,noreply@github.com,2022-05-18 14:57:59+02:00,-7200,2022-05-18 14:57:59+02:00,-7200,True,False,"['requirements-dev.txt', 'types.cs', 'verification.cs', 'category_or_default.cs', 'value_type_or_default.cs', 'kind_or_default.cs', 'order_relevant_or_default.cs', 'expected_symbol_table.txt', 'expected_symbol_table.txt']",['e1ab46d2629c5b23d96988df7300d697a1fbcb95'],425,1081,1506,9,0.6923076923076923,0.6923076923076923,1.0
cce53a0c1b28cd7d8c9a8683685382663d82dff3,"Add experimental support for ``any`` in invariants (#173)

We did not thouroughly test the transpilation of ``any`` in invariants,
but add it to our parsing. This is necessary since we need to create a
new version of aas-core-meta which uses ``any`` in some of the
invariants and the smoke tests fail at the moment.

Non-experimental support and testing is coming in one of the upcoming
commits.",Marko Ristin,marko.ristin@gmail.com,GitHub,noreply@github.com,2022-05-24 22:34:22+02:00,-7200,2022-05-24 22:34:22+02:00,-7200,True,False,"['aas-core-csharp-codegen.iml', '_generate.py', 'type_inference.py', '_rules.py', 'tree.py']",['8eaad955e9d3d3b47478a2dcb0b8cbf36eb9151d'],16,93,109,5,0.7666666666666667,0.7666666666666667,0.8833333333333333
c52cdf2d2a60760f4ff0ec217ebd7cbbe1a9df06,"Release 0.0.9 (#174)

* Verify the limitedness of type annotations (#156)
* Allow for subclass checks in intermediate (#164)
* Make stringify output multi-line string (#165)
* Fix stacking of inferred schema constraints (#166)
* Fix methods ignored in intermediate (#167)
* Allow contracts for impl.-specific methods (#168)
* Introduce ``specified_for`` for methods (#170)
* Re-visit inheritance of methods and signatures (#171)
* Add experimental support for ``any`` in invariants (#173)

C#
--
* Implement a practical set of visitors in C# (#151)
* Allow null enums in C# stringification (#152)
* Remove unused arguments in C# jsonization (#153)
* Specify more implementation keys in C# jsonization (#154)
* Fix documentation about classes in C# jsonization (#155)
* Write xmlization for C# (#157)
* Fix unspecified indention in C# (#161)
* Fix indention in snippets of C# jsonization (#162)
* Expect C# snippets for types in a directory (#169)

RDF+SHACL
---------
* Adapt RDF and SHACL to match aas-specs V3RC02 (#159)",Marko Ristin,marko.ristin@gmail.com,GitHub,noreply@github.com,2022-05-24 22:48:29+02:00,-7200,2022-05-24 22:48:29+02:00,-7200,True,False,"['rist.xml', 'CHANGELOG.rst', '__init__.py', 'setup.py']",['cce53a0c1b28cd7d8c9a8683685382663d82dff3'],2,31,33,4,,,
731549e2749dc0fcd80cf26ac4b0f0a4433b98aa,"Move ``requirements-dev`` back to ``setup.py`` (#175)

We have to undo #160 since it actually broke the packaging. The issue
went unnoticed as we haven't installed the new version from pypi.org
recently.

Specifically, we would have to package ``requirements-dev.txt`` with the
package so that ``setup.py`` can read it on installation. It makes
little sense to package development requirements for installation,
though.",Marko Ristin,marko.ristin@gmail.com,GitHub,noreply@github.com,2022-05-24 23:01:00+02:00,-7200,2022-05-24 23:01:00+02:00,-7200,True,False,"['requirements-dev.txt', 'setup.py']",['c52cdf2d2a60760f4ff0ec217ebd7cbbe1a9df06'],15,13,28,2,,,
01796207cb8ede26d90d293c051e1e5cd3e62dc7,"Release 0.0.10 (#176)

* Move ``requirements-dev`` back to ``setup.py`` (#175)",Marko Ristin,marko.ristin@gmail.com,GitHub,noreply@github.com,2022-05-24 23:06:35+02:00,-7200,2022-05-24 23:06:35+02:00,-7200,True,False,"['CHANGELOG.rst', '__init__.py', 'setup.py']",['731549e2749dc0fcd80cf26ac4b0f0a4433b98aa'],2,6,8,3,,,
707bd2a2d85f73dd0a7e59cf64b0adefa4608a26,"Fix XSD for abstract classes without implementers (#177)

In cases where an abstract class is defined in the meta-model, but no
implementers are provided, we generated an invalid XSD. Namely, we
expected a choice group to exist, but since there were no implementers,
no choice group has been generated.

In this patch, we generate an empty element for the abstract class and
simply refer to it instead of the choice.

We manually tested against aas-core-meta 2022.5.26. Therefore we also
update the example to comply with this newer meta-model despite the fact
that the repository still uses aas-core-meta 2022.5.30a6 for testing.

We will update to the latest aas-core-meta 2022.5.26 very soon in one of
the upcoming commits.",Marko Ristin,marko.ristin@gmail.com,GitHub,noreply@github.com,2022-05-26 08:46:43+02:00,-7200,2022-05-26 08:46:43+02:00,-7200,True,False,"['main.py', 'property_with_id_short.xml']",['01796207cb8ede26d90d293c051e1e5cd3e62dc7'],18,16,34,2,1.0,1.0,0.0
e02f05cf156234385bde1e1ad15d032bf54470e1,"Release 0.0.11

* Fix XSD for abstract classes without implementers (#177)",Marko Ristin,marko.ristin@gmail.com,Marko Ristin,marko.ristin@gmail.com,2022-05-26 08:47:39+02:00,-7200,2022-05-26 08:47:39+02:00,-7200,True,False,"['CHANGELOG.rst', '__init__.py', 'setup.py']",['707bd2a2d85f73dd0a7e59cf64b0adefa4608a26'],2,6,8,3,,,
b69f74fe6c97a063ea2810afedae9bc87c4f70ab,"Fix a typo in RDF query message (#179)

There was a typo in the generated RDF schema which has been introduced
by copy/pasting from the original RDF schema which we used as a
template.",Marko Ristin,marko.ristin@gmail.com,GitHub,noreply@github.com,2022-06-03 14:50:42+02:00,-7200,2022-06-03 14:50:42+02:00,-7200,True,False,"['shacl.py', 'shacl-schema.ttl', 'shacl-schema.ttl']",['e02f05cf156234385bde1e1ad15d032bf54470e1'],26,26,52,3,,,
79f13e04a2107e474e8161be645e6ee68a9f271a,"Release 0.0.12 (#180)

* Fix a typo in RDF query message (#179)",Marko Ristin,marko.ristin@gmail.com,GitHub,noreply@github.com,2022-06-03 15:08:51+02:00,-7200,2022-06-03 15:08:51+02:00,-7200,True,False,"['CHANGELOG.rst', '__init__.py', 'setup.py']",['b69f74fe6c97a063ea2810afedae9bc87c4f70ab'],2,6,8,3,,,
ddb4497c032207d764e1fcc97d28b1a5c17e3dbb,"Exclude external classes stringify assertions (#181)

We modify the assertions in the ``stringify`` module to exclude classes
coming from outside of the ``_types`` module. This is not only more
efficient, but also makes the debugging easier.",Marko Ristin,marko.ristin@gmail.com,GitHub,noreply@github.com,2022-06-10 14:10:27+02:00,-7200,2022-06-10 14:10:27+02:00,-7200,True,False,['stringify.py'],['79f13e04a2107e474e8161be645e6ee68a9f271a'],1,8,9,1,0.0,0.0,1.0
fb9c93a038913fbbe2d8b29920be7526c85c1623,"Relax constraints on C# namespace identifiers (#182)

We originally always tought in multi-segment namespaces. Eventually,
when we started writing unit tests, such a constraint turned out that it
was too restrictive.",Marko Ristin,marko.ristin@gmail.com,GitHub,noreply@github.com,2022-06-15 11:54:18+02:00,-7200,2022-06-15 11:54:18+02:00,-7200,True,False,['common.py'],['ddb4497c032207d764e1fcc97d28b1a5c17e3dbb'],1,1,2,1,,,
c9052938146f03bc83d84dbd6ecabdc4992810ae,"Fix UTF-32 regexes for C# UTF-16-only engine (#183)

C# uses a UTF-16-only regex engine. Hence we need to translate the
regexes involving UTF-32 characters into concatenations and unions of
ranges, respectively. See [this StackOverflow question] and [that
StackOverflow question].

[this StackOverflow question]: https://stackoverflow.com/questions/364009/c-sharp-regular-expressions-with-uxxxxxxxx-characters-in-the-pattern
[that StackOverflow question]: https://stackoverflow.com/questions/47605037/unicode-character-range-not-being-consumed-by-regex",Marko Ristin,marko.ristin@gmail.com,GitHub,noreply@github.com,2022-06-15 15:21:59+02:00,-7200,2022-06-15 15:21:59+02:00,-7200,True,False,"['rist.xml', '_generate.py', '__init__.py', '__init__.py', '_parse.py', '_render.py', '_stringify.py', '_types.py', '_visitor.py', 'main.py', 'pylint.rc', 'compare_rendered_regexes_against_source_py.py', 'run_tests_with_rerecord.py', 'requirements.txt', 'verification.cs', 'expected_verification.cs', 'model.py', 'expected_verification.cs', 'model.py', 'expected_verification.cs', 'model.py', 'expected_verification.cs', 'model.py', 'expected_verification.cs', 'model.py', 'expected_verification.cs', 'model.py', 'expected_verification.cs', 'model.py', 'expected_verification.cs', 'model.py', 'expected_verification.cs', 'model.py', 'expected_verification.cs', 'model.py', 'expected_verification.cs', 'model.py', 'expected_verification.cs', 'model.py', 'expected_verification.cs', 'model.py', 'expected_verification.cs', 'model.py', 'expected_verification.cs', 'model.py', 'expected_verification.cs', 'model.py', 'expected_verification.cs', 'model.py', 'expected_verification.cs', 'model.py', 'expected_verification.cs', 'model.py', 'expected_verification.cs', 'model.py', 'expected_verification.cs', 'model.py', 'expected_parsed_regex.txt', 'rendered_regex.txt', 'source.py', 'expected_parsed_regex.txt', 'rendered_regex.txt', 'source.py', 'expected_parsed_regex.txt', 'rendered_regex.txt', 'source.py', 'expected_parsed_regex.txt', 'rendered_regex.txt', 'source.py', 'expected_parsed_regex.txt', 'rendered_regex.txt', 'source.py', 'expected_parsed_regex.txt', 'rendered_regex.txt', 'source.py', 'expected_parsed_regex.txt', 'rendered_regex.txt', 'source.py', 'expected_parsed_regex.txt', 'rendered_regex.txt', 'source.py', 'expected_parsed_regex.txt', 'rendered_regex.txt', 'source.py', 'expected_parsed_regex.txt', 'rendered_regex.txt', 'source.py', 'expected_parsed_regex.txt', 'rendered_regex.txt', 'source.py', 'expected_parsed_regex.txt', 'rendered_regex.txt', 'source.py', 'expected_parsed_regex.txt', 'rendered_regex.txt', 'source.py', 'expected_parsed_regex.txt', 'rendered_regex.txt', 'source.py', 'expected_parsed_regex.txt', 'rendered_regex.txt', 'source.py', 'expected_parsed_regex.txt', 'rendered_regex.txt', 'source.py', 'expected_parsed_regex.txt', 'rendered_regex.txt', 'source.py', 'expected_parsed_regex.txt', 'rendered_regex.txt', 'source.py', 'expected_parsed_regex.txt', 'rendered_regex.txt', 'source.py', 'expected_parsed_regex.txt', 'rendered_regex.txt', 'source.py', 'expected_parsed_regex.txt', 'rendered_regex.txt', 'source.py', 'expected_parsed_regex.txt', 'rendered_regex.txt', 'source.py', 'expected_parsed_regex.txt', 'rendered_regex.txt', 'source.py', 'expected_parsed_regex.txt', 'rendered_regex.txt', 'source.py', 'expected_parsed_regex.txt', 'rendered_regex.txt', 'source.py', 'expected_parsed_regex.txt', 'rendered_regex.txt', 'source.py', 'expected_parsed_regex.txt', 'rendered_regex.txt', 'source.py', 'expected_parsed_regex.txt', 'rendered_regex.txt', 'source.py', 'expected_parsed_regex.txt', 'rendered_regex.txt', 'source.py', 'expected_parsed_regex.txt', 'rendered_regex.txt', 'source.py', 'expected_parsed_regex.txt', 'rendered_regex.txt', 'source.py', 'expected_parsed_regex.txt', 'rendered_regex.txt', 'source.py', 'expected_parsed_regex.txt', 'rendered_regex.txt', 'source.py', 'expected_parsed_regex.txt', 'rendered_regex.txt', 'source.py', 'expected_parsed_regex.txt', 'rendered_regex.txt', 'source.py', 'expected_parsed_regex.txt', 'rendered_regex.txt', 'source.py', 'expected_parsed_regex.txt', 'rendered_regex.txt', 'source.py', 'expected_parsed_regex.txt', 'rendered_regex.txt', 'source.py', 'expected_parsed_regex.txt', 'rendered_regex.txt', 'source.py', 'expected_parsed_regex.txt', 'rendered_regex.txt', 'source.py', 'expected_parsed_regex.txt', 'rendered_regex.txt', 'source.py', 'expected_parsed_regex.txt', 'rendered_regex.txt', 'source.py', 'expected_parsed_regex.txt', 'rendered_regex.txt', 'source.py', 'expected_parsed_regex.txt', 'rendered_regex.txt', 'source.py', 'expected_parsed_regex.txt', 'rendered_regex.txt', 'source.py', 'expected_parsed_regex.txt', 'rendered_regex.txt', 'source.py', 'expected_parsed_regex.txt', 'rendered_regex.txt', 'source.py', 'expected_parsed_regex.txt', 'rendered_regex.txt', 'source.py', 'expected_parsed_regex.txt', 'rendered_regex.txt', 'source.py', 'expected_parsed_regex.txt', 'rendered_regex.txt', 'source.py', 'expected_parsed_regex.txt', 'rendered_regex.txt', 'source.py', 'expected_parsed_regex.txt', 'rendered_regex.txt', 'source.py', 'expected_parsed_regex.txt', 'rendered_regex.txt', 'source.py', 'expected_error.txt', 'source.py', 'expected_error.txt', 'source.py', 'expected_error.txt', 'source.py', 'expected_error.txt', 'source.py', 'expected_error.txt', 'source.py', 'expected_error.txt', 'source.py', 'expected_error.txt', 'source.py', 'expected_error.txt', 'source.py', 'expected_error.txt', 'source.py', 'expected_error.txt', 'source.py', 'expected_error.txt', 'source.py', 'expected_error.txt', 'source.py', 'expected_error.txt', 'source.py', 'expected_error.txt', 'source.py', 'expected_error.txt', 'source.py', 'expected_error.txt', 'source.py', 'expected_error.txt', 'source.py', 'expected_error.txt', 'source.py', 'expected_error.txt', 'source.py', 'expected_error.txt', 'source.py', 'expected_error.txt', 'source.py', 'expected_error.txt', 'source.py', 'expected_error.txt', 'source.py', 'expected_error.txt', 'source.py', 'expected_error.txt', 'source.py', 'expected_error.txt', 'source.py', 'expected_error.txt', 'source.py', 'expected_error.txt', 'source.py', 'expected_error.txt', 'source.py', 'expected_error.txt', 'source.py', 'expected_error.txt', 'source.py', 'expected_error.txt', 'source.py', 'expected_error.txt', 'source.py', 'expected_error.txt', 'source.py', 'expected_error.txt', 'source.py', 'expected_stderr.txt', 'meta_model.py', 'test_verification.py', '__init__.py', 'test_parse.py', 'test_retree.py']",['fb9c93a038913fbbe2d8b29920be7526c85c1623'],51,6003,6054,292,0.4074074074074074,0.5855379188712522,0.9541446208112875
21cdf6afc3a425541f2700d3301bbeabe56fd72c,"Refactor ``RERECORD`` into ``tests.common`` (#184)

We refactor the environment variable in the common module since now many
tests depend on it. Originally, only a few tests were using it, so there
was no need to encapsulate it in one place.",Marko Ristin,marko.ristin@gmail.com,GitHub,noreply@github.com,2022-06-15 15:25:44+02:00,-7200,2022-06-15 15:25:44+02:00,-7200,True,False,"['common.py', 'test_main.py', 'test_verification.py', 'test_translate.py', 'test_main.py', 'test_parse.py', 'test_retree.py', 'test_main.py', 'test_main.py', 'test_main.py']",['c9052938146f03bc83d84dbd6ecabdc4992810ae'],79,50,129,10,,,
353b8a196eacbccf757969bb6ed110b12b427535,"Fix duplicate inheritance of pattern constraints (#185)

In cases where a property is a constrained primitive, the stacking of
pattern constraint over ancestor is broken, as we inherit the
constraints multiple times.

As we do not keep track of where the constraints of the ancestors come
from, we simply de-duplicate by keeping a set of observed patterns.",Marko Ristin,marko.ristin@gmail.com,GitHub,noreply@github.com,2022-06-15 18:11:38+02:00,-7200,2022-06-15 18:11:38+02:00,-7200,True,False,"['_inline.py', '_types.py', 'test_patterns_on_properties.py']",['21cdf6afc3a425541f2700d3301bbeabe56fd72c'],5,161,166,3,0.049586776859504134,1.0,1.0
2fcf8f52d0e35d33c13814a5573a9c04a0e4a3e4,"Infer non-nullness in the intermediate (#186)

We infer the non-nullness by agressively making assumptions in
conjunctions and implications on ""is not None""'s.

Word of caution. This might be too aggressive since we assume that
function calls and method calls do not alter the values observed in the
implications or conjunctions. This indeed holds true as long as you
observe query-command separation, but only that long.",Marko Ristin,marko.ristin@gmail.com,GitHub,noreply@github.com,2022-06-17 18:05:39+02:00,-7200,2022-06-17 18:05:39+02:00,-7200,True,False,"['rist.xml', '_generate.py', 'type_inference.py', 'test_type_inference.py']",['353b8a196eacbccf757969bb6ed110b12b427535'],26,517,543,4,0.5015105740181269,0.8580060422960725,0.9486404833836858
ca2e25219fd55374e4bb2e1977f6e177c9920e17,"Fix C# generation for CodeInspect and testgen (#187)

We generated the test data for C# automatically and inspected the C#
code with CodeInspect. This patch comprises all the minor fixes so that
both the unit tests and the CodeInspect pass.

Mind that we only tested for JSON, not XML de/serialization.",Marko Ristin,marko.ristin@gmail.com,GitHub,noreply@github.com,2022-06-17 18:26:24+02:00,-7200,2022-06-17 18:26:24+02:00,-7200,True,False,"['_generate.py', '_generate.py', '_generate.py', '_generate.py', '_generate.py', '_generate.py', '_generate.py', 'jsonization.cs', 'reporting.cs', 'stringification.cs', 'types.cs', 'verification.cs', 'visitation.cs', 'xmlization.cs', 'expected_verification.cs', 'expected_verification.cs', 'expected_verification.cs', 'expected_verification.cs', 'expected_verification.cs', 'expected_verification.cs', 'expected_verification.cs', 'expected_verification.cs', 'expected_verification.cs', 'expected_verification.cs', 'expected_verification.cs', 'expected_verification.cs', 'expected_verification.cs', 'expected_verification.cs', 'expected_verification.cs', 'expected_verification.cs', 'expected_verification.cs', 'expected_verification.cs', 'expected_verification.cs', 'expected_verification.cs', 'expected_verification.cs']",['2fcf8f52d0e35d33c13814a5573a9c04a0e4a3e4'],2004,2464,4468,35,0.48717948717948717,0.6820512820512821,0.9692307692307692
da4e2a3c7e29292f0919f271824c135c69f99067,"Strip anchors in XSD patterns (#188)

XSD engines anchor the patterns automatically, and invalidate *any*
string if there are anchors in the pattern. Hence we need to remove the
anchors in XSD.",Marko Ristin,marko.ristin@gmail.com,GitHub,noreply@github.com,2022-06-18 09:15:29+02:00,-7200,2022-06-18 09:15:29+02:00,-7200,True,False,"['main.py', 'schema.xsd', 'test_main.py']",['ca2e25219fd55374e4bb2e1977f6e177c9920e17'],30,130,160,3,0.4492753623188406,0.8115942028985508,1.0
f6746222c07eebceb99b058a945f8b7cbe0c5a99,"Allow classes without constructor arguments in C# (#189)

We originally designed the data structures in C# to allow for empty
constructors, but eventually moved away from that model. This patch
allows now constructors with empty arguments, as we do not generate
empty constructors any more.",Marko Ristin,marko.ristin@gmail.com,GitHub,noreply@github.com,2022-06-19 10:01:52+02:00,-7200,2022-06-19 10:01:52+02:00,-7200,True,False,"['_generate.py', 'run_tests_with_rerecord.py', 'expected_types.cs', 'model.py', 'expected_types.cs', 'model.py', 'test_structure.py']",['da4e2a3c7e29292f0919f271824c135c69f99067'],8,377,385,7,0.5158730158730159,0.5238095238095238,1.0
afec2cf363b6cb69816e7724a2b58626e2165869,"Make C# classes with children implement interfaces (#190)

This patch fixes the bug that classes with concrete descendants did not
implement the interface used to designate both the parent and the child
class.",Marko Ristin,marko.ristin@gmail.com,GitHub,noreply@github.com,2022-06-19 10:15:14+02:00,-7200,2022-06-19 10:15:14+02:00,-7200,True,False,"['_generate.py', 'types.cs', 'expected_types.cs', 'model.py']",['f6746222c07eebceb99b058a945f8b7cbe0c5a99'],5,231,236,4,0.9393939393939394,0.9393939393939394,1.0
824d34de4c84d7e1ddc39069bc9ec11c910f36e5,"Add ``py.typed`` file (#191)

We forgot to add ``py.typed`` file to ``aas_core_codegen`` module so
mypy thinks it can not infer the types.",Marko Ristin,marko.ristin@gmail.com,GitHub,noreply@github.com,2022-06-19 18:18:32+02:00,-7200,2022-06-19 18:18:32+02:00,-7200,True,False,['py.typed'],['afec2cf363b6cb69816e7724a2b58626e2165869'],0,1,1,1,,,
0dbe7fed696ef3643855e9d97760d313d22a8f18,"Remove unused imports in ``rdf_shacl`` (#193)

We mistakenly forgot to remove the unused imports. Due to time pressure,
we skipped remote CI, while the local CI missed these unused imports.",Marko Ristin,marko.ristin@gmail.com,GitHub,noreply@github.com,2022-06-19 18:46:26+02:00,-7200,2022-06-19 18:46:26+02:00,-7200,True,False,['shacl.py'],['824d34de4c84d7e1ddc39069bc9ec11c910f36e5'],1,1,2,1,,,
3c79c9172cfa291eea07bf3362ed684f54f5eeee,"Adapt and re-record for aas-core-meta 2022.6.19 (#192)

This is a very large change as we adapt all the snippets and test data
to aas-core-meta 2022.6.19 (which is, on its part, a substantial change
to 2022.5.30a1).

The generated C# code was successfully tested with JSON data
automatically generated by aas-core3.0rc02-testgen.

The testing of C# code with XML data is still pending.",Marko Ristin,marko.ristin@gmail.com,GitHub,noreply@github.com,2022-06-19 18:52:04+02:00,-7200,2022-06-19 18:52:04+02:00,-7200,True,False,"['.gitignore', 'setup.py', 'jsonization.cs', 'reporting.cs', 'stringification.cs', 'types.cs', 'verification.cs', 'visitation.cs', 'xmlization.cs', 'category_or_default.cs', 'category_or_default.cs', 'value_type_or_default.cs', 'kind_or_default.cs', 'kind_or_default.cs', 'order_relevant_or_default.cs', 'concept_description_category_is_valid.cs', 'extension_names_are_unique.cs', 'id_shorts_are_unique.cs', 'is_model_reference_to.cs', 'is_xs_date_time_stamp_utc.cs', 'lang_strings_have_unique_languages.cs', 'properties_or_ranges_have_value_type.cs', 'qualifier_types_are_unique.cs', 'submodel_element_is_of_type.cs', 'submodel_elements_have_identical_semantic_ids.cs', 'value_consistent_with_xsd_type.cs', 'namespace.txt', 'expected_symbol_table.txt', 'property_with_id_short.json', 'schema.json', 'expected_symbol_table.txt', 'rdf-ontology.ttl', 'shacl-schema.ttl', 'schema.xsd']",['0dbe7fed696ef3643855e9d97760d313d22a8f18'],12172,25120,37292,34,0.03732028143163047,0.14224533496482106,0.9883756500458856
2b89e63f285558eea2acbb951e4ad6d636d26a4f,"Release 0.0.13 (#194)

* Adapt and re-record for aas-core-meta 2022.6.19 (#192)
* Infer non-nullness in the intermediate (#186)
* Fix duplicate inheritance of pattern constraints (#185)
* Exclude external classes stringify assertions (#181)

C#
--
* Make C# classes with children implement interfaces (#190)
* Allow classes without constructor arguments in C# (#189)
* Fix C# generation for CodeInspect and testgen (#187)
* Fix UTF-32 regexes for C# UTF-16-only engine (#183)
* Relax constraints on C# namespace identifiers (#182)",Marko Ristin,marko.ristin@gmail.com,GitHub,noreply@github.com,2022-06-19 19:45:56+02:00,-7200,2022-06-19 19:45:56+02:00,-7200,True,False,"['CHANGELOG.rst', '__init__.py', 'setup.py']",['3c79c9172cfa291eea07bf3362ed684f54f5eeee'],2,21,23,3,,,
4a2aedbd5ba5d3e49a4348fe8c9f63bf91b750c2,"Reduce interfaces if descendants in C# (#195)

If a concrete class has one or more concrete descendants, there will be
a corresponding interface generated. Hence this concrete class needs to
implement only that interface, and none more, since the interface will
already specify all the antecedent interfaces.",Marko Ristin,marko.ristin@gmail.com,GitHub,noreply@github.com,2022-06-19 21:36:08+02:00,-7200,2022-06-19 21:36:08+02:00,-7200,True,False,"['_generate.py', 'types.cs']",['2b89e63f285558eea2acbb951e4ad6d636d26a4f'],10,12,22,2,0.0,0.0,1.0
bd17b0e2b61769da8ae8c76e0467b3073abf3c3b,"Prefix all ``cref``'s with ``Aas.`` in C# (#196)

We need to prefix all ``<see cref=""..."" />`` since conflicts are
possible. For example, if a class has a property ``Entity`` and there is
also an enumerator called ``Entity``.",Marko Ristin,marko.ristin@gmail.com,GitHub,noreply@github.com,2022-06-19 21:47:43+02:00,-7200,2022-06-19 21:47:43+02:00,-7200,True,False,"['description.py', '_generate.py', 'types.cs', 'expected_types.cs', 'expected_types.cs', 'expected_types.cs', 'test_description.py']",['4a2aedbd5ba5d3e49a4348fe8c9f63bf91b750c2'],238,259,497,7,0.0,0.0,0.5
3b2d5db0d4d8599a5cd7e7f15046b633507e36c1,"Fix C# for InspectCode (#197)

This patch contains various minor fixes such that InspectCode does not
complain on the generated code.",Marko Ristin,marko.ristin@gmail.com,GitHub,noreply@github.com,2022-06-19 21:51:21+02:00,-7200,2022-06-19 21:51:21+02:00,-7200,True,False,"['verification.cs', 'is_model_reference_to.cs', 'is_xs_date_time_stamp_utc.cs', 'submodel_elements_have_identical_semantic_ids.cs']",['bd17b0e2b61769da8ae8c76e0467b3073abf3c3b'],102,70,172,4,1.0,1.0,0.0
9adb51a6178a5d637626b577aa2196abb4e3c62d,"Release 0.0.14 (#198)

This version comprises minor fixes so that we can publish
a pre-release of the C# SDK.

C#
--
* Fix C# for InspectCode (#197)
* Prefix all ``cref``'s with ``Aas.`` in C# (#196)
* Reduce interfaces if descendants in C# (#195)",Marko Ristin,marko.ristin@gmail.com,GitHub,noreply@github.com,2022-06-19 22:00:23+02:00,-7200,2022-06-19 22:00:23+02:00,-7200,True,False,"['CHANGELOG.rst', '__init__.py', 'setup.py']",['3b2d5db0d4d8599a5cd7e7f15046b633507e36c1'],2,13,15,3,,,
09623f1f2174b4e7089d5ad645d4901db38f5e6a,"Make ``TypeAnnotationExceptOptional`` public (#199)

We make ``intermediate.TypeAnnotationExceptOptional`` public since
downstream clients (notably, aas-core-testgen3.0rc02) needs it.",Marko Ristin,marko.ristin@gmail.com,GitHub,noreply@github.com,2022-06-20 10:54:32+02:00,-7200,2022-06-20 10:54:32+02:00,-7200,True,False,['__init__.py'],['9adb51a6178a5d637626b577aa2196abb4e3c62d'],0,1,1,1,,,
66330acec4c880e3628a3c2720354697b988fb7a,"Update to aas-core-meta 2022.6.20 (#200)

We re-record the test data for the latest aas-core-meta.",Marko Ristin,marko.ristin@gmail.com,GitHub,noreply@github.com,2022-06-20 17:14:01+02:00,-7200,2022-06-20 17:14:01+02:00,-7200,True,False,"['setup.py', 'verification.cs', 'expected_symbol_table.txt', 'expected_symbol_table.txt']",['09623f1f2174b4e7089d5ad645d4901db38f5e6a'],582,659,1241,4,0.0,0.0,1.0
e9a3380f8ff7b724ed6e1a8dd656226025fc3d15,"Encapsulate retrieval of the primitive type (#201)

We often have to check for a primitive type over either primitive type
annotation or a constrained primitive. Therefore, we introduce a
function that encapsulates this logic.

This is also used in downstream clients such as testgen.",Marko Ristin,marko.ristin@gmail.com,GitHub,noreply@github.com,2022-06-21 09:39:05+02:00,-7200,2022-06-21 09:39:05+02:00,-7200,True,False,"['_generate.py', '__init__.py', '_types.py', 'main.py']",['66330acec4c880e3628a3c2720354697b988fb7a'],35,29,64,4,1.0,1.0,0.0
db12cae371154a5e1026eabd3d79c04fe84dc227,"Move `try_primitive_type` in intermediate for mypy (#202)

We have to move the function below in the code so that the mypy can
infer the types correctly. We wanted to merge this in the previous
commit, but mistakenly forgot to include the file.",Marko Ristin,marko.ristin@gmail.com,GitHub,noreply@github.com,2022-06-21 09:42:08+02:00,-7200,2022-06-21 09:42:08+02:00,-7200,True,False,['_types.py'],['e9a3380f8ff7b724ed6e1a8dd656226025fc3d15'],17,18,35,1,,,
0c7131efec36716e1819ed0c26e79ffa04b6ff39,"Release 0.0.15 (#203)

This version includes minor enhancements to make the work of
the aas-core-testgen a bit easier.

* Encapsulate retrieval of the primitive type (#201)
* Update to aas-core-meta 2022.6.20 (#200)
* Make ``TypeAnnotationExceptOptional`` public (#199)",Marko Ristin,marko.ristin@gmail.com,GitHub,noreply@github.com,2022-06-21 09:53:27+02:00,-7200,2022-06-21 09:53:27+02:00,-7200,True,False,"['CHANGELOG.rst', '__init__.py', 'setup.py']",['db12cae371154a5e1026eabd3d79c04fe84dc227'],2,11,13,3,,,
8d46114ba8b9175defa34bdad85ab2c99fb37637,"Fix C# for XML with aas-core-testgen (#204)

We fix C# code generation in an iterative process with aas-core-testgen
so that the C# compiles and passes all the unit tests.

This patch therefore comprises various fixes that were necessary during
the development.",Marko Ristin,marko.ristin@gmail.com,GitHub,noreply@github.com,2022-06-21 12:21:24+02:00,-7200,2022-06-21 12:21:24+02:00,-7200,True,False,"['_generate.py', 'xmlization.cs']",['0c7131efec36716e1819ed0c26e79ffa04b6ff39'],9351,10973,20324,2,0.07430340557275542,0.35294117647058826,0.0
9069f4df3762768b4a483171de3891e2886024b3,"Reformat C# code (#205)

This is a minor patch that we fix most obvious formatting
inconsistencies. The C# code should still be reformatted with a proper
tool.",Marko Ristin,marko.ristin@gmail.com,GitHub,noreply@github.com,2022-06-21 13:08:19+02:00,-7200,2022-06-21 13:08:19+02:00,-7200,True,False,"['_generate.py', 'reporting.cs', 'verification.cs', 'is_xs_date_time_stamp_utc.cs', 'value_consistent_with_xsd_type.cs']",['8d46114ba8b9175defa34bdad85ab2c99fb37637'],60,66,126,5,0.0,1.0,1.0
f239231142c521bfa7adb289d14a6fe2fbb78237,"Adapt for aas-core-meta 2022.6.21 (#206)

This patch contains new or fixed snippets for aas-core-meta 2022.6.21.",Marko Ristin,marko.ristin@gmail.com,GitHub,noreply@github.com,2022-06-21 13:40:16+02:00,-7200,2022-06-21 13:40:16+02:00,-7200,True,False,"['setup.py', 'types.cs', 'verification.cs', 'category_or_default.cs', 'data_element_category_is_valid.cs', 'expected_symbol_table.txt', 'expected_symbol_table.txt']",['9069f4df3762768b4a483171de3891e2886024b3'],365,339,704,7,1.0,1.0,1.0
ae20f349829255347587ffb643fde7b83515e906,"Generate for latest aas-core-meta 0fa34d1 (#207)

This patch is a re-recording of all the files for the latest
aas-core-meta.",Marko Ristin,marko.ristin@gmail.com,GitHub,noreply@github.com,2022-06-21 15:51:41+02:00,-7200,2022-06-21 15:51:41+02:00,-7200,True,False,"['setup.py', 'jsonization.cs', 'types.cs', 'verification.cs', 'visitation.cs', 'xmlization.cs', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'shacl-schema.ttl']",['f239231142c521bfa7adb289d14a6fe2fbb78237'],235,822,1057,9,0.2832369942196532,0.3969171483622351,0.6339113680154143
2080a4dc2008287dbe47afe1ceefca4f72b7fdfc,"Fix duplicate bracket in C# constructor (#208)

We erroneously added a double bracket in the constructor which doesn't
have any arguments.",Marko Ristin,marko.ristin@gmail.com,GitHub,noreply@github.com,2022-06-21 16:09:09+02:00,-7200,2022-06-21 16:09:09+02:00,-7200,True,False,"['_generate.py', 'types.cs', 'expected_types.cs', 'expected_types.cs']",['ae20f349829255347587ffb643fde7b83515e906'],6,1,7,4,1.0,1.0,0.0
742dd739ffcc00254552dd32d097b620a20e5ea8,"Remove generation of empty constructors in C# (#209)

Empty constructor is redundant. The compiler generates the same by
default.",Marko Ristin,marko.ristin@gmail.com,GitHub,noreply@github.com,2022-06-21 17:03:10+02:00,-7200,2022-06-21 17:03:10+02:00,-7200,True,False,"['_generate.py', 'types.cs', 'expected_types.cs', 'expected_types.cs']",['2080a4dc2008287dbe47afe1ceefca4f72b7fdfc'],36,16,52,4,0.0,0.0,0.0
75bb2088f82ff1b2e19bd62f03f495896f9a9aed,"Wire empty constructors in C# xmlization (#210)

We hard-wire for classes with empty constructors so that InspectCode
does not complain.",Marko Ristin,marko.ristin@gmail.com,GitHub,noreply@github.com,2022-06-21 17:33:13+02:00,-7200,2022-06-21 17:33:13+02:00,-7200,True,False,"['_generate.py', 'xmlization.cs']",['742dd739ffcc00254552dd32d097b620a20e5ea8'],145,173,318,2,0.0,0.3333333333333333,1.0
c984ec24939cc4417bacbe919ec19147ff5f6d8d,"Catch XML exceptions in C# xmlization (#211)

We need to catch ``System.Xml.XmlException``'s when de-serializing
primitive types, since they are thrown when there is suddenly an
unexpected element in the content.

So far we only caught ``System.FormatException`` which is thrown only if
the content does not conform to the expected type.",Marko Ristin,marko.ristin@gmail.com,GitHub,noreply@github.com,2022-06-24 12:00:18+02:00,-7200,2022-06-24 12:00:18+02:00,-7200,True,False,"['_generate.py', 'xmlization.cs']",['75bb2088f82ff1b2e19bd62f03f495896f9a9aed'],674,1179,1853,2,0.0,0.0,0.014251781472684086
1a9877627131a3003db63563fb92dc45f7fff701,"Update to aas-core-meta 11edba5 (#212)

We write snippets and re-record the test data for
[aas-core-meta 11edba5].

[aas-core-meta 11edba5]: https://github.com/aas-core-works/aas-core-meta/commit/11edba5",Marko Ristin,marko.ristin@gmail.com,GitHub,noreply@github.com,2022-06-24 12:13:49+02:00,-7200,2022-06-24 12:13:49+02:00,-7200,True,False,"['setup.py', 'verification.cs', 'reference_keys_and_type_equal.cs']",['c984ec24939cc4417bacbe919ec19147ff5f6d8d'],3,76,79,3,0.0,0.0,1.0
bc85d4efdad446a44928e430fa5c4f1e142a0521,"Fix missed re-recordings in 11a98776 (#213)

We missed to re-record and erroneously thought that the local CI passed,
which it did not.

This patch re-records the test data.",Marko Ristin,marko.ristin@gmail.com,GitHub,noreply@github.com,2022-06-24 13:06:41+02:00,-7200,2022-06-24 13:06:41+02:00,-7200,True,False,"['expected_symbol_table.txt', 'expected_symbol_table.txt']",['1a9877627131a3003db63563fb92dc45f7fff701'],26,90,116,2,,,
24690dfae25f9be58c4dc5fd71d7fa856b5804c9,"Make methods virtual in C# ``VisitorThrough`` (#214)

This is necessary so that we can override them.",Marko Ristin,marko.ristin@gmail.com,GitHub,noreply@github.com,2022-06-24 16:20:36+02:00,-7200,2022-06-24 16:20:36+02:00,-7200,True,False,"['_generate.py', 'visitation.cs']",['bc85d4efdad446a44928e430fa5c4f1e142a0521'],37,37,74,2,,,
20a146a41ec97b88b784858edfa4e8b48b87cd34,"Handle namespace in C# xmlization (#215)

We accept a namespace argument in the de-serialization of the XML data.
This is necessary if we are de-serializing a document with multiple
namespaces where ""our"" elements are prefixed or live beneath a
namespace.",Marko Ristin,marko.ristin@gmail.com,GitHub,noreply@github.com,2022-06-24 22:53:31+02:00,-7200,2022-06-24 22:53:31+02:00,-7200,True,False,"['_generate.py', 'xmlization.cs']",['24690dfae25f9be58c4dc5fd71d7fa856b5804c9'],1294,2682,3976,2,0.0010395010395010396,0.1632016632016632,0.0
e0afd916734b6a9f357e34760d67509527b8cd42,"Fix null handling in C# jsonization of lists (#216)

We forgot to return on errors which was revealed by unit tests generated
by aas-core-testgen.",Marko Ristin,marko.ristin@gmail.com,GitHub,noreply@github.com,2022-06-25 09:57:32+02:00,-7200,2022-06-25 09:57:32+02:00,-7200,True,False,"['_generate.py', 'jsonization.cs']",['20a146a41ec97b88b784858edfa4e8b48b87cd34'],0,85,85,2,0.0,0.0,1.0
b8fea4d875e01f1cd207ac4cf1098dd96a8700cd,"Generate ``OverXOrEmpty`` in C# (#217)

We generate for each optional list property a method ``OverXOrEmpty`` so
that the user can easily iterate over it without tedious explicit
non-null checks.",Marko Ristin,marko.ristin@gmail.com,GitHub,noreply@github.com,2022-06-28 18:25:11+02:00,-7200,2022-06-28 18:25:11+02:00,-7200,True,False,"['_generate.py', '_translate.py', 'types.cs']",['e0afd916734b6a9f357e34760d67509527b8cd42'],0,813,813,3,0.8913043478260869,0.8913043478260869,1.0
053b229d56b20e433a2be1f13a7445b9c2d7bb60,"Update to aas-core-meta 5f563af (#218)

We re-record the test data for [aas-core-meta 5f563af].

[aas-core-meta 5f563af]: https://github.com/aas-core-works/aas-core-meta/commit/5f563af",Marko Ristin,marko.ristin@gmail.com,GitHub,noreply@github.com,2022-06-29 09:29:13+02:00,-7200,2022-06-29 09:29:13+02:00,-7200,True,False,"['setup.py', 'jsonization.cs', 'types.cs', 'verification.cs', 'xmlization.cs', 'expected_symbol_table.txt', 'schema.json', 'expected_symbol_table.txt', 'rdf-ontology.ttl', 'shacl-schema.ttl', 'schema.xsd']",['b8fea4d875e01f1cd207ac4cf1098dd96a8700cd'],72,174,246,11,0.0,0.33783783783783783,0.7972972972972973
69ce435d7d7a9d7eff80aa8e4983617182ec1cbc,"Report only exception message in C# xmlization (#219)

We reported a full stack trace which also included file system paths in
the exception caught during C# xmlization. This makes it very confusing
for the user, as they do not care about the stack trace.

With this patch, we only return the ``Message`` of the exception.",Marko Ristin,marko.ristin@gmail.com,GitHub,noreply@github.com,2022-06-29 11:32:01+02:00,-7200,2022-06-29 11:32:01+02:00,-7200,True,False,"['_generate.py', 'xmlization.cs']",['053b229d56b20e433a2be1f13a7445b9c2d7bb60'],84,84,168,2,,,
459bac809c7cb97ecdd2c16e35134390df887e00,"Fix or disable PyCharm warnings (#220)

We go through all the files and fix manually PyCharm warnings.

We used PyCharm 2022.1.2 (Community Edition).",Marko Ristin,marko.ristin@gmail.com,GitHub,noreply@github.com,2022-06-29 12:22:21+02:00,-7200,2022-06-29 12:22:21+02:00,-7200,True,False,"['rist.xml', '__main__.py', 'common.py', 'common.py', '_generate.py', '_generate.py', '_generate.py', '_generate.py', '_common.py', '_inline.py', '_stringify.py', '_translate.py', '_types.py', 'construction.py', 'doc.py', 'type_inference.py', 'main.py', 'naming.py', '_rules.py', '_translate.py', '_types.py', '_parse.py', '_types.py', 'tree.py', '_description.py', 'specific_implementations.py', 'main.py']",['69ce435d7d7a9d7eff80aa8e4983617182ec1cbc'],83,154,237,27,1.0,0.0,1.0
8e3255b7084f64de359542772ce28a69d45c7190,"Re-format manually ``tests.infer_for_schema`` (#221)

There are many long statements which we had to break manually to make
them readable.",Marko Ristin,marko.ristin@gmail.com,GitHub,noreply@github.com,2022-06-29 16:59:32+02:00,-7200,2022-06-29 16:59:32+02:00,-7200,True,False,"['common.py', 'test_len_on_properties.py', 'test_len_on_self.py', 'test_patterns_on_properties.py', 'test_patterns_on_self.py']",['459bac809c7cb97ecdd2c16e35134390df887e00'],72,250,322,5,0.0,1.0,1.0
e88b8db6461c3bd40455a15d208d9923267a7a6c,"Rename ""symbol"" to ""our type"" (#222)

We rename the concept related to ""symbol"" to ""our type"". That is because
we plan to introduce constants in the symbol table. Therefore, ""symbol""
is a misnomer as all constants, verification functions and types are
""symbols"".

As ""our type"" is already used in type annotations
(``OurTypeAnnotation``), we renamed all ``symbol`` to ``our_type``.

This renaming produced some awkward names down the line (""our type
reference"") so we also renamed those classes and variables (*e.g.*,
""reference to our type"").",Marko Ristin,marko.ristin@gmail.com,GitHub,noreply@github.com,2022-06-29 18:26:30+02:00,-7200,2022-06-29 18:26:30+02:00,-7200,True,False,"['common.py', 'description.py', '_generate.py', '_generate.py', '_generate.py', '_generate.py', '_generate.py', '_generate.py', '_inline.py', '_len.py', '_types.py', '__init__.py', '_hierarchy.py', '_stringify.py', '_translate.py', '_types.py', 'construction.py', 'doc.py', 'rendering.py', 'type_inference.py', 'main.py', '__init__.py', '_stringify.py', '_translate.py', '_types.py', '_description.py', 'common.py', 'main.py', 'rdf.py', 'shacl.py', 'stringify.py', 'main.py', 'check_help_in_readme.py', 'check_init_and_setup_coincide.py', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_error.txt', 'test_description.py', 'common.py', 'test_constructor.py', 'test_translate.py', 'test_type_inference.py', 'test_types.py', 'test_parse.py']",['8e3255b7084f64de359542772ce28a69d45c7190'],3332,3396,6728,89,0.05172413793103448,0.43103448275862066,0.9137931034482759
d4b8de2aabd6ce0a148f72db56d909a7fb57c395,"Re-format manually for line width of 88 characters (#223)

We make a couple of minor reformats and renamings so that the code lines
fit to lines of 88 characters.

We left out URLs as they are since we would lose the ability to click on
them otherwise.",Marko Ristin,marko.ristin@gmail.com,GitHub,noreply@github.com,2022-06-29 18:40:57+02:00,-7200,2022-06-29 18:40:57+02:00,-7200,True,False,"['README.rst', '__init__.py', '_generate.py', '_stringify.py', '_translate.py', 'rendering.py', 'type_inference.py', 'main.py', '_translate.py', 'shacl.py', 'check_help_in_readme.py', 'setup.py', 'test_main.py', 'test_main.py', 'test_main.py']",['e88b8db6461c3bd40455a15d208d9923267a7a6c'],50,62,112,15,1.0,1.0,1.0
9a0b74b666f26f5304e6b0994e074d7e33d75940,"Introduce more of ``must_find_*`` methods (#224)

We look up our types in the symbol very often. Hence, we implement a
couple of helper methods, ``must_find_*`` to facilitate the typing
around the lookups.",Marko Ristin,marko.ristin@gmail.com,GitHub,noreply@github.com,2022-06-29 23:03:15+02:00,-7200,2022-06-29 23:03:15+02:00,-7200,True,False,"['_hierarchy.py', '_translate.py', '_types.py', '_types.py', 'test_description.py', 'common.py', 'test_translate.py', 'test_types.py']",['d4b8de2aabd6ce0a148f72db56d909a7fb57c395'],89,194,283,8,0.13793103448275862,1.0,1.0
58b16d9cb3d2e839cbcbc96852819b7a0b3bc575,"Update to aas-core-meta 93f0af2 (#225)

We adapt the test data to [aas-core-meta 93f0af2].

[aas-core-meta 93f0af2]: https://github.com/aas-core-works/aas-core-meta/commit/93f0af2",Marko Ristin,marko.ristin@gmail.com,GitHub,noreply@github.com,2022-06-30 10:22:07+02:00,-7200,2022-06-30 10:22:07+02:00,-7200,True,False,"['setup.py', 'jsonization.cs', 'stringification.cs', 'types.cs', 'verification.cs', 'reference_key_values_equal.cs', 'expected_symbol_table.txt', 'schema.json', 'expected_symbol_table.txt', 'rdf-ontology.ttl', 'schema.xsd']",['9a0b74b666f26f5304e6b0994e074d7e33d75940'],41,950,991,11,0.25396825396825395,1.0,1.0
634613346146fe13743795e13bfe7a20b30d777e,"Fix parsing of book URL and version (#228)

We wrongly wired the target and the value when parsing the assingment of
the book URL and version at the parse stage. This patch fixes the issue.",Marko Ristin,marko.ristin@gmail.com,GitHub,noreply@github.com,2022-07-06 10:59:27+02:00,-7200,2022-07-06 10:59:27+02:00,-7200,True,False,"['_translate.py', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt']",['58b16d9cb3d2e839cbcbc96852819b7a0b3bc575'],96,96,192,48,,,
741919e9f079a5331b0f5683fd358f34e51eaffe,"Fix tests of intermediate for external model paths (#229)

This is a minor fix that allows us to test against models outside of the
repository. For example, when we install aas-core-meta as editable
package in our virtual environment.",Marko Ristin,marko.ristin@gmail.com,GitHub,noreply@github.com,2022-07-06 17:46:37+02:00,-7200,2022-07-06 17:46:37+02:00,-7200,True,False,['test_translate.py'],['634613346146fe13743795e13bfe7a20b30d777e'],1,6,7,1,0.0,0.0,1.0
6b55dbca5ef24a56c8bd803c19f9de8309f96f94,"Introduce constants in symbol table (#230)

We introduce constants in our meta-model so that we can model constant
primitives and constant sets. Notably, this is necessary for various
constraints.

We updated aas-core-meta to already reflect this change, so we also
update the test data according to [aas-core-meta 5c6ac67].

[aas-core-meta 5c6ac67]: https://github.com/aas-core-works/aas-core-meta/commit/5c6ac67",Marko Ristin,marko.ristin@gmail.com,GitHub,noreply@github.com,2022-07-10 11:35:48+02:00,-7200,2022-07-10 11:35:48+02:00,-7200,True,False,"['__init__.py', '_generate.py', 'description.py', 'main.py', '_generate.py', '_generate.py', '__init__.py', '_inline.py', '_set.py', '_stringify.py', '_types.py', '__init__.py', '_stringify.py', '_translate.py', '_types.py', 'doc.py', 'rendering.py', 'type_inference.py', '__init__.py', '_rules.py', '_stringify.py', '_translate.py', '_types.py', 'tree.py', '_description.py', 'main.py', 'setup.py', 'constants.cs', 'jsonization.cs', 'stringification.cs', 'types.cs', 'verification.cs', 'category_or_default.cs', 'category_or_default.cs', 'concept_description_category_is_valid.cs', 'data_element_category_is_valid.cs', 'is_model_reference_to.cs', 'is_model_reference_to_referable.cs', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_error.txt', 'meta_model.py', 'expected_error.txt', 'meta_model.py', 'expected_error.txt', 'meta_model.py', 'expected_error.txt', 'meta_model.py', 'expected_error.txt', 'meta_model.py', 'expected_error.txt', 'meta_model.py', 'expected_error.txt', 'meta_model.py', 'schema.json', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_error.txt', 'expected_error.txt', 'meta_model.py', 'expected_error.txt', 'expected_error.txt', 'expected_error.txt', 'meta_model.py', 'expected_error.txt', 'meta_model.py', 'rdf-ontology.ttl', 'shacl-schema.ttl', 'stdout.txt', 'as_rdfs_range.ttl', 'owl_class.ttl', 'preamble.ttl', 'shape.ttl', 'preamble.ttl', 'url_prefix.txt', 'rdf-ontology.ttl', 'schema.xsd', 'test_main.py', 'test_len_on_properties.py', 'test_len_on_self.py', 'test_patterns_on_properties.py', 'test_patterns_on_self.py', 'test_property_in_set_of_enumeration_literals.py', 'test_property_in_set_of_primitives.py', 'test_main.py', 'test_main.py', 'test_main.py']",['741919e9f079a5331b0f5683fd358f34e51eaffe'],11107,8781,19888,164,0.05776699029126214,0.55,0.712135922330097
f698a1cd113089abe75d0e109b5b2a4a2ce7ee50,"Handle transpilation of AASd-121 to 128 (#231)

In this patch, we handle the following constructs in the invariants so
that we can transpile the constraints AASd-121 to 128 in V3RC02:

* Negation,
* Addition and subtraction,
* For-range iteration, and
* Index access.",Marko Ristin,marko.ristin@gmail.com,GitHub,noreply@github.com,2022-07-11 00:31:59+02:00,-7200,2022-07-11 00:31:59+02:00,-7200,True,False,"['_generate.py', 'type_inference.py', '_rules.py', '_translate.py', 'tree.py', 'pylint.rc', 'setup.py', 'verification.cs', 'expected_symbol_table.txt', 'expected_symbol_table.txt']",['6b55dbca5ef24a56c8bd803c19f9de8309f96f94'],118,2503,2621,10,0.2669735327963176,0.2819332566168009,0.9723820483314154
b944996eeb24278399a3197acc72fd31c1e8a3be,"Fix parsing for Python 3.9 and 3.10 (#232)

The remote CI failed in the previous patch for Python 3.9 and 3.10 due
to breaking changes in the ``ast`` module. This patch fixes the issue by
branching on the Python version.",Marko Ristin,marko.ristin@gmail.com,GitHub,noreply@github.com,2022-07-11 00:54:20+02:00,-7200,2022-07-11 00:54:20+02:00,-7200,True,False,"['aas-core-csharp-codegen.iml', 'misc.xml', '_rules.py']",['f698a1cd113089abe75d0e109b5b2a4a2ce7ee50'],11,28,39,3,0.0,0.0,1.0
a2ba2a5af680a515a1aebe701844ce886e1fe0aa,"Transpile general verification functions (#233)

We refactor the transpilation so that it works on general verification
functions, not only on pattern matching.

This is important in particular for code re-use in constraints, such as
``is_model_reference_to``.",Marko Ristin,marko.ristin@gmail.com,GitHub,noreply@github.com,2022-07-13 09:07:51+02:00,-7200,2022-07-13 09:07:51+02:00,-7200,True,False,"['transpilation.py', '_generate.py', '__init__.py', '_stringify.py', '_translate.py', '_types.py', 'type_inference.py', 'tree.py', 'main.py', 'setup.py', 'verification.cs', 'expected_symbol_table.txt', 'expected_error.txt', 'meta_model.py', 'expected_error.txt', 'meta_model.py', 'expected_symbol_table.txt', 'expected_stderr.txt']",['b944996eeb24278399a3197acc72fd31c1e8a3be'],1030,1685,2715,18,0.1327683615819209,0.3361581920903955,0.4209039548022599
8f878609e62545448d5a3848e3670d0ea91150d7,"Fix paragraph breaks in C# code generation (#235)

The paragraph breaks are hard to get correct, and we actually got them
completely wrong in the first iteration. This patch implements a much
more complex rendering of docutils nodes to C# HTML-like documentation
comments.",Marko Ristin,marko.ristin@gmail.com,GitHub,noreply@github.com,2022-07-22 22:37:59+02:00,-7200,2022-07-22 22:37:59+02:00,-7200,True,False,"['description.py', 'types.cs', 'verification.cs', 'test_description.py']",['a2ba2a5af680a515a1aebe701844ce886e1fe0aa'],639,1767,2406,4,0.2945054945054945,0.8263736263736263,0.9802197802197802
4bc2537bd2c67e4228029d7549430855cbc9ab3c,"Update test data to aas-core-meta e808e37 (#236)

We re-record the test data according to [aas-core-meta e808e37].

[aas-core-meta e808e37]: https://github.com/aas-core-works/aas-core-meta/commit/e808e37",Marko Ristin,marko.ristin@gmail.com,GitHub,noreply@github.com,2022-07-22 22:42:15+02:00,-7200,2022-07-22 22:42:15+02:00,-7200,True,False,"['setup.py', 'jsonization.cs', 'types.cs', 'verification.cs', 'xmlization.cs', 'expected_symbol_table.txt', 'schema.json', 'expected_symbol_table.txt', 'rdf-ontology.ttl', 'shacl-schema.ttl', 'schema.xsd']",['8f878609e62545448d5a3848e3670d0ea91150d7'],291,1319,1610,11,0.0,0.0,1.0
c2e638e41424bf97a0df19bf8cb76c73d570a0b6,"Fix error message in c# jsonization (#237)

We remove an unnecessary and utterly confusing trailing whitespace in an
error message in the generated C# code for JSON de/serialization.",Marko Ristin,marko.ristin@gmail.com,GitHub,noreply@github.com,2022-07-22 22:45:55+02:00,-7200,2022-07-22 22:45:55+02:00,-7200,True,False,"['_generate.py', 'jsonization.cs']",['4bc2537bd2c67e4228029d7549430855cbc9ab3c'],11,11,22,2,,,
f4ed1b3a723226230a2a70e977831a84bfe3a5df,"Make C# JSON de/serialization strict (#238)

So far, we ignored additional properties in JSON. This can lead to
unexpected data loss, and is also not consistent with XML, which accepts
no additional properties.

In this change, we reject all JSON data with unexpected additional
properties.",Marko Ristin,marko.ristin@gmail.com,GitHub,noreply@github.com,2022-07-23 01:00:35+02:00,-7200,2022-07-23 01:00:35+02:00,-7200,True,False,"['_generate.py', 'jsonization.cs']",['c2e638e41424bf97a0df19bf8cb76c73d570a0b6'],8434,10224,18658,2,0.0,0.06488781079442087,1.0
b6b3392eb2f37d6efa224c4cabd54bf9315f7e7e,"Fix usings in C# for opinionated-usings (#239)

We add [opinionated-usings] as a check on C# code for consistent and
readable using directives. This change makes sure the generated C# code
passes the tests.

[opinionated-usings]: https://github.com/mristin/opinionated-usings-csharp/",Marko Ristin,marko.ristin@gmail.com,GitHub,noreply@github.com,2022-07-27 12:23:23+02:00,-7200,2022-07-27 12:23:23+02:00,-7200,True,False,"['common.py', '_generate.py', '_generate.py', '_generate.py', '_generate.py', '_generate.py', '_generate.py', 'jsonization.cs', 'reporting.cs', 'stringification.cs', 'types.cs', 'verification.cs', 'xmlization.cs', 'expected_types.cs', 'expected_types.cs', 'expected_types.cs', 'expected_verification.cs', 'expected_verification.cs', 'expected_verification.cs', 'expected_verification.cs', 'expected_verification.cs', 'expected_verification.cs', 'expected_verification.cs', 'expected_verification.cs', 'expected_verification.cs', 'expected_verification.cs', 'expected_verification.cs', 'expected_verification.cs', 'expected_verification.cs', 'expected_verification.cs', 'expected_verification.cs', 'expected_verification.cs', 'expected_verification.cs', 'expected_verification.cs', 'expected_verification.cs', 'expected_verification.cs', 'expected_verification.cs']",['f4ed1b3a723226230a2a70e977831a84bfe3a5df'],104,175,279,37,0.19148936170212766,0.3404255319148936,0.46808510638297873
13551736e52a73e0c553b8f3c8d1a4e953edc6eb,"Fix mypy errors due to asttokens 2.0.8 (#242)

The dependency asttokens introduced type annotations in the version
2.0.8. This revealed a couple of typing errors in our code, which this
patch fixes.",Marko Ristin,marko.ristin@gmail.com,GitHub,noreply@github.com,2022-08-15 22:54:53+02:00,-7200,2022-08-15 22:54:53+02:00,-7200,True,False,"['main.py', '_translate.py', 'main.py', 'mypy.ini', 'precommit.py', 'requirements.txt', 'test_retree.py']",['b6b3392eb2f37d6efa224c4cabd54bf9315f7e7e'],5,21,26,7,0.3076923076923077,0.6923076923076923,0.6153846153846154
ad4a9eb3ca5348b30dfe16e653fbb3fda3d34c32,"Test explicitly for built-in functions (#241)

We add regression tests to check that unhandled built-in functions are
handled properly. Additionally, we check for C# verification in
conjunction with built-in functions so that we have a full end-to-end
test.",Marko Ristin,marko.ristin@gmail.com,GitHub,noreply@github.com,2022-08-15 23:03:08+02:00,-7200,2022-08-15 23:03:08+02:00,-7200,True,False,"['_translate.py', 'main.py', 'run_tests_with_rerecord.py', 'expected_verification.cs', 'model.py', 'expected_verification.cs', 'model.py', 'expected_error.txt', 'meta_model.py', 'expected_error.txt', 'meta_model.py', 'test_verification.py']",['13551736e52a73e0c553b8f3c8d1a4e953edc6eb'],15,267,282,12,0.5873015873015873,1.0,1.0
dac0ca182172c77ee77cda869fdf8d8ce66de67f,"Handle XML namespace from the meta-model (#243)

We expected the XML namespace to be specified in the meta-model (as
`__xml_namespace__`), and propagate it to code generation.",Marko Ristin,marko.ristin@gmail.com,GitHub,noreply@github.com,2022-08-17 19:52:31+02:00,-7200,2022-08-17 19:52:31+02:00,-7200,True,False,"['rist.xml', 'common.py', '_generate.py', '_stringify.py', '_translate.py', '_types.py', '_stringify.py', '_translate.py', '_types.py', 'main.py', 'setup.py', 'jsonization.cs', 'stringification.cs', 'types.cs', 'verification.cs', 'visitation.cs', 'xmlization.cs', 'model.py', 'model.py', 'model.py', 'model.py', 'model.py', 'model.py', 'model.py', 'model.py', 'model.py', 'model.py', 'model.py', 'model.py', 'model.py', 'model.py', 'model.py', 'model.py', 'model.py', 'model.py', 'model.py', 'model.py', 'model.py', 'model.py', 'model.py', 'model.py', 'model.py', 'model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'meta_model.py', 'meta_model.py', 'meta_model.py', 'meta_model.py', 'meta_model.py', 'meta_model.py', 'meta_model.py', 'meta_model.py', 'meta_model.py', 'meta_model.py', 'meta_model.py', 'meta_model.py', 'meta_model.py', 'meta_model.py', 'meta_model.py', 'meta_model.py', 'schema.json', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'meta_model.py', 'meta_model.py', 'meta_model.py', 'meta_model.py', 'meta_model.py', 'meta_model.py', 'meta_model.py', 'meta_model.py', 'meta_model.py', 'meta_model.py', 'meta_model.py', 'meta_model.py', 'meta_model.py', 'meta_model.py', 'meta_model.py', 'meta_model.py', 'meta_model.py', 'meta_model.py', 'meta_model.py', 'meta_model.py', 'meta_model.py', 'meta_model.py', 'meta_model.py', 'meta_model.py', 'meta_model.py', 'meta_model.py', 'meta_model.py', 'meta_model.py', 'meta_model.py', 'meta_model.py', 'meta_model.py', 'meta_model.py', 'meta_model.py', 'meta_model.py', 'meta_model.py', 'meta_model.py', 'meta_model.py', 'meta_model.py', 'meta_model.py', 'meta_model.py', 'meta_model.py', 'meta_model.py', 'meta_model.py', 'meta_model.py', 'meta_model.py', 'meta_model.py', 'meta_model.py', 'meta_model.py', 'meta_model.py', 'meta_model.py', 'meta_model.py', 'meta_model.py', 'meta_model.py', 'rdf-ontology.ttl', 'shacl-schema.ttl', 'meta_model.py', 'meta_model.py', 'expected_stderr.txt', 'meta_model.py', 'schema.xsd', 'test_description.py', 'test_len_on_properties.py', 'test_len_on_self.py', 'test_patterns_on_properties.py', 'test_patterns_on_self.py', 'test_property_in_set_of_enumeration_literals.py', 'test_property_in_set_of_primitives.py', 'test_constructor.py', 'test_hierarchy.py', 'test_translate.py', 'test_type_inference.py', 'test_types.py', 'test_parse.py']",['ad4a9eb3ca5348b30dfe16e653fbb3fda3d34c32'],5437,12937,18374,261,0.0728476821192053,0.16529801324503313,1.0
ab322c9956dea4e74117d4b753c230d6f76af242,"Update logic for min. length of 1 for lists (#244)

We update for [aas-core-meta 08f5bb1], which requires that
all lists are either null or at least have a length 1 (except for a few
exceptions).

We therefore have to consider a special case in SHACL schema generation
since SHACL does not distinguish between empty and null properties.

Finally, we update the test data to reflect [aas-core-meta 08f5bb1].

[aas-core-meta 08f5bb1]: https://github.com/aas-core-works/aas-core-meta/commit/08f5bb1",Marko Ristin,marko.ristin@gmail.com,GitHub,noreply@github.com,2022-08-19 12:45:58+02:00,-7200,2022-08-19 12:45:58+02:00,-7200,True,False,"['shacl.py', 'setup.py', 'verification.cs', 'expected_symbol_table.txt', 'empty_environment_with_optional_properties_empty.json', 'schema.json', 'expected_symbol_table.txt', 'empty_environment_with_optional_properties_empty.xml', 'schema.xsd']",['dac0ca182172c77ee77cda869fdf8d8ce66de67f'],96,4554,4650,9,0.0,0.0,0.9929328621908127
a08a1eb64d809eaafd9b5efab3f0c119e3182cf1,"Expose ``infer_for_schema._common`` as ``match`` (#245)

Downstream clients, such as aas-core-meta, need to also match
invariants. Therefore, we expose ``infer_for_schema._common`` as a
public module ``infer_for_schema.match`` so that this logic can be used
by clients as well.",Marko Ristin,marko.ristin@gmail.com,GitHub,noreply@github.com,2022-08-19 16:01:18+02:00,-7200,2022-08-19 16:01:18+02:00,-7200,True,False,"['__init__.py', '_len.py', '_pattern.py', '_set.py', 'match.py']",['ab322c9956dea4e74117d4b753c230d6f76af242'],16,22,38,5,,,
d094d42e2e9efd9bc741c9fa835526a16ebd5d42,"Update test data to aas-core-meta 0d96564 (#246)

We update the test data to the latest [aas-core-meta 0d96564].

[aas-core-meta 0d96564]: https://github.com/aas-core-works/aas-core-meta/commit/0d96564",Marko Ristin,marko.ristin@gmail.com,GitHub,noreply@github.com,2022-08-19 16:33:15+02:00,-7200,2022-08-19 16:33:15+02:00,-7200,True,False,"['setup.py', 'jsonization.cs', 'types.cs', 'verification.cs', 'visitation.cs', 'xmlization.cs', 'expected_symbol_table.txt', 'schema.json', 'expected_symbol_table.txt', 'rdf-ontology.ttl', 'shacl-schema.ttl', 'schema.xsd']",['a08a1eb64d809eaafd9b5efab3f0c119e3182cf1'],2818,9583,12401,12,0.031765805045157275,0.017128620367486764,0.8551853005294301
840c6796c98d08f5c2134ece50c24e72e084949e,"Update test data to aas-core-meta 1ae5aa0 (#247)

We update the test data using the latest [aas-core-meta 1ae5aa0].

[aas-core-meta 1ae5aa0]: https://github.com/aas-core-works/aas-core-meta/commit/1ae5aa0",Marko Ristin,marko.ristin@gmail.com,GitHub,noreply@github.com,2022-08-19 17:08:57+02:00,-7200,2022-08-19 17:08:57+02:00,-7200,True,False,"['setup.py', 'verification.cs', 'expected_symbol_table.txt', 'expected_symbol_table.txt']",['d094d42e2e9efd9bc741c9fa835526a16ebd5d42'],89,44,133,4,1.0,1.0,0.0
f0be0b392f9d2c482a0d976c55e0737dbb73b842,"Update to date specification invariants (#248)

Transpiling data specification invariants revelead a bug related to
constant sets in C#. Namely, the hash sets should operate on nullables
instead of non-nullables, as the former are references and the latter
are values in C#. We fix this in this change.

We also update the test data to [aas-core-meta 95e7dbf] which directly
make use of this change.

[aas-core-meta 95e7dbf]: https://github.com/aas-core-works/aas-core-meta/commit/95e7dbf",Marko Ristin,marko.ristin@gmail.com,GitHub,noreply@github.com,2022-08-19 20:05:43+02:00,-7200,2022-08-19 20:05:43+02:00,-7200,True,False,"['_generate.py', 'setup.py', 'constants.cs', 'jsonization.cs', 'stringification.cs', 'types.cs', 'verification.cs', 'data_specification_IEC_61360s_for_document_have_appropriate_data_type.cs', 'data_specification_IEC_61360s_for_property_or_value_have_appropriate_data_type.cs', 'data_specification_IEC_61360s_for_reference_have_appropriate_data_type.cs', 'data_specification_IEC_61360s_have_data_type.cs', 'data_specification_IEC_61360s_have_definition_at_least_in_english.cs', 'data_specification_IEC_61360s_have_value.cs', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'rdf-ontology.ttl']",['840c6796c98d08f5c2134ece50c24e72e084949e'],518,2255,2773,16,0.0024875621890547263,0.5771144278606966,1.0
adc148692978ecb4efec7d75b3304f8ec6c3f102,"Consider ``object`` a reserved keyword (#249)

We add the word ``object`` to a list of reserved keywords in the parse
stage since a conflict already happened with the security part of the
meta-model.",Marko Ristin,marko.ristin@gmail.com,GitHub,noreply@github.com,2022-08-21 15:43:33+02:00,-7200,2022-08-21 15:43:33+02:00,-7200,True,False,['_translate.py'],['f0be0b392f9d2c482a0d976c55e0737dbb73b842'],0,1,1,1,0.0,0.0,1.0
b8e378f70b0550411f9efcbd299b523baa5151df,"Enforce that invariants have a description (#250)

We enforce that all invariants have a human-readable description, which
we can directly include in the generated code. This is important for
programs facing end users, such as GUI editors, which need to report
back understandable verification messages.",Marko Ristin,marko.ristin@gmail.com,GitHub,noreply@github.com,2022-08-21 17:15:17+02:00,-7200,2022-08-21 17:15:17+02:00,-7200,True,False,"['_generate.py', '_types.py', '_translate.py', '_types.py', 'setup.py', 'verification.cs', 'expected_verification.cs', 'model.py', 'expected_verification.cs', 'model.py', 'expected_symbol_table.txt', 'meta_model.py', 'meta_model.py', 'meta_model.py', 'meta_model.py', 'schema.json', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'shacl-schema.ttl', 'expected_stderr.txt', 'schema.xsd', 'test_len_on_properties.py', 'test_len_on_self.py', 'test_patterns_on_properties.py', 'test_patterns_on_self.py', 'test_property_in_set_of_enumeration_literals.py', 'test_property_in_set_of_primitives.py', 'test_type_inference.py']",['adc148692978ecb4efec7d75b3304f8ec6c3f102'],1842,1236,3078,29,1.0,1.0,0.028368794326241134
af83c9c64069a900dfe13a58e6306786449f5c7b,"Unify ``model.py`` to ``meta_model.py`` in tests (#251)

Some tests defined the meta-model in a file ``model.py``, while the
majority of the tests used ``meta_model.py``.

We unify all the tests to use ``meta_model.py`` to avoid confusion and
facilitate searching.",Marko Ristin,marko.ristin@gmail.com,GitHub,noreply@github.com,2022-08-21 17:28:30+02:00,-7200,2022-08-21 17:28:30+02:00,-7200,True,False,"['meta_model.py', 'meta_model.py', 'meta_model.py', 'meta_model.py', 'meta_model.py', 'meta_model.py', 'meta_model.py', 'meta_model.py', 'meta_model.py', 'meta_model.py', 'meta_model.py', 'meta_model.py', 'meta_model.py', 'meta_model.py', 'meta_model.py', 'meta_model.py', 'meta_model.py', 'meta_model.py', 'meta_model.py', 'meta_model.py', 'meta_model.py', 'meta_model.py', 'meta_model.py', 'meta_model.py', 'meta_model.py', 'meta_model.py', 'test_structure.py', 'test_verification.py']",['b8e378f70b0550411f9efcbd299b523baa5151df'],2,2,4,28,,,
83414222ded19e28430a2ba61dc2738bf0e5522d,"Specify ``maxOccurs`` for optional elements in XSD (#252)

We specify ``maxOccurs`` of 1 for elements representing optional
properties. Even though the default value for ``maxOccurs`` is 1, this
change in XSD helps to avoid confusion for the less XSD-savvy readers.

Fixes #240.",Marko Ristin,marko.ristin@gmail.com,GitHub,noreply@github.com,2022-08-21 18:33:43+02:00,-7200,2022-08-21 18:33:43+02:00,-7200,True,False,"['main.py', 'schema.xsd']",['af83c9c64069a900dfe13a58e6306786449f5c7b'],84,85,169,2,0.0,0.0,1.0
163a890453e152271d4740b2b34bfe51ab44564e,"Update to aas-core-meta cccea93 (#253)

We re-generate the test data according to [aas-core-meta cccea93].

[aas-core-meta cccea93]: https://github.com/aas-core-works/aas-core-meta/commit/cccea93",Marko Ristin,marko.ristin@gmail.com,GitHub,noreply@github.com,2022-08-21 18:39:19+02:00,-7200,2022-08-21 18:39:19+02:00,-7200,True,False,"['setup.py', 'verification.cs', 'expected_symbol_table.txt', 'schema.json', 'expected_symbol_table.txt', 'shacl-schema.ttl', 'schema.xsd']",['83414222ded19e28430a2ba61dc2738bf0e5522d'],9,72,81,7,0.0,1.0,1.0
f9772cd3cefe39fc1d9ab11b328824133d531cb2,"Update test data to aas-core-meta 8d909e9 (#254)

We update the requirements to and re-record the test data for
[aas-core-meta 8d909e9].

[aas-core-meta 8d909e9]: https://github.com/aas-core-works/aas-core-codegen/commit/8d909e9",Marko Ristin,marko.ristin@gmail.com,GitHub,noreply@github.com,2022-08-25 12:15:06+02:00,-7200,2022-08-25 12:15:06+02:00,-7200,True,False,"['setup.py', 'jsonization.cs', 'types.cs', 'verification.cs', 'xmlization.cs', 'expected_symbol_table.txt', 'schema.json', 'expected_symbol_table.txt', 'rdf-ontology.ttl', 'shacl-schema.ttl', 'schema.xsd']",['163a890453e152271d4740b2b34bfe51ab44564e'],71,213,284,11,0.0,0.0,1.0
d6de8b5f65ad711884517052f89cdb3d787139d0,"Use XML namespace in RDF and SHACL generation (#255)

For consistency, we use the ``__xml_namespace__`` in RDF+SHACL so that
the namespace are consistent across different schemas.",Marko Ristin,marko.ristin@gmail.com,GitHub,noreply@github.com,2022-08-25 12:37:42+02:00,-7200,2022-08-25 12:37:42+02:00,-7200,True,False,"['_types.py', 'main.py', 'rdf.py', 'shacl.py', 'rdf-ontology.ttl', 'shacl-schema.ttl', 'preamble.ttl', 'preamble.ttl', 'url_prefix.txt']",['f9772cd3cefe39fc1d9ab11b328824133d531cb2'],873,843,1716,9,0.0,0.0,0.0
2c6adc069c618c7a3512821eead4b9df712f3701,"Create test empty snippets for RDF+SHACL (#256)

Currently, RDF+SHACL generation does not depend on any snippets, which
will probably change in the near future. Therefore, we keep the logic
for reading the snippets from a directory, and create an empty snippets
directory in the test data.

We mistakenly broke the tests since Git automatically removed empty
directories.",Marko Ristin,marko.ristin@gmail.com,GitHub,noreply@github.com,2022-08-25 12:46:17+02:00,-7200,2022-08-25 12:46:17+02:00,-7200,True,False,['.gitignore'],['d6de8b5f65ad711884517052f89cdb3d787139d0'],0,2,2,1,,,
011c5516b5735c13735cce3581349ae19cf0ae3c,"Ignore hidden files in snippets (#257)

We ignore files starting with a dot (""."") when listing the snippets.
This is important, so that special files such as ``.gitignore`` are not
included in the snippets.",Marko Ristin,marko.ristin@gmail.com,GitHub,noreply@github.com,2022-08-25 12:54:09+02:00,-7200,2022-08-25 12:54:09+02:00,-7200,True,False,['specific_implementations.py'],['2c6adc069c618c7a3512821eead4b9df712f3701'],0,6,6,1,0.0,0.0,1.0
ce71a8f76bf0a0797880099e6ddcaaa6dbaf3d50,"Use XML namespace in JSON schema (#258)

We set the identifier of the JSON schema to match the XML namespace for
consistency with other schemas.",Marko Ristin,marko.ristin@gmail.com,GitHub,noreply@github.com,2022-08-25 12:54:43+02:00,-7200,2022-08-25 12:54:43+02:00,-7200,True,False,"['main.py', 'schema.json', 'Lang_string_set.json', 'schema_base.json']",['011c5516b5735c13735cce3581349ae19cf0ae3c'],35,17,52,4,0.0,0.0,1.0
f73fa6383605a7346c5a23ad95792fe34a83ed66,"Sort all enumeration literals in JSON schema (#259)

We sort all the enumeration literals in JSON schema so that it is easier
to diff two versions of the schema.",Marko Ristin,marko.ristin@gmail.com,GitHub,noreply@github.com,2022-08-25 12:56:48+02:00,-7200,2022-08-25 12:56:48+02:00,-7200,True,False,"['main.py', 'schema.json']",['ce71a8f76bf0a0797880099e6ddcaaa6dbaf3d50'],60,60,120,2,,,
6bb8ccfcabd08192c9f35d384d60bf726dc85635,"Make ``xs:`` prefix consistent in XSD/RDF/SHACL (#260)

We used ``xsd:`` in RDF+SHACL and ``xs:`` in XSD. This change makes it
uniform, and we use ``xs:`` everywhere.",Marko Ristin,marko.ristin@gmail.com,GitHub,noreply@github.com,2022-08-25 15:23:41+02:00,-7200,2022-08-25 15:23:41+02:00,-7200,True,False,"['common.py', 'rdf.py', 'shacl.py', 'rdf-ontology.ttl', 'shacl-schema.ttl']",['f73fa6383605a7346c5a23ad95792fe34a83ed66'],411,411,822,5,,,
71323f31da979fd0f8c740fec013a103dcfaebab,"Update test data to aas-core-meta 1df1729 (#261)

We update the development requirements to and re-record the test data
for [aas-core-meta 1df1729].

So far, we referenced the properties as properties of a concrete class
in the documentation instead of referencing them to the most abstract
class which defines them.

This creates problems with [docfx] in C# so we reference the
properties as properties of the abstract class.

We also update the implementation-specific snippets for C# which also
referenced the properties in the concrete class instead of the abstract
one.

[aas-core-meta 1df1729]: https://github.com/aas-core-works/aas-core-meta/commit/1df1729
[docfx]: https://dotnet.github.io/docfx/",Marko Ristin,marko.ristin@gmail.com,GitHub,noreply@github.com,2022-08-26 14:21:46+02:00,-7200,2022-08-26 14:21:46+02:00,-7200,True,False,"['setup.py', 'types.cs', 'category_or_default.cs', 'expected_symbol_table.txt']",['6bb8ccfcabd08192c9f35d384d60bf726dc85635'],20,20,40,4,,,
7cfaf7971bc279c46fd04ca54fd66f816d441d74,"Update to aas-core-meta 95055a5 (#262)

We update the test data to [aas-core-meta 95055a5]. Notably, we had to
find & replace the namespace in the XML examples manually as the XML
namespaces changed in [aas-core-meta b518b3b].

Additionally, we removed the snippet for ``Lang_string_set`` as it was
not used by the codegen anymore.

[aas-core-meta 95055a5]: https://github.com/aas-core-works/aas-core-meta/commit/95055a5
[aas-core-meta b518b3b]: https://github.com/aas-core-works/aas-core-meta/commit/b518b3b",Marko Ristin,marko.ristin@gmail.com,GitHub,noreply@github.com,2022-09-01 10:50:16+02:00,-7200,2022-09-01 10:50:16+02:00,-7200,True,False,"['setup.py', 'stringification.cs', 'types.cs', 'xmlization.cs', 'expected_symbol_table.txt', 'schema.json', 'expected_symbol_table.txt', 'rdf-ontology.ttl', 'shacl-schema.ttl', 'minimal_asset_administration_shell.xml', 'minimal_concept_description.xml', 'empty_environment_with_optional_properties_missing.xml', 'minimal_submodel.xml', 'minimal_property.xml', 'property_with_id_short.xml', 'submodel_with_two_submodel_elements.xml', 'schema.xsd', 'Lang_string_set.xml', 'root_element.xml']",['71323f31da979fd0f8c740fec013a103dcfaebab'],835,815,1650,19,,,
075630efd2f421779eb9e3735ce56ea183a43c53,"Hard-wire ``Lang_string`` in RDF+SHACL (#263)

We hard-wire the handling of the class ``Lang_string`` in RDF+SHACL, and
represent it as the native ``rdf:langString``.

Admittedly, this is hacky. We could have made the class ``Lang_string``
implementation-specific and defined its ``rdfs:range`` manually as
a snippet.

However, we decided against that as such a design would force us to
define ``langString`` for every language and schema which do not
natively support it, write custom data generation methods *etc.* Given
that RDF+SHACL codegen is one out of many code generators we leave the
other code generators and test data generators as simple as possible,
and make the RDF+SHACL code generator a bit hacky in return.",Marko Ristin,marko.ristin@gmail.com,GitHub,noreply@github.com,2022-09-01 11:51:03+02:00,-7200,2022-09-01 11:51:03+02:00,-7200,True,False,"['common.py', 'rdf.py', 'shacl.py', 'rdf-ontology.ttl', 'shacl-schema.ttl']",['7cfaf7971bc279c46fd04ca54fd66f816d441d74'],55,58,113,5,0.0,0.0,0.3333333333333333
d8bc392f578728e2512a9177a66e066e579785dd,"Represent bytes as ``base64Binary`` in RDF+SHACL (#264)

So far, we represented byte arrays as ``xs:byte`` in RDF+SHACL. This is
wrong as RDF follows XML. Hence, we fix the range of byte arrays to
``xs:base64Binary``, just as in XSD.",Marko Ristin,marko.ristin@gmail.com,GitHub,noreply@github.com,2022-09-01 12:00:55+02:00,-7200,2022-09-01 12:00:55+02:00,-7200,True,False,"['common.py', 'rdf-ontology.ttl', 'shacl-schema.ttl']",['075630efd2f421779eb9e3735ce56ea183a43c53'],3,3,6,3,,,
95320c38a13ce2d9830609463f0b0d9779daea42,"Hard-wirte `Value_data_type` to `xs:anySimpleType` (#265)

In XSD, RDF and SHACL, ``Value_data_type`` should be represented as
``xs:anySimpleType`` instead of a string. We hard-wire how we represent it
in XSD and RDF+SHACL schema generators.

Similar to ``Lang_string``, this hard-wiring is hacky. We could have made
the class ``Value_data_type`` implementation-specific and defined it
manually as a snippet.

However, we decided against that. This would be a major hurdle for
other code and test data generators (which can treat ``Value_data_type``
simply as string). Therefore, we make the XML and RDF+SHACL schema
generators a bit more hacky instead of complicating the other
generators.

If in the future, for whatever reason, the semantic of ``Value_data_type``
changes (or the type is renamed), be careful to maintain backwards
compatibility! You probably want to distinguish different versions
of the meta-model and act accordingly. At that point, it might also make
sense to refactor these schema generators to separate repositories, and
fix them to a particular range of meta-model versions.

This change addresses the following issue:
https://github.com/admin-shell-io/aas-specs/issues/210",Marko Ristin,marko.ristin@gmail.com,GitHub,noreply@github.com,2022-09-01 12:53:29+02:00,-7200,2022-09-01 12:53:29+02:00,-7200,True,False,"['common.py', 'main.py', 'rdf.py', 'shacl.py', 'main.py', 'rdf-ontology.ttl', 'shacl-schema.ttl', 'schema.xsd']",['d8bc392f578728e2512a9177a66e066e579785dd'],81,207,288,8,0.0,0.6363636363636364,0.8181818181818182
b33ee5917aed5337a0cafdfb5208634fac78b2c2,"Map literals by value in intermediate layer (#266)

We map the enumeration literals by their values to allow for quick
lookups. While we do not use this functionality in aas-core-codegen, it
is very useful for the downstream code such as aas-core3.0rc02-testgen.",Marko Ristin,marko.ristin@gmail.com,GitHub,noreply@github.com,2022-09-01 17:02:53+02:00,-7200,2022-09-01 17:02:53+02:00,-7200,True,False,"['_stringify.py', '_types.py', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt']",['95320c38a13ce2d9830609463f0b0d9779daea42'],2,39,41,5,0.0,1.0,0.25
295a211d62f7ab6b471d6a149e4ea9dc2d159ba1,"Undo `anySimpleType` in RDF (#267)

We undo the pull request #265 since RDF and SHACL can not deal with
`xs:anySimpleType`.

Please see this comment on [issue 210 of admin-shell-io/aas-specs].

[issue 210 of admin-shell-io/aas-specs]: https://github.com/admin-shell-io/aas-specs/issues/210#issuecomment-1234331148",Marko Ristin,marko.ristin@gmail.com,GitHub,noreply@github.com,2022-09-01 17:37:16+02:00,-7200,2022-09-01 17:37:16+02:00,-7200,True,False,"['common.py', 'rdf.py', 'shacl.py', 'rdf-ontology.ttl', 'shacl-schema.ttl']",['b33ee5917aed5337a0cafdfb5208634fac78b2c2'],73,10,83,5,1.0,1.0,0.6666666666666666
2588bf58ba52be7c62e10d408153aa308b8566d5,"Update test data to aas-core-meta 931b355 (#268)

We update the development requirements to and re-record the test data
for [aas-core-meta 931b355].

[aas-core-meta 931b355]: https://github.com/aas-core-works/aas-core-meta/commit/931b355",Marko Ristin,marko.ristin@gmail.com,GitHub,noreply@github.com,2022-09-02 19:09:48+02:00,-7200,2022-09-02 19:09:48+02:00,-7200,True,False,"['setup.py', 'stringification.cs', 'types.cs', 'expected_symbol_table.txt', 'schema.json', 'expected_symbol_table.txt', 'schema.xsd']",['295a211d62f7ab6b471d6a149e4ea9dc2d159ba1'],8,8,16,7,,,
5ae9681632477852bda9b7ced18730a22b6492bd,"Restrict value data types in XML (#269)

We hard-code the member types which are allowed as `Value_data_type`.
This is really hacky -- as we iterate over concrete enumeration from the
model. If the model changes, and provides no ``Data_type_def_XSD`` or
``Value_data_type`` changes the semantics *etc.*, the generator for XML
schema is messed up.

Yet, we deliberately decided to keep other generators simple, and make
XML generator hacky for this particular pain point.

If in the future, for whatever reason, the semantic of
``Value_data_type`` changes (or the type is renamed), be careful to
maintain backwards compatibility here! You probably want to
distinguish different versions of the meta-model and act accordingly.
At that point, it might also make sense to refactor this schema
generator to a separate repository, and fix it to a particular range of
meta-model versions.",Marko Ristin,marko.ristin@gmail.com,GitHub,noreply@github.com,2022-09-02 19:15:22+02:00,-7200,2022-09-02 19:15:22+02:00,-7200,True,False,"['main.py', 'schema.xsd', 'test_main.py']",['2588bf58ba52be7c62e10d408153aa308b8566d5'],11,66,77,3,0.0,0.0,1.0
16d1aa859e28b3ed13b2eb52b8b892f43341f618,"Restrict `Value_data_type` to `xs:string` in XSD (#270)

We hard-wire the constrained primitive `Value_data_type` to a simple
type with `xs:string` restriction in the XSD generator.

Previously, we hard-wired it to a list corresponding to
`Data_type_def_XSD`. This list, however, is only compatible with XSD 1.1
and breaks XSD 1.0. Since the effect of the restriction is identical, we
opt for compatibility with XSD 1.0.

See also the important note in the commit [5ae9681] regarding how hacky
this whole hard-wiring is. In the near future, you should re-consider to
refactor the XSD generator out of this repository and pin it to a range
of AAS meta-model versions.

[5ae9681]: https://github.com/aas-core-works/aas-core-codegen/commit/5ae9681632477852bda9b7ced18730a22b6492bd",Marko Ristin,marko.ristin@gmail.com,GitHub,noreply@github.com,2022-09-07 09:38:50+02:00,-7200,2022-09-07 09:38:50+02:00,-7200,True,False,"['main.py', 'schema.xsd', 'test_main.py']",['5ae9681632477852bda9b7ced18730a22b6492bd'],12,4,16,3,1.0,1.0,0.0
c0c5a78739fb83d0fd34a52233ffc653c761f344,"Fix undone line-breaks in interpolated strings (#271)

Black reformatted back a lot of line breaks in interpolated strings.
This makes the string literals barely readable, so we join the adjacent
string literals for better readability.",Marko Ristin,marko.ristin@gmail.com,GitHub,noreply@github.com,2022-09-15 11:23:16+02:00,-7200,2022-09-15 11:23:16+02:00,-7200,True,False,"['_generate.py', '_generate.py', '_stringify.py', '_stringify.py', '_translate.py', 'construction.py', '_parse.py', 'main.py', 'test_structure.py', 'test_verification.py', 'test_translate.py', 'test_retree.py']",['16d1aa859e28b3ed13b2eb52b8b892f43341f618'],14,19,33,12,0.0,1.0,1.0
78bd15c9309a9da00fb9032fe656bc4f1edfc4fd,"Capture original and in-lined construction (#272)

Since we now generate the code also in languages which allow
multiple-inheritance (Python), we have to capture the original
constructor statements, besides the in-line statements we captured for
the languages without multiple-inheritance (at this moment, C#).",Marko Ristin,marko.ristin@gmail.com,GitHub,noreply@github.com,2022-09-17 08:02:29+02:00,-7200,2022-09-17 08:02:29+02:00,-7200,True,False,"['_generate.py', '_stringify.py', '_translate.py', '_types.py', 'construction.py', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'test_translate.py']",['c0c5a78739fb83d0fd34a52233ffc653c761f344'],22,909,931,20,0.5882352941176471,0.9411764705882353,0.8823529411764706
a754de75469fc5d48d1566015d38bae76c8a7571,"Update test data to aas-core-meta e63c0c9 (#274)

We update the development requirements to and re-record the test data
for [aas-core-meta e63c0c9].

[aas-core-meta e63c0c9]: https://github.com/aas-core-works/aas-core-meta/commit/e63c0c9",Marko Ristin,marko@ristin.ch,GitHub,noreply@github.com,2022-10-28 17:09:51+02:00,-7200,2022-10-28 17:09:51+02:00,-7200,True,False,"['setup.py', 'verification.cs', 'expected_symbol_table.txt', 'expected_symbol_table.txt']",['78bd15c9309a9da00fb9032fe656bc4f1edfc4fd'],13,15,28,4,,,
4bec16a04542e663c5a1773464f079fcd09ebbb6,"Fix references in intermediate (#275)

We fix minor errors in the references in the sphinx docs of the
intermediate module.",Marko Ristin,marko@ristin.ch,GitHub,noreply@github.com,2022-10-28 17:39:45+02:00,-7200,2022-10-28 17:39:45+02:00,-7200,True,False,"['_hierarchy.py', '_translate.py']",['a754de75469fc5d48d1566015d38bae76c8a7571'],2,2,4,2,,,
a2ec3fdc06414f7c1e454817fc8c82bcaa6e6a48,"Move text re-flowing outside C# generator (#276)

We move the function to re-flow text to a line width outside of the
generator for C# SDK into `aas_core_codegen.common` so that other
clients (such as future Python SDK generator) can also use it.",Marko Ristin,marko@ristin.ch,GitHub,noreply@github.com,2022-10-28 17:50:57+02:00,-7200,2022-10-28 17:50:57+02:00,-7200,True,False,"['common.py', '_generate.py', 'test_verification.py']",['4bec16a04542e663c5a1773464f079fcd09ebbb6'],171,80,251,3,0.6470588235294118,0.014705882352941176,0.0
87d108974c6ff378e99292449db3c27673618f1f,"Restore tests for re-flowing of text (#277)

We restore the tests previously living in
`tests.csharp.test_verification` to `tests.test_common`. This was a
mistake in the previous commit (#a2ec3fdc).",Marko Ristin,marko@ristin.ch,GitHub,noreply@github.com,2022-10-28 17:55:35+02:00,-7200,2022-10-28 17:55:35+02:00,-7200,True,False,['test_common.py'],['a2ec3fdc06414f7c1e454817fc8c82bcaa6e6a48'],0,94,94,1,0.3384615384615385,1.0,1.0
71f91b08ffa52e76fc4e54148d11c10f12fc19ef,"Fix C# minor issues while working on Python SDK (#278)

We collect a couple of minor fixes into a single patch. The issues were
detected while we were working on Python SDK and revising the generated
C# SDK code.",Marko Ristin,marko@ristin.ch,GitHub,noreply@github.com,2022-10-28 18:02:18+02:00,-7200,2022-10-28 18:02:18+02:00,-7200,True,False,"['common.py', 'description.py', '_generate.py', '_generate.py', 'transpilation.py', 'unrolling.py', 'reporting.cs']",['87d108974c6ff378e99292449db3c27673618f1f'],11,27,38,7,0.25,1.0,1.0
12635d849198581392bc2b47b0c1cf364452556f,"Fix C# snippets after working on Python SDK (#279)

We discovered a couple of (minor) bugs in the code while we were working
on the generator for Python SDK. This patch includes the fixes, and also
harmonizes the names with the (future) Python SDK for clarity.",Marko Ristin,marko@ristin.ch,GitHub,noreply@github.com,2022-10-28 18:11:15+02:00,-7200,2022-10-28 18:11:15+02:00,-7200,True,False,"['data_specification_IEC_61360s_have_definition_at_least_in_english.cs', 'is_xs_date_time_stamp_utc.cs', 'submodel_element_is_of_type.cs']",['71f91b08ffa52e76fc4e54148d11c10f12fc19ef'],10,12,22,3,0.0,1.0,1.0
4a4695cc2bbfb06fa43350b52238e5b951142281,"Add generator for Python SDK (#280)

We add a code generator for Python SDK including its test data for
aas-core-meta V3RC02.",Marko Ristin,marko@ristin.ch,GitHub,noreply@github.com,2022-10-29 11:44:20+02:00,-7200,2022-10-29 11:44:20+02:00,-7200,True,False,"['rist.xml', 'main.py', '__init__.py', '__init__.py', '_generate.py', 'common.py', '__init__.py', '_generate.py', 'description.py', '__init__.py', '_generate.py', 'main.py', 'naming.py', '__init__.py', '_generate.py', '__init__.py', '_generate.py', 'transpilation.py', 'unrolling.py', '__init__.py', '_generate.py', '__init__.py', '_generate.py', 'precommit.py', 'run_tests_with_rerecord.py', 'verification.cs', 'is_model_reference_to.cs', 'is_model_reference_to_referable.cs', 'common.py', 'constants.py', 'jsonization.py', 'stdout.txt', 'stringification.py', 'types.py', 'verification.py', 'xmlization.py', 'category_or_default.py', 'category_or_default.py', 'value_type_or_default.py', 'kind_or_default.py', 'kind_or_default.py', 'order_relevant_or_default.py', 'data_specification_IEC_61360s_for_document_have_appropriate_data_type.py', 'data_specification_IEC_61360s_for_property_or_value_have_appropriate_data_type.py', 'data_specification_IEC_61360s_for_reference_have_appropriate_data_type.py', 'data_specification_IEC_61360s_have_data_type.py', 'data_specification_IEC_61360s_have_definition_at_least_in_english.py', 'data_specification_IEC_61360s_have_value.py', 'extension_names_are_unique.py', 'id_shorts_are_unique.py', 'is_xs_date_time_stamp_utc.py', 'lang_strings_have_unique_languages.py', 'properties_or_ranges_have_value_type.py', 'qualifier_types_are_unique.py', 'reference_key_values_equal.py', 'submodel_element_is_of_type.py', 'submodel_elements_have_identical_semantic_ids.py', 'value_consistent_with_xsd_type.py', 'qualified_module_name.txt', '__init__.py', 'test_common.py', 'test_main.py', 'test_xml_playground.py']",['12635d849198581392bc2b47b0c1cf364452556f'],52,72730,72782,63,0.19263766243089955,0.5724387967549717,0.7920705003948596
46ddb38f33e9d068572520c15c3ccdb460a17ed3,"Sort out handling of reference paths (#281)

Previously, due to ignorance, we annotated references with different
prefixes (attributes with ``~`` and classes and constants with ``.``).
Eventually, we learned more about Sphinx and how it deals with
references (see [1]).

In this change, we sort out the referencing and make it a bit clearer:

* attributes, classes and constants must be references as-are,
* appearance prefixes ``!`` and ``~`` are ignored (as target languages
  usually do not work like Sphinx), and
* relaxed qualified names (references prefixed with a ``.``) are
  disallowed as we can only resolve references *within* the meta-model
  and not outside it.

The unit tests are expected to fail as we have to update aas-core-meta
after this change to avoid aas-core-meta's unit tests to fail.

[1]: https://www.sphinx-doc.org/en/master/usage/restructuredtext/roles.html#xref-syntax",Marko Ristin,marko@ristin.ch,GitHub,noreply@github.com,2022-10-29 21:15:02+02:00,-7200,2022-10-29 21:15:02+02:00,-7200,True,False,"['_translate.py', 'expected_symbol_table.txt', 'test_description.py', 'test_translate.py']",['4a4695cc2bbfb06fa43350b52238e5b951142281'],368,404,772,4,0.0,0.7241379310344828,0.9310344827586207
1f8e5e1f3e1e36d00b3886a119ab12a2df72cf27,"Fix XPaths in C# xmlization exceptions (#282)

We did not produce the correct XPaths in xmlization exceptions, but this
went unnoticed as the current XPaths resembled the correct ones.

This patch prepends the necessary element names, so that now the
exceptions can be correctly traced in the problematic XML documents.

Addresses
https://github.com/aas-core-works/aas-core3.0rc02-csharp/issues/68.",Marko Ristin,marko@ristin.ch,GitHub,noreply@github.com,2022-10-29 22:15:57+02:00,-7200,2022-10-29 22:15:57+02:00,-7200,True,False,"['_generate.py', 'xmlization.cs']",['46ddb38f33e9d068572520c15c3ccdb460a17ed3'],1,439,440,2,0.0,0.06205250596658711,0.06205250596658711
b530704bfa23536ccf04852137de768c6d56d2e2,"Make remote CI work again (#283)

We only considered excludes in the ``--overwrite`` mode of the
pre-commit checks, but forgot to include them also in the non-invasive
checks as well. This patch fixes the issue, and the CI runs again.

A minor pylint issue (unused import) had not been detected before, but
now gets detected on the remote server, so we also remove this unused
import.

Additionally, locally we installed the new aas-core-meta version, but we
mistakenly did not update it in setup.py. In this patch, we update to
the latest aas-core-meta version 3ffe727.",Marko Ristin,marko@ristin.ch,GitHub,noreply@github.com,2022-10-29 23:04:02+02:00,-7200,2022-10-29 23:04:02+02:00,-7200,True,False,"['README.rst', 'main.py', 'precommit.py', 'setup.py']",['1f8e5e1f3e1e36d00b3886a119ab12a2df72cf27'],5,5,10,4,,,
4ab182e74699dea23a6dd8efb8ed715a14f1e44d,"Update test data to aas-core-meta b2d1230 (#284)

We update the development requirements to and re-record the test data
for [aas-core-meta b2d1230].

[aas-core-meta b2d1230]: https://github.com/aas-core-works/aas-core-meta/commit/b2d1230",Marko Ristin,marko@ristin.ch,GitHub,noreply@github.com,2022-10-30 13:58:16+01:00,-3600,2022-10-30 13:58:16+01:00,-3600,True,False,"['setup.py', 'verification.cs', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'verification.py']",['b530704bfa23536ccf04852137de768c6d56d2e2'],9,9,18,5,,,
71f0f097c6ca8565becf9f66e037ddd85783d56b,"Update test data to aas-core-meta a8e6621

We update the development requirements to and re-record the test data
for [aas-core-meta a8e6621].

[aas-core-meta a8e6621]: https://github.com/aas-core-works/aas-core-meta/commit/a8e6621",Marko Ristin,marko.ristin@gmail.com,Marko Ristin,marko.ristin@gmail.com,2022-10-30 15:06:40+01:00,-3600,2022-10-30 15:06:40+01:00,-3600,True,False,"['setup.py', 'verification.cs', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'verification.py']",['4ab182e74699dea23a6dd8efb8ed715a14f1e44d'],9,9,18,5,,,
3fea5b26a35f3d2686cf39ce50ada2d61c21388d,"Fix escaping in XML serialization in Python (#285)

We mistakenly escape an ampersand to ``&amp`` instead of ``&amp;`` (mind
the semi-colon), which causes XML errors in de-serialization.

The mistake went unnoticed due to a bug in the unit test code where the
examples were not globbed recursively, but only at the top-level example
directory.",Marko Ristin,marko@ristin.ch,GitHub,noreply@github.com,2022-10-30 15:30:56+01:00,-3600,2022-10-30 15:30:56+01:00,-3600,True,False,"['_generate.py', 'xmlization.py']",['71f0f097c6ca8565becf9f66e037ddd85783d56b'],2,2,4,2,,,
e2a7a8061e1b17b985f5e0d860295ccb27fc2f70,"Fix validation of XML types in Python (#286)

Due to a glitch in the unit test code of the Python SDK, we did not test
the handling of XML values properly. The examples were not globbed
recursively, but only at the top-level example directory.

In this patch, we make a couple of minor changes which now fixes the
test cases so that the unit tests pass:

* All matching functions (``matches_*``) return a boolean, but we
  checked for ``None``, which basically invalidated the checks.
* We use a short regular expression to parse dates. The previous code
  based on ``.split('-')`` was too error prone.
* We did not properly check for infinity in ``xs:float``'s. After this
  change, we check for inifinity just like for ``xs::double``.",Marko Ristin,marko@ristin.ch,GitHub,noreply@github.com,2022-10-30 15:38:26+01:00,-3600,2022-10-30 15:38:26+01:00,-3600,True,False,"['verification.py', 'is_xs_date_time_stamp_utc.py', 'value_consistent_with_xsd_type.py']",['3fea5b26a35f3d2686cf39ce50ada2d61c21388d'],40,96,136,3,0.0,0.0,1.0
b13f75b4fc3313dd3fdec1dd52bf064ea2468d91,"Sync naming with the published schemas for V3RC02 (#287)

Unfortunately, we had a bug in aas-core-codegen e2a7a806 (2022-10-30)
and prior versions where we generated the names for JSON and RDF
schemas based on a hard-wired list of abbreviations in
*aas-core-codegen* instead of relying on the naming in aas-core-meta.
This list has not been updated before publishing the schemas, so we
have to stick with the unexpected casing in the names. To maintain
the compatibility with the schemas, we allow for capitalization of
certain abbreviations where uppercase would be expected. Concretely,
this was the case with abbreviations ""AAS"" and ""XSD"".

We remove the hard-wired list in aas-core-codegen (this repository).
Additionally, we re-visit the naming algorithms and make them more
robust towards the input from aas-core-meta.

To regenerate the test data accordingly, we update to
[aas-core-meta d180dbb], which has the naming fixed.

[aas-core-meta d180dbb]: https://github.com/aas-core-works/aas-core-meta/commit/d180dbb",Marko Ristin,marko@ristin.ch,GitHub,noreply@github.com,2022-11-02 11:39:13+01:00,-3600,2022-11-02 11:39:13+01:00,-3600,True,False,"['naming.py', '_generate.py', 'naming.py', '_generate.py', 'naming.py', 'setup.py', 'is_xs_date_time_stamp_UTC.cs', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'jsonization.py', 'stringification.py', 'types.py', 'verification.py', 'xmlization.py', 'is_xs_date_time_stamp_UTC.py', 'rdf-ontology.ttl']",['e2a7a8061e1b17b985f5e0d860295ccb27fc2f70'],261,328,589,16,0.9,1.0,1.0
44945c18fd00cce7ed5db7af48468a07a7f75810,"Fix test data snippets for Python V3RC02 (#288)

We changed the naming in b13f75b, but forgot to update the Python
snippets accordingly.

In this patch, we change the snippets and test them against the unit
tests generated in aas-core3.0rc02-python.",Marko Ristin,marko@ristin.ch,GitHub,noreply@github.com,2022-11-02 11:55:43+01:00,-3600,2022-11-02 11:55:43+01:00,-3600,True,False,"['types.py', 'verification.py', 'value_type_or_default.py', 'properties_or_ranges_have_value_type.py', 'submodel_element_is_of_type.py', 'value_consistent_with_xsd_type.py']",['b13f75b4fc3313dd3fdec1dd52bf064ea2468d91'],118,118,236,6,,,
1d12eaeda188dae8bc1ca3c6679f9ec8d915f98f,"Fix date verification of BCE and zero years in C# (#289)

We explicitly tested for zero and BCE years in
[aas-core3.0rc02-testgen eeba8f71] which revealed that the C# SDK did
not handle those edge cases correctly.

In this patch, we re-write the snippets for date verification in the
test data for C# SDK.

[aas-core3.0rc02-testgen eeba8f71]: https://github.com/aas-core-works/aas-core3.0rc02-testgen/commit/eeba8f71",Marko Ristin,marko@ristin.ch,GitHub,noreply@github.com,2022-11-03 00:11:42+01:00,-3600,2022-11-03 00:11:42+01:00,-3600,True,False,"['verification.cs', 'is_xs_date_time_stamp_UTC.cs', 'value_consistent_with_xsd_type.cs']",['44945c18fd00cce7ed5db7af48468a07a7f75810'],178,292,470,3,0.0,0.0,1.0
4c671254b72d058b5edebbbfd77de3674f50a407,"Fix C# code inspection issues due to 1d12eaed (#290)

We were too hasty to merge in the changes in 1d12eaed which cause a
couple of minor code inspection issues.

In this patch, we fix the snippets in the test data so that the code
inspection for C# SDK passes.",Marko Ristin,marko@ristin.ch,GitHub,noreply@github.com,2022-11-03 00:24:20+01:00,-3600,2022-11-03 00:24:20+01:00,-3600,True,False,"['verification.cs', 'is_xs_date_time_stamp_UTC.cs']",['1d12eaeda188dae8bc1ca3c6679f9ec8d915f98f'],8,10,18,2,,,
6458aee48e762bbe43762287c48a8686ebe41bc7,"Fix xmlization docs for C# in test data (#291)

The docs for XML serialization for C# has been outdated. It still listed
the namespace and the prefix argument from the original design which has
been removed in the meanwhile.

This patch fixes the generator so that the generated docs are in sync
with the generated code.",Marko Ristin,marko@ristin.ch,GitHub,noreply@github.com,2022-11-03 09:26:06+01:00,-3600,2022-11-03 09:26:06+01:00,-3600,True,False,"['_generate.py', 'xmlization.cs']",['4c671254b72d058b5edebbbfd77de3674f50a407'],30,0,30,2,1.0,1.0,0.0
1cff35bdd39b144c08fc7ec10d35caf720d51ddc,"Allow for making shallow and deep copies in C# (#292)

We extend the generator for C# to allow for making shallow and deep
copies of AAS models.",Marko Ristin,marko@ristin.ch,GitHub,noreply@github.com,2022-11-04 11:59:25+01:00,-3600,2022-11-04 11:59:25+01:00,-3600,True,False,"['rist.xml', '__init__.py', '_generate.py', 'main.py', 'copying.cs', 'test_main.py']",['6458aee48e762bbe43762287c48a8686ebe41bc7'],2,2982,2984,6,0.07087529047250193,0.2544539116963594,0.9450038729666925
f47ad601f4875358e8246917cde1494afb40446c,"Report errors if classes missing for RDF and XSD (#294)

We hard-wire ``Lang_string`` and ``Value_data_type`` in RDF and XSD
generators, respectively. This is indeed hacky (see the explanations in
the patch), but this way we keep the other code and test data
generators much simpler.

Previously, if the expected types ``Lang_string`` and
``Value_data_type`` have not been defined in the meta-model, we raised
exceptions which confused the user. In this patch, we report informative
errors explaining the background to the user as well.",Marko Ristin,marko@ristin.ch,GitHub,noreply@github.com,2022-11-10 10:38:31+01:00,-3600,2022-11-10 10:38:31+01:00,-3600,True,False,"['common.py', 'rdf.py', 'shacl.py', 'main.py']",['1cff35bdd39b144c08fc7ec10d35caf720d51ddc'],98,158,256,4,0.0,0.4074074074074074,0.8271604938271605
198c14a1a0bce79c964bd9cbe84bd1104f8cb23a,"Make Regex renderer public (#295)

We refactor the rendering in ``parse.retree`` in such a way that
generators can implement their own rendering. For example, in TypeScript
you have to write ``\u{...}`` while in Golang you write ``\x{...}`` for
unicode characters, which differs from Python ``\u...`` and ``\U...``.

Additionally, we make a minor change to precommit script to set pylint
CWD to the repository root so that we can run pre-commit checks from
other directories as well.",Marko Ristin,marko@ristin.ch,GitHub,noreply@github.com,2022-11-13 01:08:32+01:00,-3600,2022-11-13 01:08:32+01:00,-3600,True,False,"['aas-core-csharp-codegen.iml', 'misc.xml', 'Python_tests_in_tests.xml', 'precommit_w__tests.xml', '__init__.py', '_render.py', 'precommit.py', 'pylint.rc']",['f47ad601f4875358e8246917cde1494afb40446c'],42,96,138,8,0.0,0.0,0.0
579b9a837fea11b1d48909f3b8dd09c784d50ea9,"Update test data to aas-core-meta e3707bf (#296)

We update the development requirements to and re-record the test data
for [aas-core-meta e3707bf].

[aas-core-meta e3707bf]: https://github.com/aas-core-works/aas-core-meta/commit/e3707bf",Marko Ristin,marko@ristin.ch,GitHub,noreply@github.com,2022-12-01 09:06:24+01:00,-3600,2022-12-01 09:06:24+01:00,-3600,True,False,"['setup.py', 'types.cs', 'expected_symbol_table.txt', 'types.py']",['198c14a1a0bce79c964bd9cbe84bd1104f8cb23a'],16,16,32,4,,,
c8919e77e4eb894293596903ad852e9cc52a6375,"Exclude inherited properties in interfaces (#297)

We only list the properties in interfaces defined in the related
abstract class of the meta-model. Previously, we included *all* the
properties (including the inherited ones) which was unnecessary as
interfaces inherit properties from their parents.",Marko Ristin,marko@ristin.ch,GitHub,noreply@github.com,2022-12-17 19:29:27+01:00,-3600,2022-12-17 19:29:27+01:00,-3600,True,False,"['aas-core-csharp-codegen.iml', 'misc.xml', '_generate.py', '_types.py', 'types.cs', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt']",['579b9a837fea11b1d48909f3b8dd09c784d50ea9'],1179,113,1292,8,1.0,1.0,0.0
21b0c06ebf704f8ae425ca3369893473c94450da,"De-duplicate code in ``naming`` (#298)

We refactor the code in the ``naming`` module into fewer functions, so
that the dependent naming modules can re-use them. This makes it more
obvious for the reader which casing is used.

While duplication is in similar cases often better for readability,
we already observed related bugs in the TypeScript generator (which
is still a work-in-progress), so we react accordingly.",Marko Ristin,marko@ristin.ch,GitHub,noreply@github.com,2022-12-17 20:14:08+01:00,-3600,2022-12-17 20:14:08+01:00,-3600,True,False,"['naming.py', 'naming.py']",['c8919e77e4eb894293596903ad852e9cc52a6375'],111,41,152,2,1.0,0.0,0.0
1b1089c7229235fdf1b7c5d865910d183050791b,"Fix ignored verification erros in ``main`` (#299)

In the ``main`` of the C# and Python generator we mistakenly ignored
the verification errors due to misnaming of the local variable. We fix
the issue in this patch.",Marko Ristin,marko@ristin.ch,GitHub,noreply@github.com,2022-12-17 20:21:03+01:00,-3600,2022-12-17 20:21:03+01:00,-3600,True,False,"['main.py', 'main.py']",['21b0c06ebf704f8ae425ca3369893473c94450da'],3,3,6,2,,,
10f119299c21a8b9a5f26ecd3fcfb3c3355a0762,"Generate empty constructors in C# (#300)

While we do not test for this logic at the moment, we reviewed the C#
code while writing the TypeScript generator (which is still
work-in-progress). It turns out that we missed the case where there are
statements in C# constructors, but no arguments.

In this patch, we generate the constructors as soon as they have
statements, regardless of the number of arguments.",Marko Ristin,marko@ristin.ch,GitHub,noreply@github.com,2022-12-17 20:30:07+01:00,-3600,2022-12-17 20:30:07+01:00,-3600,True,False,['_generate.py'],['1b1089c7229235fdf1b7c5d865910d183050791b'],3,6,9,1,0.0,0.0,1.0
4c6e3a649a5ebb8772f408bc2541c831f13deecb,"Fix minor typo in Python jsonization (#301)

We fix the error where we mistakenly wrote ""Containers"" instead of a
single ""container"" in ``IndexSegment``. The ``IndexSegment`` refers to
an array so there can not be multiple containers.",Marko Ristin,marko@ristin.ch,GitHub,noreply@github.com,2022-12-17 20:52:46+01:00,-3600,2022-12-17 20:52:46+01:00,-3600,True,False,"['_generate.py', 'jsonization.py']",['10f119299c21a8b9a5f26ecd3fcfb3c3355a0762'],2,2,4,2,,,
b5d94d543f7cd0964a07da383e577f405f5ab7da,"Fix erroneous references to C# from Python (#302)

We introduced a couple of innoucous invalid references in Python
generator by copy/pasting from C# generator when we first wrote it.

We rectify these invalid references to Python in this patch.",Marko Ristin,marko@ristin.ch,GitHub,noreply@github.com,2022-12-17 21:08:11+01:00,-3600,2022-12-17 21:08:11+01:00,-3600,True,False,"['common.py', 'transpilation.py', '_generate.py']",['4c6e3a649a5ebb8772f408bc2541c831f13deecb'],3,3,6,3,,,
6522114bd9792c9c26ef18ea134d3fd81c377cf7,"Rename ``Unroller`` to ``AbstractUnroller`` (#303)

Since ``Unroller`` is an abstract class, and intentionally so, we rename
it to ``AbstractUnroller`` to aid the reader so that it is obvious that
the concrete class is an implementation, while the abstract class gives
only a scaffolding.",Marko Ristin,marko@ristin.ch,GitHub,noreply@github.com,2022-12-17 21:13:44+01:00,-3600,2022-12-17 21:13:44+01:00,-3600,True,False,"['_generate.py', 'unrolling.py', '_generate.py', 'unrolling.py']",['b5d94d543f7cd0964a07da383e577f405f5ab7da'],6,6,12,4,,,
c7c9eb8ce000e228e257241e066a7bcbe033802f,"Generate constructors with no arguments in Python (#304)

While we do not test for this logic at the moment, we reviewed
the Python code while writing the TypeScript generator (which is still
work-in-progress). It turns out that we missed the case where there are
statements in constructors, but no arguments.

In this patch, we generate the constructors as soon as they have
statements, regardless of the number of arguments (which can be zero or
more).",Marko Ristin,marko@ristin.ch,GitHub,noreply@github.com,2022-12-17 21:19:06+01:00,-3600,2022-12-17 21:19:06+01:00,-3600,True,False,['_generate.py'],['6522114bd9792c9c26ef18ea134d3fd81c377cf7'],1,3,4,1,0.0,0.0,1.0
f0f50ad593b1fd9dee5d95a5c777d0afedcc5d9d,"Indent args in transpiled method calls in Python (#305)

We reviewed the code while developping TypeScript generator (which is
still a work-in-progress). The review revealed that we missed to indent
the arguments to a method call in transpilation to Python.

This patch fixes the issue.",Marko Ristin,marko@ristin.ch,GitHub,noreply@github.com,2022-12-17 21:26:18+01:00,-3600,2022-12-17 21:26:18+01:00,-3600,True,False,['transpilation.py'],['c7c9eb8ce000e228e257241e066a7bcbe033802f'],1,1,2,1,,,
6a2d079f2e614da3b99bdda801882551f346dcf4,"Fix transpilation of function names in Python (#306)

We simply transpiled the function name to Python casing in
transpilation. While this works for the meta-models designed so far, it
is a ticking bomb to explode if we have cross-module function calls.

This patch fixes the issue by delegating the transpilation of the name
to the concrete implementation in the abstract transpiler class.",Marko Ristin,marko@ristin.ch,GitHub,noreply@github.com,2022-12-17 21:31:15+01:00,-3600,2022-12-17 21:31:15+01:00,-3600,True,False,['transpilation.py'],['f0f50ad593b1fd9dee5d95a5c777d0afedcc5d9d'],1,5,6,1,0.0,0.0,1.0
62dee539d01c0536c9855b57ff4350c691b6d68c,"Fix ``is_xs_date*`` in Python to match first (#307)

We make the verification functions ``is_xs_date*`` to match against the
patterns first to avoid bugs related to unexpected date/time formats.",Marko Ristin,marko@ristin.ch,GitHub,noreply@github.com,2022-12-17 21:42:38+01:00,-3600,2022-12-17 21:42:38+01:00,-3600,True,False,"['verification.py', 'value_consistent_with_xsd_type.py']",['6a2d079f2e614da3b99bdda801882551f346dcf4'],46,34,80,2,0.3333333333333333,0.3333333333333333,0.0
a6445b99c8cebe664311ec2e60094c99e1e99c1d,"Fix Python verification to check for falsy matches (#308)

We compared against ``is False`` instead of using ``not`` operator.
This is much less readable, and in cases where ``matches_*`` functions
return non-boolean, can lead to bugs.

This patch fixes the issue by consistently using ``not`` operator.",Marko Ristin,marko@ristin.ch,GitHub,noreply@github.com,2022-12-17 21:54:38+01:00,-3600,2022-12-17 21:54:38+01:00,-3600,True,False,"['verification.py', 'is_xs_date_time_stamp_UTC.py', 'value_consistent_with_xsd_type.py']",['62dee539d01c0536c9855b57ff4350c691b6d68c'],24,24,48,3,,,
5a5be9780a2032f378c6e425a0bb6cc035ad2c32,"Add generator for TypeScript SDK (#309)

We write a generator which generates the code for TypeScript.

This is an initial version ready for review, not to be published yet.",Marko Ristin,marko@ristin.ch,GitHub,noreply@github.com,2022-12-21 15:43:52+01:00,-3600,2022-12-21 15:43:52+01:00,-3600,True,False,"['ci.yml', 'aas-core-csharp-codegen.iml', 'marko.xml', 'misc.xml', 'README.rst', 'main.py', '__init__.py', '__init__.py', '_generate.py', 'common.py', '__init__.py', '_generate.py', 'description.py', '__init__.py', '_generate.py', 'main.py', 'naming.py', '__init__.py', '_generate.py', '__init__.py', '_generate.py', 'transpilation.py', 'unrolling.py', '__init__.py', '_generate.py', 'run_tests_with_rerecord.py', 'common.ts', 'constants.ts', 'jsonization.ts', 'stdout.txt', 'stringification.ts', 'types.ts', 'verification.ts', 'category_or_default.ts', 'category_or_default.ts', 'value_type_or_default.ts', 'kind_or_default.ts', 'kind_or_default.ts', 'order_relevant_or_default.ts', 'data_specification_IEC_61360s_for_document_have_appropriate_data_type.ts', 'data_specification_IEC_61360s_for_property_or_value_have_appropriate_data_type.ts', 'data_specification_IEC_61360s_for_reference_have_appropriate_data_type.ts', 'data_specification_IEC_61360s_have_data_type.ts', 'data_specification_IEC_61360s_have_definition_at_least_in_english.ts', 'data_specification_IEC_61360s_have_value.ts', 'extension_names_are_unique.ts', 'id_shorts_are_unique.ts', 'is_xs_date_time_stamp_UTC.ts', 'lang_strings_have_unique_languages.ts', 'properties_or_ranges_have_value_type.ts', 'qualifier_types_are_unique.ts', 'reference_key_values_equal.ts', 'submodel_element_is_of_type.ts', 'submodel_elements_have_identical_semantic_ids.ts', 'value_consistent_with_xsd_type.ts', '__init__.py', 'test_common.py', 'test_main.py']",['a6445b99c8cebe664311ec2e60094c99e1e99c1d'],4,61458,61462,58,0.2030730590234173,0.4626579005688114,0.8661446406146118
f93da56d14f1c5e228a438e0d71da6af71245692,"Make pre-commit use ``sys.executable`` (#311)

We had problems with the pre-commit scripts since commands could not be
found in the environment. This patch fixes the issue by invoking
pre-commit commands such as black or mypy as modules through
``sys.executable``.",Marko Ristin,marko@ristin.ch,GitHub,noreply@github.com,2023-01-22 07:29:42+01:00,-3600,2023-01-22 07:29:42+01:00,-3600,True,False,"['Python_tests_in_tests.xml', 'precommit_w__parallel_tests.xml', 'precommit.py']",['5a5be9780a2032f378c6e425a0bb6cc035ad2c32'],9,25,34,3,0.0,0.0,1.0
71b51c5db9f9a1063cd8c567561d2973e287caa3,"Fix error message on reading snippets (#312)

We left a stale error message in the main program referring to JSON
snippets instead of general snippets.

This patch fixes the issue.",Marko Ristin,marko@ristin.ch,GitHub,noreply@github.com,2023-01-22 07:30:39+01:00,-3600,2023-01-22 07:30:39+01:00,-3600,True,False,['main.py'],['f93da56d14f1c5e228a438e0d71da6af71245692'],2,1,3,1,1.0,1.0,1.0
72fec42b31e89a57da40efc35c0c1ab00d2cb45f,"Make ``VerificationUnion`` public (#313)

We want to allow the downstream generators to discrimanate exhaustively
on the verification functions, and therefore make ``VerificationUnion``
public in the ``intermediate`` module.",Marko Ristin,marko@ristin.ch,GitHub,noreply@github.com,2023-01-22 07:31:15+01:00,-3600,2023-01-22 07:31:15+01:00,-3600,True,False,['__init__.py'],['71b51c5db9f9a1063cd8c567561d2973e287caa3'],0,1,1,1,,,
7e7cda9934635cb98a5caac19428a5f2cf4c41a4,"Refactor loading function to `run` (#314)

We refactor the loading of meta-model to `run` module so that downstream
consumers can access the meta-models more easily. This is such a common
workflow in clients that it is worth the encapsulation.",Marko Ristin,marko@ristin.ch,GitHub,noreply@github.com,2023-01-27 21:50:04+01:00,-3600,2023-01-27 21:50:04+01:00,-3600,True,False,"['main.py', 'run.py']",['72fec42b31e89a57da40efc35c0c1ab00d2cb45f'],66,83,149,2,1.0,1.0,1.0
65dfad232717d3c41d4b556db4294b5ff684c104,"Add runtime type matching to TypeScript (#315)

We generate a function to check whether two instances match in type at
runtime in TypeScript. For example, this is used in the React editor
where we assert that snapshot and modifiable instances are of the same
type.",Marko Ristin,marko@ristin.ch,GitHub,noreply@github.com,2023-01-29 20:44:52+01:00,-3600,2023-01-29 20:44:52+01:00,-3600,True,False,"['precommit_w__parallel_tests.xml', '_generate.py', 'types.ts']",['7e7cda9934635cb98a5caac19428a5f2cf4c41a4'],178,585,763,3,0.0821917808219178,0.6164383561643836,1.0
18ee84f5632b0c8a835769d8a925952b43e17ae2,"Relax type module in typescript generation (#316)

We let the `Identifier` inherit from `Stripped` so that we can relax the
type module prefix used in the generation of TypeScript type
definitions.",Marko Ristin,marko@ristin.ch,GitHub,noreply@github.com,2023-01-30 20:37:51+01:00,-3600,2023-01-30 20:37:51+01:00,-3600,True,False,"['common.py', 'common.py']",['65dfad232717d3c41d4b556db4294b5ff684c104'],41,42,83,2,,,
69570c0f3703db42f605e8a1af6f0361ec635a88,"Verify constr. primitives in non-recursion in TS (#317)

We grouped properties of constrained primitives with all the other
properties in the recusrion block in TypeScript. This is obviously
wrong, as we want to verify the constrained primitives regardless of
the recursion in the verification context.",Marko Ristin,marko@ristin.ch,GitHub,noreply@github.com,2023-02-03 17:24:27+01:00,-3600,2023-02-03 17:24:27+01:00,-3600,True,False,"['_generate.py', 'verification.ts']",['18ee84f5632b0c8a835769d8a925952b43e17ae2'],1105,1156,2261,2,0.0,0.0,0.0
a29a1d1d617f31f4efdfbc12b12085f982ca35d4,"Fix missing constraints on inherited props in JSON (#318)

We skipped to define constraints on properties which are inherited. This
is a bug, as the schema can verify them with ``allOf`` just fine.

This patch fixes the issue.",Marko Ristin,marko@ristin.ch,GitHub,noreply@github.com,2023-02-06 09:16:26+01:00,-3600,2023-02-06 09:16:26+01:00,-3600,True,False,"['_inline.py', 'main.py', 'schema.json', 'stdout.txt', 'schema_base.json', 'meta_model.py', 'test_len_on_properties.py', 'test_main.py']",['69570c0f3703db42f605e8a1af6f0361ec635a88'],87,402,489,8,0.08695652173913043,0.5652173913043478,1.0
65e36bf41e46f4ae5a48844b88a919d105717181,"Refactor test case finding to `tests.common` (#319)

So far, we only iterated over the `test_main` directory of JSON Schema
generator to collect the test cases. In the immediate future, we will
generalize this logic to RDF+SHACL tests as well.

Hence, we refactor the functionality of the search for test cases into
`tests.common`.",Marko Ristin,marko@ristin.ch,GitHub,noreply@github.com,2023-02-06 16:14:22+01:00,-3600,2023-02-06 16:14:22+01:00,-3600,True,False,"['aas-core-csharp-codegen.iml', 'meta_model.py', 'common.py', 'test_main.py']",['a29a1d1d617f31f4efdfbc12b12085f982ca35d4'],53,101,154,4,0.10526315789473684,0.10526315789473684,0.8947368421052632
7ca8f407134a7b88d9c994ad1d0261b98b8636e1,"Fix RDF+SHACL when ``Lang_string`` is missing (#320)

We assumed that ``Lang_string`` will always be defined, and hard-wired
certain parts of the RDF+SHACL codegen to that particular class.

However, this assumption did not hold long: already the first iteration
of V3.0 of the metamodel came without a ``Lang_string``.

In this patch, we make RDF+SHACL more robust in face of missing
``Lang_string``, and allow the generation without its definition.",Marko Ristin,marko@ristin.ch,GitHub,noreply@github.com,2023-02-06 16:17:42+01:00,-3600,2023-02-06 16:17:42+01:00,-3600,True,False,"['common.py', 'rdf.py', 'shacl.py', 'rdf-ontology.ttl', 'shacl-schema.ttl', 'stdout.txt', '.gitignore', 'meta_model.py', 'test_main.py']",['65e36bf41e46f4ae5a48844b88a919d105717181'],46,146,192,9,1.0,0.8,0.4
5165d235e01f3a570ff04614c1d77794395a3126,"Fix RDF gen for constraints on inherited property (#321)

We ignored the case when a child class imposes constraints on an
inherited property. The shape constraints were consequently omitted in
SHACL schema.

This patch fixes the issue, which is similar to the one fixed in the
pull request #318.",Marko Ristin,marko@ristin.ch,GitHub,noreply@github.com,2023-02-08 04:35:50+01:00,-3600,2023-02-08 04:35:50+01:00,-3600,True,False,"['shacl.py', 'schema.json', 'stdout.txt', 'schema_base.json', 'meta_model.py', 'shacl-schema.ttl', 'rdf-ontology.ttl', 'shacl-schema.ttl', 'stdout.txt', '.gitignore', 'meta_model.py']",['7ca8f407134a7b88d9c994ad1d0261b98b8636e1'],9,147,156,11,0.3076923076923077,0.3076923076923077,0.3076923076923077
da072c445f82f130f27ffc26e1abf7204a5bb1f9,"Make reading of snippets more robust (#322)

So far, we only tested happy paths when reading the snippets. It turned
out that the logic is not so robust when reading an arbitrary directory,
which we found out unintentionally.

This patch fixes the issue, but we lack the time to implement a proper
unit test, unfortunately.",Marko Ristin,marko@ristin.ch,GitHub,noreply@github.com,2023-02-08 04:46:56+01:00,-3600,2023-02-08 04:46:56+01:00,-3600,True,False,['specific_implementations.py'],['5165d235e01f3a570ff04614c1d77794395a3126'],2,11,13,1,0.0,0.0,1.0
d0c21c4bd3fcdabafd23190ca04f5ade84532a20,"Refine error on unexpected SHACL len constraints (#323)

When a length constraint has been inferred for a property of type class,
the SHACL generator returned a rather confusing, or even misleading,
error message.

Though a length constraint on a property of type class is probably a
mistake in the meta-model, it is a probable mistake and deserves a more
specific error message.

This patch refines the error messages and gives more precise information
to the user so that the error can be localized swiftly.",Marko Ristin,marko@ristin.ch,GitHub,noreply@github.com,2023-02-08 05:26:23+01:00,-3600,2023-02-08 05:26:23+01:00,-3600,True,False,"['shacl.py', 'schema.json', 'stdout.txt', 'schema_base.json', 'meta_model.py', 'rdf-ontology.ttl', 'shacl-schema.ttl', 'stdout.txt', '.gitignore', 'rdf-ontology.ttl', 'shacl-schema.ttl', 'stdout.txt', '.gitignore', 'meta_model.py', 'rdf-ontology.ttl', 'shacl-schema.ttl', 'stdout.txt', '.gitignore', 'meta_model.py', 'rdf-ontology.ttl', 'stderr.txt', '.gitignore', 'meta_model.py', 'test_main.py']",['da072c445f82f130f27ffc26e1abf7204a5bb1f9'],7,212,219,24,0.07228915662650602,0.07228915662650602,0.8072289156626506
08f5447d005b96ce92b157248420ab7c8da8de8f,"Make C# code operate on interfaces (#324)

We operate on *interfaces* instead of concrete classes to allow for
custom extensions and wrappers around our model classes.

Originally, we used type overloading to dispatch the visit calls. After
we decided to support custom wrappers and enhancements to our classes,
we had to switch here to interfaces instead of concrete classes.
The type overloading does not work anymore in this setting, as
descendants of *concrete* classes would be wrongly dispatched. That is
why we dispatch explicitly, by having different visit method names
instead of mere type overloads.",Marko Ristin,marko@ristin.ch,GitHub,noreply@github.com,2023-02-08 07:47:05+01:00,-3600,2023-02-08 07:47:05+01:00,-3600,True,False,"['common.py', '_generate.py', '_generate.py', '_generate.py', '_generate.py', '_generate.py', '_generate.py', 'copying.cs', 'jsonization.cs', 'types.cs', 'verification.cs', 'visitation.cs', 'xmlization.cs', 'expected_types.cs', 'expected_types.cs', 'expected_types.cs', 'expected_verification.cs', 'expected_verification.cs']",['d0c21c4bd3fcdabafd23190ca04f5ade84532a20'],1131,3721,4852,18,0.20123203285420946,0.34291581108829566,0.9117043121149897
45f0f0f5e2dde6f29491867acfb60c2eae00ef55,"Reformat trailing space in recorded C# tests (#325)

We forgot to re-record the test data once we fixed the trailing spaces
in the generating code.

This patch fixes the issue.",Marko Ristin,marko@ristin.ch,GitHub,noreply@github.com,2023-02-08 08:38:16+01:00,-3600,2023-02-08 08:38:16+01:00,-3600,True,False,['visitation.cs'],['08f5447d005b96ce92b157248420ab7c8da8de8f'],6,6,12,1,,,
9b4b57f23e6ba80c7b283d55b9b66cd467ebb95c,"Transpile everything to C# in smoke mode (#326)

We encountered various errors during the design of the aas-core-meta V3
which would have been prevented if only we transpiled to C# (or any
other language). Notably, we needed type inference which was missing in
the current smoke tests.

This patch mocks all the implementation specific snippets and transpiles
to C# in the smoke command, so that the errors in the meta-models can be
discovered earlier during the design.",Marko Ristin,marko@ristin.ch,GitHub,noreply@github.com,2023-02-08 08:43:31+01:00,-3600,2023-02-08 08:43:31+01:00,-3600,True,False,"['main.py', 'expected_stderr.txt', 'meta_model.py']",['45f0f0f5e2dde6f29491867acfb60c2eae00ef55'],27,83,110,3,0.17391304347826086,0.17391304347826086,1.0
5ad6e0f63acc1283618c4f7634653b4483701fe8,"Improve errors on unexpected type inference (#327)

We improve error messages when a type has been inferred as `Optional`,
but a non-optional type has been expected.",Marko Ristin,marko@ristin.ch,GitHub,noreply@github.com,2023-02-08 08:57:13+01:00,-3600,2023-02-08 08:57:13+01:00,-3600,True,False,['type_inference.py'],['9b4b57f23e6ba80c7b283d55b9b66cd467ebb95c'],6,17,23,1,0.0,0.0,1.0
08aaab0070183768296cf5926b0e05269bc86b43,"Add enhancing to C# (#328)

We want to allow downstream users to ""enhance"", *i.e.* wrap, our model
classes with custom properties and methods.

To that end, we generate as much boiler plate code as possible to make
their wrapping task easier.

In this patch, we also fix various omissions from the previous commit
(#327) in ``types.cs``. Namely, we did not generate the complete
interfaces (the methods were missing), 327) in ``types.cs``. Namely:

* we did not generate the complete interfaces (the methods were
  missing), and
* the C# snippets were not adapted yet.

These omissions were only revealed once we started testing the
enhancing.",Marko Ristin,marko@ristin.ch,GitHub,noreply@github.com,2023-02-08 17:17:29+01:00,-3600,2023-02-08 17:17:29+01:00,-3600,True,False,"['common.py', '__init__.py', '_generate.py', 'main.py', '_generate.py', 'copying.cs', 'enhancing.cs', 'jsonization.cs', 'types.cs', 'verification.cs', 'xmlization.cs', 'data_specification_IEC_61360s_for_document_have_appropriate_data_type.cs', 'data_specification_IEC_61360s_for_property_or_value_have_appropriate_data_type.cs', 'data_specification_IEC_61360s_for_reference_have_appropriate_data_type.cs', 'data_specification_IEC_61360s_have_data_type.cs', 'data_specification_IEC_61360s_have_definition_at_least_in_english.cs', 'data_specification_IEC_61360s_have_value.cs', 'extension_names_are_unique.cs', 'lang_strings_have_unique_languages.cs', 'properties_or_ranges_have_value_type.cs', 'qualifier_types_are_unique.cs', 'reference_key_values_equal.cs', 'submodel_element_is_of_type.cs', 'submodel_elements_have_identical_semantic_ids.cs', 'test_main.py']",['5ad6e0f63acc1283618c4f7634653b4483701fe8'],1896,10584,12480,25,0.3396359780880014,0.3779819756140661,0.9632443894681039
f348e90277eed6d6342b72f9d695b518a50c0cb8,"Fix tests failing in remote CI (#329)

Due to lack of time (deadlines + nearing holidays), we ignored the minor
issue failing the remote CI. Namely, the paths in the recorded errors
for RDF+SHACL were stored with the absolute paths, and thus failed on
the remote machine.

This patch fixes the issue.",Marko Ristin,marko@ristin.ch,GitHub,noreply@github.com,2023-02-10 23:06:40+01:00,-3600,2023-02-10 23:06:40+01:00,-3600,True,False,"['stderr.txt', 'test_main.py']",['08aaab0070183768296cf5926b0e05269bc86b43'],2,2,4,2,,,
67caa6f897b6ea75b5c5ca42c0fb2a075b12e18d,"Change JSON naming of model types for V3 (#330)

The current naming algorithm for model types turned out to be rather
fragile. Namely, we used CamelCase except for abbreviations, which were
left as-are. This was brittle: if we forgot to uppercase the
abbreviation in the meta-model, and published the JSON schema, there was
no way to put the Gini back into the bottle.

Instead, in V3, we introduce a simpler, but also a more robust
algorithm: we simply CamelCase everything, including the abbreviations.",Marko Ristin,marko@ristin.ch,GitHub,noreply@github.com,2023-02-24 17:40:01+01:00,-3600,2023-02-24 17:40:01+01:00,-3600,True,False,"['naming.py', 'jsonization.cs', 'schema.json', 'jsonization.py', 'jsonization.ts']",['f348e90277eed6d6342b72f9d695b518a50c0cb8'],16,13,29,5,1.0,0.0,0.0
0e43edc02db3a9817947cbed8deb71cf7ca4bb2b,"Introduce `*_choice` in JSON schema (#331)

Following the decision in the IDTA workstream AAS, we introduce
`*_choice` definitions in JSON schema. This makes the schema much
stricter.

For example, `value` property must conform in type to the corrsponding
model type.

The issue was originally raised in:
https://github.com/admin-shell-io/aas-specs/issues/251",Marko Ristin,marko@ristin.ch,GitHub,noreply@github.com,2023-02-24 18:09:07+01:00,-3600,2023-02-24 18:09:07+01:00,-3600,True,False,"['main.py', 'schema.json']",['67caa6f897b6ea75b5c5ca42c0fb2a075b12e18d'],37,274,311,2,0.0,0.0,1.0
237e83d2084ab06331e53b84fdc93a60b06a61cc,"Update test data to aas-core-meta cbbc2d2 (#332)

We update the test data for V3RC02 to [aas-core-meta cbbc2d2] to keep
them up-to-date.

[aas-core-meta cbbc2d2]: https://github.com/aas-core-works/aas-core-meta/commit/cbbc2d2",Marko Ristin,marko@ristin.ch,GitHub,noreply@github.com,2023-02-24 18:43:43+01:00,-3600,2023-02-24 18:43:43+01:00,-3600,True,False,"['setup.py', 'expected_symbol_table.txt', 'types.py', 'types.ts']",['f348e90277eed6d6342b72f9d695b518a50c0cb8'],13,31,44,4,,,
07f9800f6694c132795d0a82e3e9b33428545398,"Merge regular expressions in XSD (#333)

XSD does not allow for multiple pattern restrictions, see [this
StackOverflow question]. Therefore, we use [greenery] to merge the
patterns into one.

[this StackOverflow question]: https://stackoverflow.com/questions/26992786/specifying-multiple-patterns-in-a-restriction-in-a-xsd
[greenery]: https://github.com/qntm/greenery",Marko Ristin,marko@ristin.ch,GitHub,noreply@github.com,2023-02-27 21:34:18+01:00,-3600,2023-02-27 21:34:18+01:00,-3600,True,False,"['main.py', 'mypy.ini', 'requirements.txt']",['fec8f2bebf7b0f65a1026fed72217a548d95b944'],28,116,144,3,0.0,0.5636363636363636,1.0
bc004e4a5f26a383a7b4496704944ab7c037fdae,"Add V3 in test data (#334)

Now that V3 is almost finished, we include code generations in the test
data for `v3.py` from aas-core-meta.

At the same time, we deprecate V3RC02 in test data, as there are
breaking changes in the JSON schema between V3 and V3RC02.",Marko Ristin,marko@ristin.ch,GitHub,noreply@github.com,2023-03-01 11:15:07+01:00,-3600,2023-03-01 11:15:07+01:00,-3600,True,False,"['constants.cs', 'copying.cs', 'enhancing.cs', 'jsonization.cs', 'reporting.cs', 'stdout.txt', 'stringification.cs', 'types.cs', 'verification.cs', 'visitation.cs', 'xmlization.cs', 'README.rst', 'category_or_default.cs', 'value_type_or_default.cs', 'kind_or_default.cs', 'kind_or_default.cs', 'order_relevant_or_default.cs', 'ID_shorts_are_unique.cs', 'ID_shorts_of_variables_are_unique.cs', 'data_specification_IEC_61360s_for_document_have_appropriate_data_type.cs', 'data_specification_IEC_61360s_for_property_or_value_have_appropriate_data_type.cs', 'data_specification_IEC_61360s_for_reference_have_appropriate_data_type.cs', 'data_specification_IEC_61360s_have_data_type.cs', 'data_specification_IEC_61360s_have_definition_at_least_in_english.cs', 'data_specification_IEC_61360s_have_value.cs', 'extension_names_are_unique.cs', 'is_xs_date_time.cs', 'is_xs_date_time_UTC.cs', 'lang_strings_have_unique_languages.cs', 'properties_or_ranges_have_value_type.cs', 'qualifier_types_are_unique.cs', 'reference_key_values_equal.cs', 'submodel_element_is_of_type.cs', 'submodel_elements_have_identical_semantic_IDs.cs', 'value_consistent_with_XSD_type.cs', 'namespace.txt', 'category_or_default.cs', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'minimal_asset_administration_shell.json', 'minimal_concept_description.json', 'empty_environment_with_optional_properties_missing.json', 'minimal_submodel.json', 'minimal_property.json', 'property_with_id_short.json', 'submodel_with_two_submodel_elements.json', 'schema.json', 'stdout.txt', 'schema_base.json', 'expected_symbol_table.txt', 'common.py', 'constants.py', 'jsonization.py', 'stdout.txt', 'stringification.py', 'types.py', 'verification.py', 'xmlization.py', 'category_or_default.py', 'value_type_or_default.py', 'kind_or_default.py', 'kind_or_default.py', 'order_relevant_or_default.py', 'ID_shorts_are_unique.py', 'ID_shorts_of_variables_are_unique.py', 'data_specification_IEC_61360s_for_document_have_appropriate_data_type.py', 'data_specification_IEC_61360s_for_property_or_value_have_appropriate_data_type.py', 'data_specification_IEC_61360s_for_reference_have_appropriate_data_type.py', 'data_specification_IEC_61360s_have_data_type.py', 'data_specification_IEC_61360s_have_definition_at_least_in_english.py', 'data_specification_IEC_61360s_have_value.py', 'extension_names_are_unique.py', 'is_xs_date_time.py', 'is_xs_date_time_UTC.py', 'lang_strings_have_unique_languages.py', 'properties_or_ranges_have_value_type.py', 'qualifier_types_are_unique.py', 'reference_key_values_equal.py', 'submodel_element_is_of_type.py', 'submodel_elements_have_identical_semantic_IDs.py', 'value_consistent_with_XSD_type.py', 'qualified_module_name.txt', 'jsonization.py', 'stringification.py', 'verification.py', 'category_or_default.py', 'kind_or_default.py', 'is_xs_date_time_stamp_UTC.py', 'rdf-ontology.ttl', 'shacl-schema.ttl', 'stdout.txt', '.gitignore', 'rdf-ontology.ttl', 'common.ts', 'constants.ts', 'jsonization.ts', 'stdout.txt', 'stringification.ts', 'types.ts', 'verification.ts', 'category_or_default.ts', 'value_type_or_default.ts', 'kind_or_default.ts', 'kind_or_default.ts', 'order_relevant_or_default.ts', 'ID_shorts_are_unique.ts', 'ID_shorts_of_variables_are_unique.ts', 'data_specification_IEC_61360s_for_document_have_appropriate_data_type.ts', 'data_specification_IEC_61360s_for_property_or_value_have_appropriate_data_type.ts', 'data_specification_IEC_61360s_for_reference_have_appropriate_data_type.ts', 'data_specification_IEC_61360s_have_data_type.ts', 'data_specification_IEC_61360s_have_definition_at_least_in_english.ts', 'data_specification_IEC_61360s_have_value.ts', 'extension_names_are_unique.ts', 'is_xs_date_time.ts', 'is_xs_date_time_UTC.ts', 'lang_strings_have_unique_languages.ts', 'properties_or_ranges_have_value_type.ts', 'qualifier_types_are_unique.ts', 'reference_key_values_equal.ts', 'submodel_element_is_of_type.ts', 'submodel_elements_have_identical_semantic_IDs.ts', 'value_consistent_with_XSD_type.ts', 'category_or_default.ts', 'is_xs_date_time_stamp_UTC.ts', 'minimal_asset_administration_shell.xml', 'minimal_concept_description.xml', 'empty_environment_with_optional_properties_missing.xml', 'minimal_submodel.xml', 'minimal_property.xml', 'property_with_id_short.xml', 'submodel_with_two_submodel_elements.xml', 'schema.xsd', 'stdout.txt', 'root_element.xml', 'empty_environment_with_optional_properties_missing.xml', 'live_test_main.py', 'test_main.py', 'test_translate.py', 'test_main.py', 'test_parse.py', 'test_main.py', 'test_main.py', 'test_main.py', 'test_main.py', 'test_main.py']",['07f9800f6694c132795d0a82e3e9b33428545398'],91869,48554,140423,146,0.8243050605844618,0.5909657875980042,0.2980220955096222
ef689ea7bcab9aa5f118fc77536a3ed52d16fe5e,"[V3] Fix namespace in test data (#335)

We erroneously copy-pasted V3RC02 in the test data as namespace (or
module name).

We also fix the re-formatting of Python test data due to copy-paste
error related to the directory name of the previous V3RC02 version.

This patch fixes both issues.",Marko Ristin,marko@ristin.ch,GitHub,noreply@github.com,2023-03-01 16:21:18+01:00,-3600,2023-03-01 16:21:18+01:00,-3600,True,False,"['precommit.py', 'constants.cs', 'copying.cs', 'enhancing.cs', 'jsonization.cs', 'reporting.cs', 'stringification.cs', 'types.cs', 'verification.cs', 'visitation.cs', 'xmlization.cs', 'namespace.txt', 'common.py', 'constants.py', 'jsonization.py', 'stringification.py', 'types.py', 'verification.py', 'xmlization.py', 'qualified_module_name.txt']",['bc004e4a5f26a383a7b4496704944ab7c037fdae'],8704,20572,29276,20,0.18492202639106764,0.5546738027129279,0.8061271569622589
f23456f47a4250b959e8c0d29089fc47d62a6b62,"[V3] Update test data to aas-core-meta 2fe273f (#336)

We propagate the fixes in V3 from [aas-core-meta 2fe273f] to test data.

[aas-core-meta 2fe273f]: https://github.com/aas-core-works/aas-core-meta/commit/2fe273f",Marko Ristin,marko@ristin.ch,GitHub,noreply@github.com,2023-03-03 16:22:33+01:00,-3600,2023-03-03 16:22:33+01:00,-3600,True,False,"['setup.py', 'verification.cs', 'expected_symbol_table.txt', 'schema.json', 'expected_symbol_table.txt', 'types.py', 'verification.py', 'shacl-schema.ttl', 'types.ts', 'verification.ts', 'schema.xsd']",['ef689ea7bcab9aa5f118fc77536a3ed52d16fe5e'],32,26,58,11,,,
86d387a51e22fdbfdeb1c431ad8c3815c45ba36c,"[V3] Update test data to aas-core-meta d11454b (#338)

We re-generate the test data for [aas-core-meta d11454b].

[aas-core-meta d11454b]: https://github.com/aas-core-works/aas-core-meta/commit/d11454b",Marko Ristin,marko@ristin.ch,GitHub,noreply@github.com,2023-03-03 17:39:02+01:00,-3600,2023-03-03 17:39:02+01:00,-3600,True,False,"['setup.py', 'verification.cs', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'verification.py', 'verification.ts']",['f23456f47a4250b959e8c0d29089fc47d62a6b62'],13,13,26,6,,,
c5e6c69b902a7eeb102cbf127563a406dc6884bb,"[V3] Update test data to aas-core-meta 89473c9 (#339)

We re-generate the test data for [aas-core-meta 89473c9].

[aas-core-meta 89473c9]: https://github.com/aas-core-works/aas-core-meta/commit/89473c9",Marko Ristin,marko@ristin.ch,GitHub,noreply@github.com,2023-03-03 17:52:33+01:00,-3600,2023-03-03 17:52:33+01:00,-3600,True,False,"['setup.py', 'verification.cs', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'verification.py', 'verification.ts']",['86d387a51e22fdbfdeb1c431ad8c3815c45ba36c'],23,23,46,6,,,
908d0d43fe49025a065ad707af4f0ef34c989db4,"[V3] Update test data to aas-core-meta 4b63819 (#340)

We re-generate the test data for [aas-core-meta 4b63819].

[aas-core-meta 4b63819]: https://github.com/aas-core-works/aas-core-meta/commit/4b63819",Marko Ristin,marko@ristin.ch,GitHub,noreply@github.com,2023-03-03 18:01:02+01:00,-3600,2023-03-03 18:01:02+01:00,-3600,True,False,"['setup.py', 'verification.cs', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'verification.py', 'verification.ts']",['c5e6c69b902a7eeb102cbf127563a406dc6884bb'],34,53,87,6,0.0,0.0,1.0
9c51fbb9aa04bf333cc85bd4b19adba3a8ada920,"[V3] Update test data to aas-core-meta 0069e6a (#341)

We re-generate the test data for [aas-core-meta 0069e6a].

[aas-core-meta 0069e6a]: https://github.com/aas-core-works/aas-core-meta/commit/0069e6a",Marko Ristin,marko@ristin.ch,GitHub,noreply@github.com,2023-03-03 18:09:53+01:00,-3600,2023-03-03 18:09:53+01:00,-3600,True,False,"['setup.py', 'verification.cs', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'verification.py', 'verification.ts']",['908d0d43fe49025a065ad707af4f0ef34c989db4'],1,12,13,6,0.0,0.0,1.0
1ea00dde8352f5478bfd9e19daaacd50451c8e8e,"[V3] Update test data to aas-core-meta a104bb7 (#342)

We re-generate the test data for [aas-core-meta a104bb7].

[aas-core-meta a104bb7]: https://github.com/aas-core-works/aas-core-meta/commit/a104bb7",Marko Ristin,marko@ristin.ch,GitHub,noreply@github.com,2023-03-03 18:21:10+01:00,-3600,2023-03-03 18:21:10+01:00,-3600,True,False,"['setup.py', 'verification.cs', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'verification.py', 'verification.ts']",['9c51fbb9aa04bf333cc85bd4b19adba3a8ada920'],34,90,124,6,0.0,0.0,1.0
5ed60377673036c614f06803098ebb323df4efb2,"Fix Python snippets in test data for mypy (#343)

We only generated the code, but haven't tested it with mypy.

This patch consists of many minor, but important, fixes which make the
mypy smile again.",Marko Ristin,marko@ristin.ch,GitHub,noreply@github.com,2023-03-03 18:25:58+01:00,-3600,2023-03-03 18:25:58+01:00,-3600,True,False,"['types.py', 'verification.py', 'value_type_or_default.py', 'kind_or_default.py', 'ID_shorts_of_variables_are_unique.py', 'lang_strings_have_unique_languages.py', 'properties_or_ranges_have_value_type.py', 'submodel_element_is_of_type.py', 'value_consistent_with_XSD_type.py']",['1ea00dde8352f5478bfd9e19daaacd50451c8e8e'],170,144,314,9,0.0,0.0,0.0
1a7617b7e5d5a7daf2cabcece106e6df8802f383,"Fix CI errors not reported locally (#344)

We fix a minor issue (unused import) that our local pylint missed, but
the pylint running on the remote continuous integration server detected.

We have no clue why our local pylint and the remote one differ on this
point.

Additionally, we fix recorded test data where we had discrepancy due to
Linux *versus* Windows paths. The fixed test data uses normalized paths
independent of the underlying OS.",Marko Ristin,marko@ristin.ch,GitHub,noreply@github.com,2023-03-08 11:03:26+01:00,-3600,2023-03-08 11:03:26+01:00,-3600,True,False,"['rdf.py', 'stderr.txt', 'test_main.py']",['237e83d2084ab06331e53b84fdc93a60b06a61cc'],3,10,13,3,0.0,0.0,1.0
ea8cd8569b3caecee681ea54f34648c4293a6739,"Correct syntax for a range of versions dependencies (#337)

The syntax used in ``setup.py`` to define the dependencies was invalid, 
but still worked on our local and remote CI pipelines.

This patch fixes the issue, since it is not guaranteed that
the invalid syntax will work in the future.",Murloc6,881739+Murloc6@users.noreply.github.com,GitHub,noreply@github.com,2023-03-08 11:15:05+01:00,-3600,2023-03-08 11:15:05+01:00,-3600,True,False,['setup.py'],['1a7617b7e5d5a7daf2cabcece106e6df8802f383'],4,4,8,1,,,
e9aad9be97f8976170a8974e7424e622950a3d51,"Fix empty verification in Python (#345)

When there is no verification for a class, we just ``passed`` instead of
returning an empty iterator.

See [this StackOverflow question] for more information.

[this StackOverflow question]: https://stackoverflow.com/questions/13243766/how-to-define-an-empty-generator-function",Marko Ristin,marko@ristin.ch,GitHub,noreply@github.com,2023-03-11 16:53:47+01:00,-3600,2023-03-11 16:53:47+01:00,-3600,True,False,['_generate.py'],['ea8cd8569b3caecee681ea54f34648c4293a6739'],1,5,6,1,0.0,0.0,0.0
b8d6912799a57b77a2fb87d75fedf51c49433324,"[V3] Re-generate test data after #345 (#346)

We have to re-generate the Python test data after #345.",Marko Ristin,marko@ristin.ch,GitHub,noreply@github.com,2023-03-11 17:03:33+01:00,-3600,2023-03-11 17:03:33+01:00,-3600,True,False,['verification.py'],['3e0953009f16f9eedf4ed42904975ab586421922'],1,5,6,1,1.0,1.0,1.0
1a1e575e3fd3643218b02eb88422409287f0378c,"Update test data to aas-core-meta 2e0320c (#347)

We update the test data to [aas-core-meta 2e0320c].

[aas-core-meta 2e0320c]: https://github.com/aas-core-works/aas-core-meta/commit/2e0320c",Marko Ristin,marko@ristin.ch,GitHub,noreply@github.com,2023-03-11 18:32:24+01:00,-3600,2023-03-11 18:32:24+01:00,-3600,True,False,"['setup.py', 'verification.cs', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'verification.py', 'verification.ts']",['b8d6912799a57b77a2fb87d75fedf51c49433324'],15,21,36,6,,,
e0ce5331940f5cbe0e310148bccb34ab81ee1cc2,"Update test data to aas-core-meta 97dd12a (#348)

We update the test data to [aas-core-meta 97dd12a].

[aas-core-meta 97dd12a]: https://github.com/aas-core-works/aas-core-meta/commit/97dd12a",Marko Ristin,marko@ristin.ch,GitHub,noreply@github.com,2023-03-11 18:54:56+01:00,-3600,2023-03-11 18:54:56+01:00,-3600,True,False,"['setup.py', 'verification.cs', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'verification.py', 'verification.ts']",['1a1e575e3fd3643218b02eb88422409287f0378c'],70,66,136,6,,,
27b098588a845fe1c890b04808e93889de96d4ec,"Update test data to aas-core-meta 62ea5a8 (#349)

We update the test data to [aas-core-meta 62ea5a8].

[aas-core-meta 62ea5a8]: https://github.com/aas-core-works/aas-core-meta/commit/62ea5a8",Marko Ristin,marko@ristin.ch,GitHub,noreply@github.com,2023-03-11 19:53:55+01:00,-3600,2023-03-11 19:53:55+01:00,-3600,True,False,"['setup.py', 'verification.cs', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'verification.py', 'verification.ts']",['e0ce5331940f5cbe0e310148bccb34ab81ee1cc2'],34,34,68,6,,,
f0c2d76c334bf91519d78f73eee54f1d477270dd,"Define inheritable definitions in JSON (#350)

We distinguish between two definitions corresponding to the same
concrete class:

1) One definition defines only the class in abstract, so that
   it can be inherited. The abstract definition lacks the ``modelType``
   constant, as that would conflict in inheritance.
2) The other definition corresponds to the concrete definition of
   the class that an instance has to fulfill. This definition includes
   the constant ``modelType``.

We had to separate these two definitions to avoid conflicts in
``modelType`` constant between a parent concrete class and a child
concrete class.",Marko Ristin,marko@ristin.ch,GitHub,noreply@github.com,2023-03-15 16:30:11+01:00,-3600,2023-03-15 16:30:11+01:00,-3600,True,False,"['main.py', 'schema.json']",['27b098588a845fe1c890b04808e93889de96d4ec'],163,367,530,2,0.13366336633663367,0.3811881188118812,0.9207920792079208
2e502d7a6ed0ebef35806e4e0eda7b7a3dbc82b8,"Update test data to aas-core-meta 9ccd31e (#351)

We update the test data to [aas-core-meta 9ccd31e].

[aas-core-meta 9ccd31e]: https://github.com/aas-core-works/aas-core-meta/commit/9ccd31e",Marko Ristin,marko@ristin.ch,GitHub,noreply@github.com,2023-03-15 16:36:44+01:00,-3600,2023-03-15 16:36:44+01:00,-3600,True,False,"['setup.py', 'types.cs', 'verification.cs', 'expected_symbol_table.txt', 'schema.json', 'expected_symbol_table.txt', 'types.py', 'verification.py', 'shacl-schema.ttl', 'types.ts', 'verification.ts', 'schema.xsd']",['f0c2d76c334bf91519d78f73eee54f1d477270dd'],423,341,764,12,0.0,1.0,1.0
bbef40ce12cc9d372e46fb4df0dd89f7a8f78bc0,"Fix JSON schema patterns for surrogates (#352)

JSON operates on UTF-16 strings. No UTF-32 is supported yet. Hence, we
need to fix the patterns to operate on UTF-16 code points, instead of
using UTF-32 code points.",Marko Ristin,marko@ristin.ch,GitHub,noreply@github.com,2023-03-15 17:22:29+01:00,-3600,2023-03-15 17:22:29+01:00,-3600,True,False,"['_generate.py', 'main.py', '__init__.py', '_fix.py', 'schema.json']",['2e502d7a6ed0ebef35806e4e0eda7b7a3dbc82b8'],433,558,991,5,0.0,0.8888888888888888,1.0
62b7d52e1a21e090029401919ab24acc88e53e1e,"Allow for selective enhancements in C# (#353)

It can be wasteful to enhance all the instances in large environments.
Therefore, we allow for selective enhancements. To that end, we allow
the enhancement factories to return a `null` to signal a missing
enhancement.",Marko Ristin,marko@ristin.ch,GitHub,noreply@github.com,2023-03-16 09:00:24+01:00,-3600,2023-03-16 09:00:24+01:00,-3600,True,False,"['_generate.py', 'enhancing.cs']",['e9aad9be97f8976170a8974e7424e622950a3d51'],187,302,489,2,0.0,0.0,0.9545454545454546
0f287d2940bcfc02fb29aec44bfe6a09289cefe2,"[V3] Fix snippets for C# (#354)

We fix the snippets for C# and test them in aas-core3.0-csharp.",Marko Ristin,marko@ristin.ch,GitHub,noreply@github.com,2023-03-16 17:07:30+01:00,-3600,2023-03-16 17:07:30+01:00,-3600,True,False,"['types.cs', 'verification.cs', 'kind_or_default.cs', 'ID_shorts_of_variables_are_unique.cs', 'is_xs_date_time.cs', 'lang_strings_have_unique_languages.cs']",['fcc252cd1f453d0c6b30c1780c26aa2a45969cb1'],58,52,110,6,1.0,1.0,0.0
7730ccdb37e7d473ed9d817adf1ef3392314be8b,"List ancestors in ``intermediate`` (#355)

We list the ancestors in constrained primitives and classes to
facilitate the work of the downstream clients. This also substantially
speeds up the is-subclass-of queries.",Marko Ristin,marko@ristin.ch,GitHub,noreply@github.com,2023-03-17 13:33:42+01:00,-3600,2023-03-17 13:33:42+01:00,-3600,True,False,"['rist.xml', '_stringify.py', '_translate.py', '_types.py', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt']",['62b7d52e1a21e090029401919ab24acc88e53e1e'],26,479,505,18,0.5,0.8055555555555556,0.9166666666666666
c6304a4bb8b9ac3a78966e8c340c9f0bc0b86a00,"[V3] Update test data after #355 (#356)

We update the test data after merging #355 in for V3 meta-models.",Marko Ristin,marko@ristin.ch,GitHub,noreply@github.com,2023-03-17 13:39:19+01:00,-3600,2023-03-17 13:39:19+01:00,-3600,True,False,['expected_symbol_table.txt'],['871f526b43812a4c9c9140319ddeee41df5dd0f3'],0,0,0,1,,,
b61d1150f2c0c4884aa2815f93011e68a29d6e7e,"Add dev. script to update test data (#357)

We write a development script to speed up updates to the latest
aas-core-meta.",Marko Ristin,marko@ristin.ch,GitHub,noreply@github.com,2023-03-17 18:03:49+01:00,-3600,2023-03-17 18:03:49+01:00,-3600,True,False,['update_to_aas_core_meta.py'],['7730ccdb37e7d473ed9d817adf1ef3392314be8b'],0,300,300,1,0.045454545454545456,0.33181818181818185,1.0
a384f52f0d012ff115b466d85467666866477767,"Update test data to aas-core-meta 3191ea5 (#358)

We update the development requirements to and re-record the test data
for [aas-core-meta 3191ea5].

[aas-core-meta 3191ea5]: https://github.com/aas-core-works/aas-core-meta/commit/3191ea5",Marko Ristin,marko@ristin.ch,GitHub,noreply@github.com,2023-03-17 18:06:57+01:00,-3600,2023-03-17 18:06:57+01:00,-3600,True,False,"['setup.py', 'constants.cs', 'types.cs', 'verification.cs', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'constants.py', 'types.py', 'verification.py', 'rdf-ontology.ttl', 'constants.ts', 'types.ts', 'verification.ts']",['93a42e4c0885ce7bc288efca558909d0c4e9d905'],947,1425,2372,13,0.0,0.0967741935483871,1.0
4e222e7be24359deb5d1b30dc012ccf6d8bc7823,"Remove referenes to V3RC02 from TypeScript codegen (#359)

We erroneously hard-wired references to package identifier of V3RC02 in
TypeScript codegen.

This patch introduces a snippet to let the user specify the package
identifier so that the module comment description corresponds to the
actual version of the SDK.",Marko Ristin,marko@ristin.ch,GitHub,noreply@github.com,2023-03-18 15:08:20+01:00,-3600,2023-03-18 15:08:20+01:00,-3600,True,False,"['_generate.py', 'verification.ts', 'package_identifier.txt']",['a384f52f0d012ff115b466d85467666866477767'],10,38,48,3,0.0,0.6666666666666666,1.0
5c9f09d38ed69bbe29c07285d77accbfe6daf210,"Remove referenes to V3RC02 from TypeScript codegen (#359)

We erroneously hard-wired references to package identifier of V3RC02 in
TypeScript codegen.

This patch introduces a snippet to let the user specify the package
identifier so that the module comment description corresponds to the
actual version of the SDK.",Marko Ristin,marko@ristin.ch,Marko Ristin,marko.ristin@gmail.com,2023-03-18 15:08:20+01:00,-3600,2023-03-18 15:17:06+01:00,-3600,True,False,"['_generate.py', 'verification.ts', 'package_identifier.txt']",['b61d1150f2c0c4884aa2815f93011e68a29d6e7e'],10,38,48,3,0.0,0.6666666666666666,1.0
f3a1d9d3d68f10124c5bd2102e3242a5e3742ddc,"[V3] Fix snippets for TypeScript (#360)

We fix issues with TypeScript snippets while testing them in
aas-core3.0-typescript.

There was a bug related to detection of non-JSON objects in jsonization,
which we will fix in the next commit.",Marko Ristin,marko@ristin.ch,GitHub,noreply@github.com,2023-03-19 06:27:48+01:00,-3600,2023-03-19 06:27:48+01:00,-3600,True,False,"['types.ts', 'verification.ts', 'kind_or_default.ts', 'ID_shorts_of_variables_are_unique.ts', 'lang_strings_have_unique_languages.ts']",['2f7f828bf7aa25644e53e9f57b1663d3e55ab958'],46,76,122,5,0.0,0.0,0.0
48c8204a4ff1223b32d103293049cf815615a7de,"Fix TypeScript mistaking JSON arrays for objects (#361)

In JavaScript, arrays are objects. This makes our checks during the
deserialization to fail for missing properties, but not for the
incorrect type.

This patch introduces a proper check that the value is not an array.",Marko Ristin,marko@ristin.ch,GitHub,noreply@github.com,2023-03-19 06:43:19+01:00,-3600,2023-03-19 06:43:19+01:00,-3600,True,False,"['_generate.py', 'jsonization.ts', 'verification.ts']",['5c9f09d38ed69bbe29c07285d77accbfe6daf210'],2,242,244,3,0.0,0.020833333333333332,1.0
900f408a3680c0b4a81000b7687f61ed99678333,"Fix TypeScript mistaking JSON arrays for objects (#361)

In JavaScript, arrays are objects. This makes our checks during the
deserialization to fail for missing properties, but not for the
incorrect type.

This patch introduces a proper check that the value is not an array.",Marko Ristin,marko@ristin.ch,Marko Ristin,marko.ristin@gmail.com,2023-03-19 06:43:19+01:00,-3600,2023-03-19 06:49:08+01:00,-3600,True,False,"['_generate.py', 'jsonization.ts', 'verification.ts']",['f3a1d9d3d68f10124c5bd2102e3242a5e3742ddc'],2,242,244,3,0.0,0.020833333333333332,1.0
52118a78fa8a5f7e2c520c5839cafec8f76d1a67,"Re-record test data after #361 (#362)

We re-record test data to reflect changes in #361.",Marko Ristin,marko@ristin.ch,GitHub,noreply@github.com,2023-03-19 06:51:03+01:00,-3600,2023-03-19 06:51:03+01:00,-3600,True,False,"['jsonization.ts', 'verification.ts']",['900f408a3680c0b4a81000b7687f61ed99678333'],5,30,35,2,0.0,0.0,1.0
a4f62c67b3f8d4c8e7648b65de77027eb0bd2832,"Disable unused warnings in TypeScript verification (#363)

When the class has no invariants defined, the eslint complains that the
instance variable `that` is not used.

We disable the warning selectively for this particular case.",Marko Ristin,marko@ristin.ch,GitHub,noreply@github.com,2023-03-19 07:01:43+01:00,-3600,2023-03-19 07:01:43+01:00,-3600,True,False,['_generate.py'],['48c8204a4ff1223b32d103293049cf815615a7de'],3,10,13,1,0.0,0.0,0.0
7c4d81c613e180d13e5e0b214b857fb8b17e294f,"Disallow `mutable` prefix in property and methods (#364)

We disallow the prefix `mutable` in the names of properties and methods
to protect the code generation in languages such as C++ which
distinguish between const and mutating getters.",Marko Ristin,marko@ristin.ch,GitHub,noreply@github.com,2023-03-19 21:48:46+01:00,-3600,2023-03-19 21:48:46+01:00,-3600,True,False,['_translate.py'],['a4f62c67b3f8d4c8e7648b65de77027eb0bd2832'],0,22,22,1,0.0,0.0,1.0
b30a6bbc8cfcc2ef974acb03ef7fed3ae3e68bc9,"Fix JSON schema patterns for surrogates (#352)

JSON operates on UTF-16 strings. No UTF-32 is supported yet. Hence, we
need to fix the patterns to operate on UTF-16 code points, instead of
using UTF-32 code points.",Marko Ristin,marko@ristin.ch,Marko Ristin,marko.ristin@gmail.com,2023-03-15 17:22:29+01:00,-3600,2023-03-21 23:42:05+01:00,-3600,True,False,"['_generate.py', 'main.py', '__init__.py', '_fix.py', 'schema.json']",['7c4d81c613e180d13e5e0b214b857fb8b17e294f'],404,530,934,5,0.0,0.8888888888888888,1.0
d764e898b82813a168f65f0eacc1519b55e687fc,"Allow strengthening of types (#365)

We allow classes to inherit properties from parent classes and
strengthen them in terms of behavioral subtyping. Namely, a property in
the class can be non-null version of the parent property, a more
concrete version of the parent property, or both.

This allows us to model some model constraints in the type system
instead of invariants. This, in its turn, allows us to generate schemas
which enforce these constraints or detect inconsistencies at compile
time.",Marko Ristin,marko@ristin.ch,GitHub,noreply@github.com,2023-03-21 23:47:21+01:00,-3600,2023-03-21 23:47:21+01:00,-3600,True,False,"['_generate.py', '_generate.py', '__init__.py', '_hierarchy.py', '_stringify.py', '_translate.py', '_types.py', 'main.py', '_generate.py', 'rdf.py', '_generate.py', 'main.py', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'expected_error.txt', 'meta_model.py', 'expected_error.txt', 'meta_model.py', 'expected_error.txt', 'meta_model.py', 'expected_error.txt', 'meta_model.py', 'expected_error.txt', 'meta_model.py', 'expected_error.txt', 'meta_model.py', 'expected_error.txt', 'meta_model.py', 'expected_error.txt', 'meta_model.py', 'schema.json', 'types.ts', 'test_hierarchy.py']",['b30a6bbc8cfcc2ef974acb03ef7fed3ae3e68bc9'],223,2623,2846,48,0.10618066561014262,0.22979397781299524,0.7876386687797148
9ca189242e51dae15c1c3aefd6080236cbd9e878,"[V3] Fix ID-shorts in JSON examples for AASd-117 (#366)

We fix the JSON examples so that they comply with
the constraint AASd-117.",Marko Ristin,marko@ristin.ch,GitHub,noreply@github.com,2023-03-22 00:07:21+01:00,-3600,2023-03-22 00:07:21+01:00,-3600,True,False,"['minimal_asset_administration_shell.json', 'minimal_concept_description.json', 'minimal_submodel.json', 'minimal_property.json', 'property_with_id_short.json', 'submodel_with_two_submodel_elements.json']",['168c84e52b4267bbf8f8f817afe57d54ad6bdd24'],27,20,47,6,,,
33f0881040ba4c975d072103a62ad572caf15d3b,"Update test data to aas-core-meta 02712de (#367)

We update the development requirements to and re-record the test data
for [aas-core-meta 02712de].

[aas-core-meta 02712de]: https://github.com/aas-core-works/aas-core-meta/commit/02712de",Marko Ristin,marko@ristin.ch,GitHub,noreply@github.com,2023-03-22 00:16:26+01:00,-3600,2023-03-22 00:16:26+01:00,-3600,True,False,"['setup.py', 'copying.cs', 'enhancing.cs', 'jsonization.cs', 'types.cs', 'verification.cs', 'xmlization.cs', 'expected_symbol_table.txt', 'schema.json', 'expected_symbol_table.txt', 'jsonization.py', 'types.py', 'verification.py', 'xmlization.py', 'shacl-schema.ttl', 'jsonization.ts', 'types.ts', 'verification.ts']",['9ca189242e51dae15c1c3aefd6080236cbd9e878'],509,630,1139,18,1.0,1.0,0.0
37577e6bdff81f7b47e8510c61d5c46cddef0e99,"Add greenery to requirements (#368)

In one of the merges from ``v3`` development branch, we forgot to add
the module ``greenery`` to the requirements. (Possibly in #352, but we
are not sure.)",Marko Ristin,marko@ristin.ch,GitHub,noreply@github.com,2023-03-22 00:21:39+01:00,-3600,2023-03-22 00:21:39+01:00,-3600,True,False,['requirements.txt'],['d764e898b82813a168f65f0eacc1519b55e687fc'],0,1,1,1,,,
07eb6b675eb0cd9a00abfd3f5cdd450fad5172e6,"Fix order of modifiers in strengthening in C# (#369)

We change the order of modifiers (``new`` later) to satisfy InspectCode.",Marko Ristin,marko@ristin.ch,GitHub,noreply@github.com,2023-03-22 00:45:42+01:00,-3600,2023-03-22 00:45:42+01:00,-3600,True,False,"['_generate.py', 'types.cs']",['33f0881040ba4c975d072103a62ad572caf15d3b'],2,2,4,2,,,
f8fb3a9e9d57dcb415acb7b632e50a8556ca3722,"Fix order of modifiers in strengthening in C# (#369)

We change the order of modifiers (``new`` later) to satisfy InspectCode.",Marko Ristin,marko@ristin.ch,Marko Ristin,marko.ristin@gmail.com,2023-03-22 00:45:42+01:00,-3600,2023-03-22 00:47:21+01:00,-3600,True,False,['_generate.py'],['37577e6bdff81f7b47e8510c61d5c46cddef0e99'],1,1,2,1,,,
59a1005f3a7198cdd522e64f33925bf899194f14,"Exclude ``greenery`` from mypy (#370)

Since the module ``greenery`` from the requirements comes without type
annotations, we exclude it from the mypy checks.",Marko Ristin,marko@ristin.ch,GitHub,noreply@github.com,2023-03-22 00:56:55+01:00,-3600,2023-03-22 00:56:55+01:00,-3600,True,False,['mypy.ini'],['f8fb3a9e9d57dcb415acb7b632e50a8556ca3722'],0,3,3,1,,,
f3995d0763a2b50c085d33d535a96bf3b2ed02ee,"Infer for schema only from non-strengthened props (#371)

We infer the constraints from properties typed as constrained primitives
only if they are specified for that particular class *and* the property
is not a non-nullability strengthening. We can do that as
non-nullability strengthenings do not affect constraints inferred for
the schemas.",Marko Ristin,marko@ristin.ch,GitHub,noreply@github.com,2023-03-22 10:32:34+01:00,-3600,2023-03-22 10:32:34+01:00,-3600,True,False,"['_inline.py', 'schema.json', 'shacl-schema.ttl']",['07eb6b675eb0cd9a00abfd3f5cdd450fad5172e6'],20,2,22,3,,,
3262e99d91b07ba4f028a8b563e359eefb4d7ca2,"Refactor non-nullability strengthening check (#372)

We refactor the check to a separate function for better readability.",Marko Ristin,marko@ristin.ch,GitHub,noreply@github.com,2023-03-22 10:36:25+01:00,-3600,2023-03-22 10:36:25+01:00,-3600,True,False,"['_inline.py', '__init__.py', '_types.py']",['f3995d0763a2b50c085d33d535a96bf3b2ed02ee'],3,37,40,3,0.0,1.0,1.0
4b68276f832d2cbc02e631bd382370775dd51b44,"Infer for schema only from non-strengthened props (#371)

We infer the constraints from properties typed as constrained primitives
only if they are specified for that particular class *and* the property
is not a non-nullability strengthening. We can do that as
non-nullability strengthenings do not affect constraints inferred for
the schemas.",Marko Ristin,marko@ristin.ch,Marko Ristin,marko.ristin@gmail.com,2023-03-22 10:32:34+01:00,-3600,2023-03-22 10:38:27+01:00,-3600,True,False,['_inline.py'],['59a1005f3a7198cdd522e64f33925bf899194f14'],2,2,4,1,,,
7c01204cb10839a94f7072a8f59d25705d144a2c,"Refactor non-nullability strengthening check (#372)

We refactor the check to a separate function for better readability.",Marko Ristin,marko@ristin.ch,Marko Ristin,marko.ristin@gmail.com,2023-03-22 10:36:25+01:00,-3600,2023-03-22 10:38:44+01:00,-3600,True,False,"['_inline.py', '__init__.py', '_types.py']",['4b68276f832d2cbc02e631bd382370775dd51b44'],3,37,40,3,0.0,1.0,1.0
5864f75ae791a2b0fc790f9270e7fbad8007b037,"Fix Python gen for pylint (#373)

We make a couple of minor formatting fixes in the code generation to
satisfy pylint on generated code.",Marko Ristin,marko@ristin.ch,GitHub,noreply@github.com,2023-03-22 13:39:10+01:00,-3600,2023-03-22 13:39:10+01:00,-3600,True,False,"['description.py', '_generate.py', 'types.py']",['3262e99d91b07ba4f028a8b563e359eefb4d7ca2'],130,150,280,3,0.2857142857142857,0.2857142857142857,0.2857142857142857
d2cdd53a309d6c1c94691146c3438bed426f1290,"Fix Python gen for pylint (#373)

We make a couple of minor formatting fixes in the code generation to
satisfy pylint on generated code.",Marko Ristin,marko@ristin.ch,Marko Ristin,marko.ristin@gmail.com,2023-03-22 13:39:10+01:00,-3600,2023-03-22 13:39:48+01:00,-3600,True,False,"['description.py', '_generate.py', 'types.py']",['7c01204cb10839a94f7072a8f59d25705d144a2c'],129,150,279,3,0.375,0.375,0.375
a8a510efa09244c085e41b0dc763648533cc9708,"Update test data to aas-core-meta 0b256cc (#374)

We update the development requirements to and re-record the test data
for [aas-core-meta 0b256cc].

[aas-core-meta 0b256cc]: https://github.com/aas-core-works/aas-core-meta/commit/0b256cc",Marko Ristin,marko@ristin.ch,GitHub,noreply@github.com,2023-03-22 16:27:41+01:00,-3600,2023-03-22 16:27:41+01:00,-3600,True,False,"['setup.py', 'copying.cs', 'enhancing.cs', 'jsonization.cs', 'types.cs', 'verification.cs', 'xmlization.cs', 'expected_symbol_table.txt', 'schema.json', 'expected_symbol_table.txt', 'constants.py', 'jsonization.py', 'types.py', 'verification.py', 'xmlization.py', 'shacl-schema.ttl', 'constants.ts', 'jsonization.ts', 'types.ts', 'verification.ts']",['5864f75ae791a2b0fc790f9270e7fbad8007b037'],637,455,1092,20,0.5855855855855856,0.5225225225225225,0.3063063063063063
0b567b41b5d2da3813c6192b4f720d6054392c5b,"Skip model type in descendants in JSON schema (#375)

We added redundant definitions of `modelType` property in JSON schema,
and remove them in this patch.",Marko Ristin,marko@ristin.ch,GitHub,noreply@github.com,2023-03-22 17:44:30+01:00,-3600,2023-03-22 17:44:30+01:00,-3600,True,False,"['main.py', 'schema.json']",['a8a510efa09244c085e41b0dc763648533cc9708'],52,9,61,2,0.0,0.0,1.0
b2c0e4a8e5622d2718371a5999d4aa3be9a9af9b,"Skip model type in descendants in JSON schema (#375)

We added redundant definitions of `modelType` property in JSON schema,
and remove them in this patch.",Marko Ristin,marko@ristin.ch,Marko Ristin,marko.ristin@gmail.com,2023-03-22 17:44:30+01:00,-3600,2023-03-22 17:45:21+01:00,-3600,True,False,"['main.py', 'schema.json']",['d2cdd53a309d6c1c94691146c3438bed426f1290'],52,9,61,2,0.0,0.0,1.0
67f789e728d51b75436821d789cee007b35dd661,"Add `descendants` property to `Class` (#376)

Currently, we only track concrete descendants of a class. This works
well for transpilation, but it was insufficient for visual 
representations such as [htmlgen in aas-core-meta]. Namely, the readers
were much more interested in *all* descendants, while the concrete
descendants were secondary.

Therefore, we add `descendants` to `Class` to list all descendants of 
a class, and not only the concrete ones.

[htmlgen in aas-core-meta]: https://github.com/aas-core-works/aas-core-meta/tree/main/htmlgen",Igor Garmaev,56840636+zrgt@users.noreply.github.com,GitHub,noreply@github.com,2023-03-24 10:17:16+01:00,-3600,2023-03-24 10:17:16+01:00,-3600,True,False,"['Python_tests_in_tests.xml', '_stringify.py', '_types.py', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt']",['0b567b41b5d2da3813c6192b4f720d6054392c5b'],2,142,144,21,0.0,1.0,1.0
fe5e529cb05f5f7721c2c51aa06ae51581fc14cf,"Refactor unwrapper from enhancer in C# (#378)

Currently, you can only specify the unwrapping if you also specify the
wrapping. This is unfortunate, as wrapping might occur in a different
part of the code base from where you define the unwrapping.

In particular, the enhancer needs an enhancement factory -- which might
not be available at the time of unwrapping.

Therefore, we refactor the unwrapping bits from the enhancer.",Marko Ristin,marko@ristin.ch,GitHub,noreply@github.com,2023-03-24 20:46:15+01:00,-3600,2023-03-24 20:46:15+01:00,-3600,True,False,"['_generate.py', 'enhancing.cs']",['67f789e728d51b75436821d789cee007b35dd661'],34,57,91,2,0.0,0.0,0.0
6932fa1d5be34c996f71323d97c30aa6e4981e7a,"Add `descendants` property to `Class` (#376)

Currently, we only track concrete descendants of a class. This works
well for transpilation, but it was insufficient for visual
representations such as [htmlgen in aas-core-meta]. Namely, the readers
were much more interested in *all* descendants, while the concrete
descendants were secondary.

Therefore, we add `descendants` to `Class` to list all descendants of
a class, and not only the concrete ones.

[htmlgen in aas-core-meta]: https://github.com/aas-core-works/aas-core-meta/tree/main/htmlgen",Igor Garmaev,56840636+zrgt@users.noreply.github.com,Marko Ristin,marko.ristin@gmail.com,2023-03-24 10:17:16+01:00,-3600,2023-03-24 20:47:34+01:00,-3600,True,False,"['Python_tests_in_tests.xml', '_stringify.py', '_types.py', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt']",['b2c0e4a8e5622d2718371a5999d4aa3be9a9af9b'],2,382,384,21,0.0,1.0,1.0
01183bd9d9f1e9f96e54f131198a7f16d34c3518,"Refactor unwrapper from enhancer in C# (#378)

Currently, you can only specify the unwrapping if you also specify the
wrapping. This is unfortunate, as wrapping might occur in a different
part of the code base from where you define the unwrapping.

In particular, the enhancer needs an enhancement factory -- which might
not be available at the time of unwrapping.

Therefore, we refactor the unwrapping bits from the enhancer.",Marko Ristin,marko@ristin.ch,Marko Ristin,marko.ristin@gmail.com,2023-03-24 20:46:15+01:00,-3600,2023-03-24 20:48:19+01:00,-3600,True,False,"['_generate.py', 'enhancing.cs']",['6932fa1d5be34c996f71323d97c30aa6e4981e7a'],34,57,91,2,0.0,0.0,0.0
7f5fe3fa48a4bd7e413cd63016be09f089f9866d,"Revert strengthening of types (#379)

We revert the strengthening of types in the children classes (#365) as
it turned out that:

1) Strengthening was not necessary for V3 (we misinterpreted Constraints
   AASd-117), and
2) Strengthening is counter-intuitive. We would have had to make the
   setter hidden in the interfaces, and available only in the concrete
   classes. This, on its other hand, is tedious to implement in the code
   generator. For example, C# SDK follows an interface-all approach, so
   making the setters in the concrete classes visible is far from
   trivial.

   Current implementation used runtime checks in the setters, which are
   an incredibly dangerous footgun. The callers would probably more
   often than not forget to think about the setters doing anything
   dubious, and certainly not expect an exception there.

In the end, we decide to embrace the runtime checks through invariants
should the need for strengthening of types, and in particular
strengthening of non-nullability, arise. This will give us runtime
errors instead of exceptions, which can be gracefully handled by
the caller code and is something expected rather than unexpected.",Marko Ristin,marko@ristin.ch,GitHub,noreply@github.com,2023-03-25 22:40:30+01:00,-3600,2023-03-25 22:40:30+01:00,-3600,True,False,"['_generate.py', '_generate.py', '_inline.py', '__init__.py', '_hierarchy.py', '_stringify.py', '_translate.py', '_types.py', 'main.py', '_generate.py', 'rdf.py', '_generate.py', 'main.py', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'expected_error.txt', 'meta_model.py', 'expected_error.txt', 'meta_model.py', 'expected_error.txt', 'meta_model.py', 'expected_error.txt', 'meta_model.py', 'expected_error.txt', 'meta_model.py', 'expected_error.txt', 'meta_model.py', 'expected_error.txt', 'meta_model.py', 'expected_error.txt', 'meta_model.py', 'test_hierarchy.py']",['fe5e529cb05f5f7721c2c51aa06ae51581fc14cf'],1608,69,1677,47,0.8952879581151832,0.8534031413612565,0.3219895287958115
b79620bcda061228347e2b7a13e2887747b15c14,"Revert strengthening of types (#379)

We revert the strengthening of types in the children classes (#365) as
it turned out that:

1) Strengthening was not necessary for V3 (we misinterpreted Constraints
   AASd-117), and
2) Strengthening is counter-intuitive. We would have had to make the
   setter hidden in the interfaces, and available only in the concrete
   classes. This, on its other hand, is tedious to implement in the code
   generator. For example, C# SDK follows an interface-all approach, so
   making the setters in the concrete classes visible is far from
   trivial.

   Current implementation used runtime checks in the setters, which are
   an incredibly dangerous footgun. The callers would probably more
   often than not forget to think about the setters doing anything
   dubious, and certainly not expect an exception there.

In the end, we decide to embrace the runtime checks through invariants
should the need for strengthening of types, and in particular
strengthening of non-nullability, arise. This will give us runtime
errors instead of exceptions, which can be gracefully handled by
the caller code and is something expected rather than unexpected.",Marko Ristin,marko@ristin.ch,Marko Ristin,marko.ristin@gmail.com,2023-03-25 22:40:30+01:00,-3600,2023-03-25 22:45:01+01:00,-3600,True,False,"['_generate.py', '_generate.py', '_inline.py', '__init__.py', '_hierarchy.py', '_stringify.py', '_translate.py', '_types.py', 'main.py', '_generate.py', 'rdf.py', '_generate.py', 'main.py', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'expected_error.txt', 'meta_model.py', 'expected_error.txt', 'meta_model.py', 'expected_error.txt', 'meta_model.py', 'expected_error.txt', 'meta_model.py', 'expected_error.txt', 'meta_model.py', 'expected_error.txt', 'meta_model.py', 'expected_error.txt', 'meta_model.py', 'expected_error.txt', 'meta_model.py', 'test_hierarchy.py']",['01183bd9d9f1e9f96e54f131198a7f16d34c3518'],1981,69,2050,47,0.8952879581151832,0.8534031413612565,0.3219895287958115
2587a3f95879e357ff3c3876bac2f5500bf8fccd,"[V3] Change naming in RDF & SHACL (#380)

We change naming in V3 for RDF & SHACL to be consistent with XSD, and
also to make life easier for downstream clients.

See: https://github.com/admin-shell-io/aas-specs/issues/263",Marko Ristin,marko@ristin.ch,GitHub,noreply@github.com,2023-04-18 21:34:04+02:00,-7200,2023-04-18 21:34:04+02:00,-7200,True,False,"['naming.py', 'rdf-ontology.ttl', 'shacl-schema.ttl']",['7f5fe3fa48a4bd7e413cd63016be09f089f9866d'],408,395,803,3,1.0,0.0,0.0
0e16f63a35c4102571d65d1fbe7be9f91deaa1ea,"Update test data to aas-core-meta 8f18a8c (#381)

We update the development requirements to and re-record the test data
for [aas-core-meta 8f18a8c].

In addition, we change the comment in the RDF schema to address the
[comment raised in admin-shell-io/aas-specs pull request #264] as this
change is in the same semantic ""batch"".

See also: https://github.com/admin-shell-io/aas-specs/pull/264

[aas-core-meta 8f18a8c]: https://github.com/aas-core-works/aas-core-meta/commit/8f18a8c
[comment raised in admin-shell-io/aas-specs pull request #264]: https://github.com/admin-shell-io/aas-specs/pull/264#discussion_r1171438525",Marko Ristin,marko@ristin.ch,GitHub,noreply@github.com,2023-04-19 23:18:56+02:00,-7200,2023-04-19 23:18:56+02:00,-7200,True,False,"['rdf.py', 'setup.py', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'rdf-ontology.ttl', 'rdf-ontology.ttl', 'rdf-ontology.ttl', 'rdf-ontology.ttl']",['2587a3f95879e357ff3c3876bac2f5500bf8fccd'],9,9,18,8,,,
77ac0ae26ffccc2d3b1800210071bc4bda8636fb,"Update test data to aas-core-meta 5671db7 (#382)

We update the development requirements to and re-record the test data
for [aas-core-meta 5671db7].

[aas-core-meta 5671db7]: https://github.com/aas-core-works/aas-core-meta/commit/5671db7",Marko Ristin,marko@ristin.ch,GitHub,noreply@github.com,2023-06-09 12:07:54+02:00,-7200,2023-06-09 12:07:54+02:00,-7200,True,False,"['setup.py', 'verification.cs', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'verification.py', 'verification.ts']",['0e16f63a35c4102571d65d1fbe7be9f91deaa1ea'],15,29,44,6,0.3333333333333333,0.3333333333333333,1.0
7893dae493efb525e4fc6a726905750f2aeab396,"Update test data to aas-core-meta 2a81612 (#383)

We update the development requirements to and re-record the test data
for [aas-core-meta 2a81612].

[aas-core-meta 2a81612]: https://github.com/aas-core-works/aas-core-meta/commit/2a81612",Marko Ristin,marko@ristin.ch,GitHub,noreply@github.com,2023-06-09 12:29:33+02:00,-7200,2023-06-09 12:29:33+02:00,-7200,True,False,"['setup.py', 'verification.cs', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'verification.py', 'verification.ts']",['b79620bcda061228347e2b7a13e2887747b15c14'],131,191,322,6,,,
3d10d7a0c50175f2cf86b69651580999c8d24556,"Update test data to aas-core-meta 2a81612 (#384)

We update the development requirements to and re-record the test data
for [aas-core-meta 2a81612].

[aas-core-meta 2a81612]: https://github.com/aas-core-works/aas-core-meta/commit/2a81612",Marko Ristin,marko@ristin.ch,GitHub,noreply@github.com,2023-06-09 12:34:07+02:00,-7200,2023-06-09 12:34:07+02:00,-7200,True,False,['setup.py'],['77ac0ae26ffccc2d3b1800210071bc4bda8636fb'],1,1,2,1,,,
28f498a243194d0089121cefb1109d0064b9f759,"Make nullability checks stricter in type inference (#385)

We make `intermediate.type_inference` stricter w.r.t. nullability
(non-None) checks. This is motivated by bugs occurring in aas-core-meta,
such as [271], [272] and [273].

[271]: https://github.com/aas-core-works/aas-core-meta/pull/271
[272]: https://github.com/aas-core-works/aas-core-meta/pull/272
[273]: https://github.com/aas-core-works/aas-core-meta/pull/273",Marko Ristin,marko@ristin.ch,GitHub,noreply@github.com,2023-06-09 13:23:20+02:00,-7200,2023-06-09 13:23:20+02:00,-7200,True,False,['type_inference.py'],['7893dae493efb525e4fc6a726905750f2aeab396'],33,239,272,1,0.0,0.0,1.0
6d2052524423a272b2f8835aecbc0294b5049562,"Write Golang generator (#386)

This is a major patch where we implement the generator for Golang SDK.",Marko Ristin,marko@ristin.ch,GitHub,noreply@github.com,2023-06-23 21:29:35+02:00,-7200,2023-06-23 21:29:35+02:00,-7200,True,False,"['publish-to-pypi.yml', 'release-package.yaml', 'codeStyleConfig.xml', 'rist.xml', 'profiles_settings.xml', 'README.rst', '__init__.py', '__init__.py', '_generate.py', 'common.py', '__init__.py', '_generate.py', 'description.py', '__init__.py', '_generate.py', '__init__.py', '_generate.py', 'main.py', 'naming.py', 'pointering.py', '__init__.py', '_generate.py', '__init__.py', '_generate.py', '__init__.py', '_generate.py', 'transpilation.py', 'unrolling.py', '__init__.py', '_generate.py', '__init__.py', '_generate.py', '_stringify.py', '_types.py', 'type_inference.py', 'main.py', '_translate.py', '_generate.py', 'common.go', 'constants.go', 'replace-curly_brackets-and-tab-indent.html', 'enhancing.go', 'jsonization.go', 'reporting.go', 'stringification.go', 'common.go', 'constants.go', 'enhancing.go', 'jsonization.go', 'reporting.go', 'stdout.txt', 'stringification.go', 'types.go', 'verification.go', 'xmlization.go', 'category_or_default.go', 'value_type_or_default.go', 'kind_or_default.go', 'kind_or_default.go', 'order_relevant_or_default.go', 'ID_shorts_are_unique.go', 'ID_shorts_of_variables_are_unique.go', 'data_specification_IEC_61360s_for_document_have_appropriate_data_type.go', 'data_specification_IEC_61360s_for_property_or_value_have_appropriate_data_type.go', 'data_specification_IEC_61360s_for_reference_have_appropriate_data_type.go', 'data_specification_IEC_61360s_have_data_type.go', 'data_specification_IEC_61360s_have_definition_at_least_in_english.go', 'data_specification_IEC_61360s_have_value.go', 'extension_names_are_unique.go', 'is_xs_date_time.go', 'is_xs_date_time_UTC.go', 'lang_strings_have_unique_languages.go', 'properties_or_ranges_have_value_type.go', 'qualifier_types_are_unique.go', 'reference_key_values_equal.go', 'submodel_element_is_of_type.go', 'submodel_elements_have_identical_semantic_IDs.go', 'value_consistent_with_XSD_type.go', 'repo_url.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'common.py', '__init__.py', 'test_common.py', 'test_main.py', 'types.go', 'verification.go']",['926a26d1093acd4827c57dc5ab12ff24b6e9c8ec'],110,145826,145936,109,0.2120683730224389,0.3889574768674668,0.9546513255864272
d4f4c497bd831d849fc880847349e4333c952d5a,"Update test data to aas-core-meta 44756fb (#387)

We update the development requirements to and re-record the test data
for [aas-core-meta 44756fb].

[aas-core-meta 44756fb]: https://github.com/aas-core-works/aas-core-meta/commit/44756fb",Marko Ristin,marko@ristin.ch,GitHub,noreply@github.com,2023-06-24 08:59:28+02:00,-7200,2023-06-24 08:59:28+02:00,-7200,True,False,"['setup.py', 'types.cs', 'types.go', 'expected_symbol_table.txt', 'types.py', 'types.ts']",['6d2052524423a272b2f8835aecbc0294b5049562'],182,387,569,6,,,
e2b793f822e25be8e7b5c157fb358afa1e02cb27,"Remove incorrect snippet in Python generator (#388)

We mistakenly copy/pasted a Golang snippet into the Python generator.

This patch fixes the issue.",Marko Ristin,marko@ristin.ch,GitHub,noreply@github.com,2023-06-24 09:08:39+02:00,-7200,2023-06-24 09:08:39+02:00,-7200,True,False,"['_generate.py', 'common.py']",['d4f4c497bd831d849fc880847349e4333c952d5a'],13,0,13,2,0.0,1.0,1.0
607f65c6402554b88a2695ffecccd8c020f35e68,"Report unexpected text in XML sequences in C# (#389)

Currently, we break out of the loop when parsing sequences of
XML elements representing properties of an instances. This gives
misleading error messages (""required property not set"").

Instead, with this patch, we report that the text is unexpected, which
is much clearer to the user.",Marko Ristin,marko@ristin.ch,GitHub,noreply@github.com,2023-06-24 10:08:59+02:00,-7200,2023-06-24 10:08:59+02:00,-7200,True,False,"['_generate.py', 'xmlization.cs']",['e2b793f822e25be8e7b5c157fb358afa1e02cb27'],313,703,1016,2,0.0,0.0,0.028409090909090908
f5374a56d9962c188292b21d70fa61e0f5763f25,"Deprecate reference in the book (#390)

The original meta-model book has been split into different parts, and
there is no single book anymore. We therefore deprecate the references
in the book as their maintenance over different books would be too cumbersome.

Instead, we fix a single version for the meta-model and the single XML
namespace.",Marko Ristin,marko@ristin.ch,GitHub,noreply@github.com,2023-06-24 12:06:01+02:00,-7200,2023-06-24 12:06:01+02:00,-7200,True,False,"['__init__.py', '_stringify.py', '_translate.py', '_types.py', '__init__.py', '_stringify.py', '_translate.py', '_types.py', 'rdf.py', 'setup.py', 'meta_model.py', 'meta_model.py', 'meta_model.py', 'meta_model.py', 'meta_model.py', 'meta_model.py', 'meta_model.py', 'meta_model.py', 'meta_model.py', 'meta_model.py', 'meta_model.py', 'meta_model.py', 'meta_model.py', 'meta_model.py', 'meta_model.py', 'meta_model.py', 'meta_model.py', 'meta_model.py', 'meta_model.py', 'meta_model.py', 'meta_model.py', 'meta_model.py', 'meta_model.py', 'meta_model.py', 'meta_model.py', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'meta_model.py', 'meta_model.py', 'meta_model.py', 'meta_model.py', 'meta_model.py', 'meta_model.py', 'meta_model.py', 'meta_model.py', 'meta_model.py', 'meta_model.py', 'meta_model.py', 'meta_model.py', 'meta_model.py', 'meta_model.py', 'meta_model.py', 'meta_model.py', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'meta_model.py', 'meta_model.py', 'meta_model.py', 'meta_model.py', 'meta_model.py', 'meta_model.py', 'meta_model.py', 'meta_model.py', 'meta_model.py', 'meta_model.py', 'meta_model.py', 'meta_model.py', 'meta_model.py', 'meta_model.py', 'meta_model.py', 'meta_model.py', 'meta_model.py', 'meta_model.py', 'meta_model.py', 'meta_model.py', 'meta_model.py', 'meta_model.py', 'meta_model.py', 'meta_model.py', 'meta_model.py', 'meta_model.py', 'meta_model.py', 'meta_model.py', 'meta_model.py', 'meta_model.py', 'meta_model.py', 'meta_model.py', 'meta_model.py', 'meta_model.py', 'meta_model.py', 'meta_model.py', 'meta_model.py', 'meta_model.py', 'meta_model.py', 'meta_model.py', 'meta_model.py', 'meta_model.py', 'meta_model.py', 'meta_model.py', 'meta_model.py', 'meta_model.py', 'meta_model.py', 'meta_model.py', 'meta_model.py', 'meta_model.py', 'meta_model.py', 'meta_model.py', 'meta_model.py', 'meta_model.py', 'meta_model.py', 'meta_model.py', 'meta_model.py', 'meta_model.py', 'expected_stderr.txt', 'meta_model.py', 'meta_model.py', 'test_description.py', 'test_len_on_properties.py', 'test_len_on_self.py', 'test_patterns_on_properties.py', 'test_patterns_on_self.py', 'test_property_in_set_of_enumeration_literals.py', 'test_property_in_set_of_primitives.py', 'test_constructor.py', 'test_hierarchy.py', 'test_translate.py', 'test_type_inference.py', 'test_types.py', 'test_parse.py']",['607f65c6402554b88a2695ffecccd8c020f35e68'],2248,362,2610,255,0.9728033472803347,0.40585774058577406,0.1799163179916318
9a6c86180a65158c1c2c418a4b8167f13156318c,"Update test data to aas-core-meta 85bdaf2 (#391)

We update the development requirements to and re-record the test data
for [aas-core-meta 85bdaf2].

[aas-core-meta 85bdaf2]: https://github.com/aas-core-works/aas-core-meta/commit/85bdaf2",Marko Ristin,marko@ristin.ch,GitHub,noreply@github.com,2023-06-24 12:11:16+02:00,-7200,2023-06-24 12:11:16+02:00,-7200,True,False,['setup.py'],['f5374a56d9962c188292b21d70fa61e0f5763f25'],1,1,2,1,,,
21acfd88719f7c5b99a155858978a494faa6c10d,"Remove mistakenly checked-in Go files (#392)

We mistakenly generated the Go files in the root directory of the
repository and checked them in.

This patch deletes them.",Marko Ristin,marko@ristin.ch,GitHub,noreply@github.com,2023-06-25 08:17:09+02:00,-7200,2023-06-25 08:17:09+02:00,-7200,True,False,"['common.go', 'constants.go', 'enhancing.go', 'jsonization.go', 'reporting.go', 'stringification.go', 'types.go', 'verification.go']",['9a6c86180a65158c1c2c418a4b8167f13156318c'],52072,0,52072,8,0.6628931904597304,0.5200483926719668,0.002333218112685793
8aec71ba28a5686c00ff18081898ee4f064ba9e8,"Check for keywords in many programming languages (#394)

Prompted by the implementation of C++ SDK, we decided to check for
conflicts with reserved keywords in many different programming languages
(Ada, C, C++ *etc.*). Though we might, or might not, implement the
generators for all of them, we check for keywords in advance to detect
issues with the meta-model ahead of time.",Marko Ristin,marko@ristin.ch,GitHub,noreply@github.com,2023-06-30 16:43:55+02:00,-7200,2023-06-30 16:43:55+02:00,-7200,True,False,"['_translate.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'test_hierarchy.py', 'test_translate.py']",['21acfd88719f7c5b99a155858978a494faa6c10d'],66,893,959,15,0.0,0.0,1.0
df63c55fde91c3af2194efce83dfe8f41db2046e,"Refactor pascal case in `naming` (#395)

We refactor the pascal casing to module `aas_core_codegen.naming` from
Python generator so that the feature can be used in other modules
as well.",Marko Ristin,marko@ristin.ch,GitHub,noreply@github.com,2023-06-30 16:57:12+02:00,-7200,2023-06-30 16:57:12+02:00,-7200,True,False,"['naming.py', 'naming.py']",['8aec71ba28a5686c00ff18081898ee4f064ba9e8'],34,30,64,2,0.0,0.0,0.0
6917e6fc6614e3c4be2d2e86c58cfd265c7b15c4,"Add `non_mutating` marker (#396)

We introduce the marker `non_mutating` to mark instance methods as
non-mutating, *i.e.*, ""const"" in C++ jargon.

This is necessary so that we can generate later tighter code in C++ and
related languages with ""const"" qualifiers for the member functions.",Marko Ristin,marko@ristin.ch,GitHub,noreply@github.com,2023-07-06 23:25:28+02:00,-7200,2023-07-06 23:25:28+02:00,-7200,True,False,"['_stringify.py', '_translate.py', '_types.py', '_stringify.py', '_translate.py', '_types.py', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_error.txt', 'meta_model.py', 'expected_error.txt', 'meta_model.py']",['df63c55fde91c3af2194efce83dfe8f41db2046e'],1,468,469,42,0.2909090909090909,0.5454545454545454,0.6
6aa9cf3a8ecdc30504cd9fbf9c3fceeddbdebdc7,"Update test data to aas-core-meta 396c850 (#397)

We update the development requirements to and re-record the test data
for [aas-core-meta 396c850].

[aas-core-meta 396c850]: https://github.com/aas-core-works/aas-core-meta/commit/396c850",Marko Ristin,marko@ristin.ch,GitHub,noreply@github.com,2023-07-07 10:49:13+02:00,-7200,2023-07-07 10:49:13+02:00,-7200,True,False,"['setup.py', 'expected_symbol_table.txt', 'expected_symbol_table.txt']",['6917e6fc6614e3c4be2d2e86c58cfd265c7b15c4'],6,6,12,3,,,
af4f43abf0f4ab2aed4ea402347c6abf067ee354,"Update test data to aas-core-meta 4d7e59e (#398)

We update the development requirements to and re-record the test data
for [aas-core-meta 4d7e59e].

Notably, this includes two important fixes from aas-core-meta:

* [V3 Fix AASc-3a-010-for-NAND (#281)], and
* [V3 Fix inclusive OR in AASd-131 (#280)].

[aas-core-meta 4d7e59e]: https://github.com/aas-core-works/aas-core-meta/commit/4d7e59e
[V3 Fix AASc-3a-010-for-NAND (#281)]: https://github.com/aas-core-works/aas-core-meta/pull/281
[V3 Fix inclusive OR in AASd-131 (#280)]: https://github.com/aas-core-works/aas-core-meta/pull/280",Marko Ristin,marko@ristin.ch,GitHub,noreply@github.com,2023-09-08 10:02:59+02:00,-7200,2023-09-08 10:02:59+02:00,-7200,True,False,"['setup.py', 'verification.cs', 'verification.go', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'verification.py', 'verification.ts']",['6aa9cf3a8ecdc30504cd9fbf9c3fceeddbdebdc7'],158,70,228,7,1.0,1.0,0.0
f3d953856b63a526ca1761e305996d5c72f07740,"Make visitation dispatches virtual in C# (#399)

We eventually noticed that the `Visit` and `Transform` methods can not
be overridden in the implementors of the respective visitors and
transformers as they were not marked as `virtual`.

This patch fixes the issue.",Marko Ristin,marko@ristin.ch,GitHub,noreply@github.com,2023-09-08 11:58:49+02:00,-7200,2023-09-08 11:58:49+02:00,-7200,True,False,"['_generate.py', 'visitation.cs']",['af4f43abf0f4ab2aed4ea402347c6abf067ee354'],6,6,12,2,,,
18986a0a0b7d5e6352d3d871145de58e0ac049fa,"Add `__repr__` to verification errors in Python (#400)

We add the `__repr__` method to the verification error in order to
facilitate debugging in the downstream applications.

See: https://github.com/aas-core-works/aas-core3.0-python/issues/11",Marko Ristin,marko@ristin.ch,GitHub,noreply@github.com,2023-09-08 12:29:06+02:00,-7200,2023-09-08 12:29:06+02:00,-7200,True,False,"['_generate.py', 'verification.py']",['f3d953856b63a526ca1761e305996d5c72f07740'],1,7,8,2,1.0,1.0,1.0
7e264a0763065d86930bc8888247c8e776f1a81f,"Disable linting double negations in TypeScript (#401)

We disable the linter rule for double negations in the generated
verification module since double negations are deliberately generated.
Namely, we do check if a constraint is violated with ""if not constraint
fulfilled"". If the constraint is formulated as a NAND, it will result in
a (desired) double negation.",Marko Ristin,marko@ristin.ch,GitHub,noreply@github.com,2023-09-08 13:55:39+02:00,-7200,2023-09-08 13:55:39+02:00,-7200,True,False,"['_generate.py', 'verification.ts']",['18986a0a0b7d5e6352d3d871145de58e0ac049fa'],0,12,12,2,0.0,0.0,1.0
c821139a5a1ba7ed7df4435d2eee27489e084911,"Upgrade greenery to 4.1.0 (#402)

We need to upgrade greenery to 4.1.0 so that we can merge regex patterns
using character classes.

See: https://github.com/qntm/greenery/issues/81",Marko Ristin,marko@ristin.ch,GitHub,noreply@github.com,2023-09-10 17:03:16+02:00,-7200,2023-09-10 17:03:16+02:00,-7200,True,False,['requirements.txt'],['7e264a0763065d86930bc8888247c8e776f1a81f'],1,1,2,1,,,
ce8ebe48958171a3642cebd21eab07986030e20c,"Remove redundant string interpolation (#403)

We mistakenly forgot to remove the string interpolation in a string in
typescript verification generator.",Marko Ristin,marko@ristin.ch,GitHub,noreply@github.com,2023-09-10 19:26:17+02:00,-7200,2023-09-10 19:26:17+02:00,-7200,True,False,['_generate.py'],['c821139a5a1ba7ed7df4435d2eee27489e084911'],1,1,2,1,,,
e4c33755bf4221aa38b538888d28cc92b979247d,"Escape carets and dashes in Regex character sets (#404)

We escape `^` and `-` in the character sets even if that is not
necessary to avoid ambiguities. At the same time, this allows us to work
with other libraries, such as greenery, which do not handle this extra
cases.",Marko Ristin,marko@ristin.ch,GitHub,noreply@github.com,2023-09-10 19:26:49+02:00,-7200,2023-09-10 19:26:49+02:00,-7200,True,False,"['_render.py', '_render.py', 'verification.cs', 'verification.go', 'schema.json', 'rendered_regex.txt', 'rendered_regex.txt', 'rendered_regex.txt', 'rendered_regex.txt', 'rendered_regex.txt', 'rendered_regex.txt', 'verification.py', 'verification.ts', 'schema.xsd']",['ce8ebe48958171a3642cebd21eab07986030e20c'],68,364,432,14,0.31210191082802546,0.6496815286624203,0.89171974522293
ad457bfee4ebe9c2f05482561952ed3c25ce1d9e,"Undo escaping implemented in #404 (#405)

We finally could not use greenery the way we intended. We wanted to
merge the patterns for the schemas, but this did not pan out, as
greenery still has some limits, see:

* https://github.com/qntm/greenery/issues/101, and
* https://github.com/qntm/greenery/issues/103.

If these issues are fixed in greenery, we should revisit this undoing.",Marko Ristin,marko@ristin.ch,GitHub,noreply@github.com,2023-09-10 20:49:21+02:00,-7200,2023-09-10 20:49:21+02:00,-7200,True,False,"['_render.py', '_render.py', 'verification.cs', 'verification.go', 'schema.json', 'rendered_regex.txt', 'rendered_regex.txt', 'rendered_regex.txt', 'rendered_regex.txt', 'rendered_regex.txt', 'rendered_regex.txt', 'verification.py', 'verification.ts', 'schema.xsd']",['e4c33755bf4221aa38b538888d28cc92b979247d'],364,68,432,14,0.6878980891719745,0.3503184713375796,0.10828025477707007
7d4670b154b631a367c2d4115161efb8e9e95501,"List classes in the symbol table (#406)

We list both abstract and concrete classes in the symbol table so that
the downstream code can be simplified. Instead of iterating over and
over again over all the types in the symbol table and filtering the
classes, the clients can not simply iterate over this list.",Marko Ristin,marko@ristin.ch,GitHub,noreply@github.com,2023-09-16 09:05:53+02:00,-7200,2023-09-16 09:05:53+02:00,-7200,True,False,"['_stringify.py', '_types.py', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt', 'expected_symbol_table.txt']",['ad457bfee4ebe9c2f05482561952ed3c25ce1d9e'],0,62,62,26,0.0,0.0,1.0
0af402a418e7628413c852c9134fa893e4ce338e,"Simplify iterations over our types using lists (#407)

We pre-compute lists for classes in #406, so we simplify the code in
this patch to make it more correct by design and more readable.

However, we made no changes to the code which would change the order of
iteration over the symbols, and consequently changing the test data.
This would cause too many changes to the downstream code which we did
not consider worthwhile just for the sake of code consistency.",Marko Ristin,marko@ristin.ch,GitHub,noreply@github.com,2023-09-16 21:51:22+02:00,-7200,2023-09-16 21:51:22+02:00,-7200,True,False,"['_generate.py', '_generate.py', '_generate.py', '_generate.py', '_generate.py', '_generate.py', '_generate.py', '_generate.py', '_generate.py', '_generate.py', '_inline.py', '_translate.py', '_types.py', 'main.py', '_generate.py', '_generate.py', '_generate.py', '_generate.py', 'main.py', '_generate.py', '_generate.py', '_generate.py', '_generate.py']",['7d4670b154b631a367c2d4115161efb8e9e95501'],1231,791,2022,23,1.0,1.0,0.8544303797468354
fef670aca5f9a8d7d44f09f89e339c6660ebe48e,"Move extraction of pattern node to intermediate (#409)

We refactor the extraction of the AST node representing the pattern
expression to `intermediate` module, since it is used throughout
different SDK generators.",Marko Ristin,marko@ristin.ch,GitHub,noreply@github.com,2023-10-18 16:24:23+02:00,-7200,2023-10-18 16:24:23+02:00,-7200,True,False,"['_generate.py', '_generate.py', '_stringify.py', '_types.py', '_generate.py', '_generate.py', 'expected_symbol_table.txt']",['0af402a418e7628413c852c9134fa893e4ce338e'],81,34,115,7,1.0,1.0,0.0
a863407f48e4c0eaccaa5aa863e2b6265eb0ace9,"Expose `intermediate.Constant` (#410)

We forgot to include `intermediate._types.Constant` in `intermediate`
due to an unintentional omission.",Marko Ristin,marko@ristin.ch,GitHub,noreply@github.com,2023-10-20 10:55:09+02:00,-7200,2023-10-20 10:55:09+02:00,-7200,True,False,['__init__.py'],['fef670aca5f9a8d7d44f09f89e339c6660ebe48e'],0,1,1,1,,,
b5b1178206c66702f99b6c69b91dd8ee905cec24,"Remove an unused import (#411)

Pylint does not accept unsude import and it is necessary for the GitHub
actions.",Murloc6,881739+Murloc6@users.noreply.github.com,GitHub,noreply@github.com,2023-10-25 19:01:31+02:00,-7200,2023-10-25 19:01:31+02:00,-7200,True,False,"['unrolling.py', 'unrolling.py']",['a863407f48e4c0eaccaa5aa863e2b6265eb0ace9'],2,2,4,2,,,
ca29f4df1d78f072f2e82705ee964115e9d834aa,"Generate AAS JSON-LD context (#408)

We generate JSON Linked-Data Context.",Murloc6,881739+Murloc6@users.noreply.github.com,GitHub,noreply@github.com,2023-10-27 14:36:50+02:00,-7200,2023-10-27 14:36:50+02:00,-7200,True,False,"['README.rst', '__init__.py', 'main.py', 'main.py', 'setup.py', 'context.jsonld', 'test_main.py']",['b5b1178206c66702f99b6c69b91dd8ee905cec24'],3,1914,1917,7,0.029411764705882353,0.34705882352941175,0.38529411764705884
cb6d015aa2e7393579e6770165208bd8519ca762,"Polish JSON LD (#412)

We pass once more over the code for generation of JSON Linked Data, and
fix a couple of minor style issues and bugs (missing error reporting,
clarifying the error messages, using sets instead of lists for
efficiency *etc.*).",Marko Ristin,marko@ristin.ch,GitHub,noreply@github.com,2023-10-28 10:32:35+02:00,-7200,2023-10-28 10:32:35+02:00,-7200,True,False,"['main.py', 'main.py', 'expected_symbol_table.txt']",['ca29f4df1d78f072f2e82705ee964115e9d834aa'],175,234,409,3,0.0,0.375,0.0
f157c24b9aa971a3cc1c15c0fb5a27f0525c5111,"Include style guide in contributing document (#415)

We write up the current style guide used in the code base.",Marko Ristin,marko@ristin.ch,GitHub,noreply@github.com,2023-11-06 15:21:25+01:00,-3600,2023-11-06 15:21:25+01:00,-3600,True,False,['CONTRIBUTING.rst'],['cb6d015aa2e7393579e6770165208bd8519ca762'],7,205,212,1,,,
566b0795c4ad120307e3e53ad0c6b0d8dae5370a,"Test for docstring with escape characters (#416)

We test explicitly what happens with special characters which are
represented as literals in docstrings in the intermediate stage.

See [this StackOverflow question] for the background.

[this StackOverflow question]: https://stackoverflow.com/questions/57265111/escape-special-characters-in-restructuredtext-sphinx",Marko Ristin,marko@ristin.ch,GitHub,noreply@github.com,2023-11-07 12:39:46+01:00,-3600,2023-11-07 12:39:46+01:00,-3600,True,False,"['expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt']",['f157c24b9aa971a3cc1c15c0fb5a27f0525c5111'],0,62,62,3,,,
def1900e2228adb0559de5fcda8b5ef05ca07d17,"Fix `assert_never` import in JSON-LD generator (#417)

We import `assert_never` from `common` module for compatibility with
other Python versions.",Marko Ristin,marko@ristin.ch,GitHub,noreply@github.com,2023-11-07 12:41:31+01:00,-3600,2023-11-07 12:41:31+01:00,-3600,True,False,['main.py'],['566b0795c4ad120307e3e53ad0c6b0d8dae5370a'],2,1,3,1,,,
39980e50c6fb795614503f5b881719efa5827da8,"Move `intermediate.rendering` to `doc` (#418)

We merge the module `intermediate.rendering` into `intermediate.doc` as
it is directly related to it, and no other functionalities emerged in
`intermediate.rendering`.

Originally, we thought that `intermediate.rendering` would span more
functionalities, which did not materialize.",Marko Ristin,marko@ristin.ch,GitHub,noreply@github.com,2023-11-07 12:44:56+01:00,-3600,2023-11-07 12:44:56+01:00,-3600,True,False,"['description.py', 'description.py', '_translate.py', 'doc.py', 'rendering.py', 'description.py', '_description.py', 'description.py']",['def1900e2228adb0559de5fcda8b5ef05ca07d17'],221,208,429,8,,,
fe69c9f4a6cf4a851e051a5d0081ecc7208811ed,"Record intermediate test data without CR (#419)

We remove carriage-return characters (`\r`) from the golden files, and
save them explicitly as bytes so that we have less problems between
Windows and Linux.

Namely, Git treats long text files as binary so changes in the line
endings are unexpectedly reported as differences.",Marko Ristin,marko@ristin.ch,GitHub,noreply@github.com,2023-11-07 12:52:13+01:00,-3600,2023-11-07 12:52:13+01:00,-3600,True,False,"['expected_symbol_table.txt', 'meta_model.py', 'expected_symbol_table.txt', 'meta_model.py', 'test_translate.py']",['39980e50c6fb795614503f5b881719efa5827da8'],3,36,39,5,0.0,0.0,1.0
28fbd9814814c6d9006c5500adfea7d1cba476de,"Fix error message in C# xmlization on declarations (#421)

When we encountered XML declarations, we threw exceptions with
uninformative messages. Namely, we expect the reader to be moved to the
content, but most users omitted to read that in the documentation.

We refine the error message for this particular situation, and hint at
`MoveToContent` method on the reader.

See [this aas-core3.0-csharp issue] for more details.

[this aas-core3.0-csharp issue]: https://github.com/aas-core-works/aas-core3.0-csharp/issues/24",Marko Ristin,marko@ristin.ch,GitHub,noreply@github.com,2023-11-09 11:49:58+01:00,-3600,2023-11-09 11:49:58+01:00,-3600,True,False,"['_generate.py', 'xmlization.cs']",['fe69c9f4a6cf4a851e051a5d0081ecc7208811ed'],2,574,576,2,0.0,0.0,1.0
a7d9234475503e6bb180d38f2d99ca724fbb4d4f,"Add `""@container"": ""@set""` and fix URIs in JSON LD (#420)

We specify `""@container"": ""@set""` when it is needed in JSON LD.

Additionally, we also patch a minor issue related to predicate URIs
inconsistent with other schemas.",Murloc6,881739+Murloc6@users.noreply.github.com,GitHub,noreply@github.com,2023-11-19 14:31:32+01:00,-3600,2023-11-19 14:31:32+01:00,-3600,True,False,"['main.py', 'context.jsonld']",['28fbd9814814c6d9006c5500adfea7d1cba476de'],73,103,176,2,0.0,0.0,0.0
78d5c98285efb6c100aa6423d414e6f4b7036447,"Transpile yielding, i.e., co-routines (#424)

We model the abstract control flow of co-routines so that we can
transpile them into state machines for languages which do not support
them natively. In particular, this is necessary when we want to model
iterations over unmaterialized sequences such as verification errors.",Marko Ristin,marko@ristin.ch,GitHub,noreply@github.com,2023-11-21 11:12:53+01:00,-3600,2023-11-21 11:12:53+01:00,-3600,True,False,"['common.py', '__init__.py', 'flow.py', 'linear.py', '__init__.py', 'test_linear.py']",['a7d9234475503e6bb180d38f2d99ca724fbb4d4f'],0,1481,1481,6,0.24453280318091453,0.8409542743538767,0.9423459244532804
d235d85e1385eddf6aed8f225f51106197c0eaaf,"Fix missing specific implementation generation in C# enhancer (#425)

The specific implementation code is not emitted to the output code stream.",Tobias Langer,empwilli@googlemail.com,GitHub,noreply@github.com,2023-12-09 10:51:27+01:00,-3600,2023-12-09 10:51:27+01:00,-3600,True,False,['_generate.py'],['78d5c98285efb6c100aa6423d414e6f4b7036447'],0,3,3,1,0.0,0.0,0.0
16803d090e3c49f9e3e71b1974a76866d8a1f962,"Fix indentation for generated C# Unwrapper class (#426)

We got the indention wrong by mistake.",Tobias Langer,tobias.langer@conplement.de,GitHub,noreply@github.com,2023-12-13 16:08:58+01:00,-3600,2023-12-13 16:08:58+01:00,-3600,True,False,"['_generate.py', 'enhancing.cs']",['d235d85e1385eddf6aed8f225f51106197c0eaaf'],2,2,4,2,,,
f080c44956f741f37abaafb003e3f3cde6227f28,"Remove stability warning from Readme (#430)

The generated code and schemas are indeed stable, since they are now
officially adopted by IDTA. Hence, we remove the misleading warning
in the readme.

Fixes #429.",Marko Ristin,marko@ristin.ch,GitHub,noreply@github.com,2024-01-08 11:31:37+01:00,-3600,2024-01-08 11:31:37+01:00,-3600,True,False,['README.rst'],['16803d090e3c49f9e3e71b1974a76866d8a1f962'],13,0,13,1,,,
89df0e1c30cf1d70b50a6558c8b9821246565753,"Write C++ generator (#431)

This is a major patch where we implement the generator for C++ SDK.",Marko Ristin,marko@ristin.ch,GitHub,noreply@github.com,2024-01-17 17:42:59+01:00,-3600,2024-01-17 17:42:59+01:00,-3600,True,False,"['rist.xml', '__init__.py', '__init__.py', '_generate.py', 'common.py', '__init__.py', '_generate.py', 'description.py', '__init__.py', '_generate.py', '__init__.py', '_generate.py', '__init__.py', '_generate.py', 'main.py', 'naming.py', 'optionaling.py', '__init__.py', '_generate.py', '__init__.py', '_generate.py', 'transpilation.py', 'unrolling.py', '__init__.py', '_generate.py', '__init__.py', '_generate.py', '__init__.py', '_generate.py', '__init__.py', '_generate.py', 'yielding.py', 'common.py', 'description.py', 'transpilation.py', '__init__.py', 'main.py', 'naming.py', '_translate.py', 'tree.py', 'transpilation.py', 'copy_to_aas_core3_cpp.py', 'replace-curly-brackets-backslashes-and-tab-indent.html', 'common.cpp', 'common.hpp', 'constants.cpp', 'constants.hpp', 'enhancing.hpp', 'iteration.cpp', 'iteration.hpp', 'jsonization.cpp', 'jsonization.hpp', 'stdout.txt', 'stringification.cpp', 'stringification.hpp', 'types.cpp', 'types.hpp', 'verification.cpp', 'verification.hpp', 'visitation.cpp', 'visitation.hpp', 'wstringification.cpp', 'wstringification.hpp', 'xmlization.cpp', 'xmlization.hpp', 'namespace.txt', 'category_or_default.body.cpp', 'value_type_or_default.body.cpp', 'kind_or_default.body.cpp', 'kind_or_default.body.cpp', 'order_relevant_or_default.body.cpp', 'ID_shorts_are_unique.cpp', 'ID_shorts_are_unique.hpp', 'ID_shorts_of_variables_are_unique.cpp', 'ID_shorts_of_variables_are_unique.hpp', 'data_specification_IEC_61360s_for_document_have_appropriate_data_type.cpp', 'data_specification_IEC_61360s_for_document_have_appropriate_data_type.hpp', 'data_specification_IEC_61360s_for_property_or_value_have_appropriate_data_type.cpp', 'data_specification_IEC_61360s_for_property_or_value_have_appropriate_data_type.hpp', 'data_specification_IEC_61360s_for_reference_have_appropriate_data_type.cpp', 'data_specification_IEC_61360s_for_reference_have_appropriate_data_type.hpp', 'data_specification_IEC_61360s_have_data_type.cpp', 'data_specification_IEC_61360s_have_data_type.hpp', 'data_specification_IEC_61360s_have_definition_at_least_in_english.cpp', 'data_specification_IEC_61360s_have_definition_at_least_in_english.hpp', 'data_specification_IEC_61360s_have_value.cpp', 'data_specification_IEC_61360s_have_value.hpp', 'extension_names_are_unique.cpp', 'extension_names_are_unique.hpp', 'is_xs_date_time.cpp', 'is_xs_date_time.hpp', 'is_xs_date_time_UTC.cpp', 'is_xs_date_time_UTC.hpp', 'lang_strings_have_unique_languages.cpp', 'lang_strings_have_unique_languages.hpp', 'properties_or_ranges_have_value_type.cpp', 'properties_or_ranges_have_value_type.hpp', 'qualifier_types_are_unique.cpp', 'qualifier_types_are_unique.hpp', 'reference_key_values_equal.cpp', 'reference_key_values_equal.hpp', 'submodel_element_is_of_type.cpp', 'submodel_element_is_of_type.hpp', 'submodel_elements_have_identical_semantic_IDs.cpp', 'submodel_elements_have_identical_semantic_IDs.hpp', 'value_consistent_with_XSD_type.cpp', 'value_consistent_with_XSD_type.hpp', '__init__.py', 'test_common.py', 'test_main.py', 'test_yielding.py']",['f080c44956f741f37abaafb003e3f3cde6227f28'],19,235906,235925,111,0.11971638772750394,0.3537399352381425,0.8880004466335
aa4236966eb5e0bf8d4a9ebf73b97604b4cff322,"Fix CI for cpp generator (#432)

We wanted to publish C++ SDK as soon as possible, so we postponed fixing
the continuous integration for the generator.

In this patch, we fix all the minor glitches, and the CI now passes.",Marko Ristin,marko@ristin.ch,GitHub,noreply@github.com,2024-01-19 11:04:37+01:00,-3600,2024-01-19 11:04:37+01:00,-3600,True,False,"['README.rst', '_generate.py', 'common.py', '_generate.py', 'description.py', '_generate.py', '_generate.py', '_generate.py', 'main.py', 'naming.py', 'optionaling.py', '_generate.py', '_generate.py', 'transpilation.py', '_generate.py', '_generate.py', '_generate.py', '_generate.py', 'yielding.py', 'naming.py', 'copy_to_aas_core3_cpp.py', 'common.cpp', 'common.hpp', 'enhancing.hpp', 'iteration.cpp', 'iteration.hpp', 'jsonization.cpp', 'jsonization.hpp', 'stringification.cpp', 'stringification.hpp', 'types.hpp', 'verification.cpp', 'verification.hpp', 'visitation.hpp', 'wstringification.cpp', 'wstringification.hpp', 'xmlization.cpp', 'verification.py', 'test_common.py', 'test_yielding.py']",['89df0e1c30cf1d70b50a6558c8b9821246565753'],5603,5411,11014,40,0.956989247311828,0.7956989247311828,0.41935483870967744
9142257c60caf8161189652616f5b68f70bba9a4,"Remove redundant curly bracked in C++ (#433)

We mistakenly forgot to remove a curly bracket when removing string
interpolation in C++ generator.",Marko Ristin,marko@ristin.ch,GitHub,noreply@github.com,2024-01-19 14:35:46+01:00,-3600,2024-01-19 14:35:46+01:00,-3600,True,False,['enhancing.hpp'],['aa4236966eb5e0bf8d4a9ebf73b97604b4cff322'],1,1,2,1,,,
973926a190a032f3f0d77db816fb9a11f7bd599c,"Remove `BEFORE-RELEASE` comments (#434)

As we have long released the aas-core-codegen in the wild, there is no
point of keeping a todo comments. At this point in time, we deprioritize
tests that we planned in the beginning.",Marko Ristin,marko@ristin.ch,GitHub,noreply@github.com,2024-01-19 14:39:17+01:00,-3600,2024-01-19 14:39:17+01:00,-3600,True,False,"['common.py', '_generate.py', '_translate.py', 'pattern_verification.py', 'main.py', '_translate.py', 'main.py']",['9142257c60caf8161189652616f5b68f70bba9a4'],39,0,39,7,,,
5a9b8359cd457af18d3b911ca09e567642bc0318,"Remove redundant initilaizations with None (#435)

I (mristin) was not aware of the syntax such as `name: str` where mypy
forces name to be initialized in all the execution paths. Hence, I
previously always wrote:

```python
name = None  # type: Optional[str]

...

assert name is not None
```

which is unnecessarily verbose and includes a redundant is-not-None
check at the end.",Marko Ristin,marko@ristin.ch,GitHub,noreply@github.com,2024-01-19 14:52:07+01:00,-3600,2024-01-19 14:52:07+01:00,-3600,True,False,"['aas-core-csharp-codegen.iml', 'misc.xml', '_generate.py', 'description.py', '_generate.py', 'optionaling.py', '_generate.py', 'transpilation.py', '_generate.py', '_generate.py', 'description.py', '_generate.py', '_generate.py', '_generate.py', 'transpilation.py', '_generate.py', '_generate.py', 'common.py', '_generate.py', 'description.py', '_generate.py', '_generate.py', '_generate.py', 'transpilation.py', '_types.py', 'type_inference.py', 'main.py', '_rules.py', '_translate.py', '_parse.py', '_render.py', 'common.py', '_generate.py', 'description.py', '_generate.py', '_generate.py', 'transpilation.py', '_generate.py', 'common.py', 'shacl.py', 'common.py', '_generate.py', '_generate.py', '_generate.py', 'transpilation.py', 'main.py']",['973926a190a032f3f0d77db816fb9a11f7bd599c'],319,194,513,46,0.9846153846153847,0.7692307692307693,0.03076923076923077
8d1185ef41993734c9b3e40337c5d4522cd6668e,"Indicate runtime model type in TypeScript (#437)

We add a function `modelType` to `Class` interface in TypeScript so that
users can retrieve the runtime type of an instance.

Fixes https://github.com/aas-core-works/aas-core3.0-typescript/issues/15.",Marko Ristin,marko@ristin.ch,GitHub,noreply@github.com,2024-01-25 13:20:20+01:00,-3600,2024-01-25 13:20:20+01:00,-3600,True,False,"['_generate.py', '_generate.py', 'stringification.ts', 'types.ts']",['5a9b8359cd457af18d3b911ca09e567642bc0318'],4,1113,1117,4,0.07876712328767123,0.8801369863013698,0.08904109589041095
d914e869515acab71c128d35f0e4478f6535af08,"Introduce `ssort` in CI (#438)

We use `ssort` to sort the definitions in the source
files in a systematic way, so that we do not have to that manually
anymore.",Marko Ristin,marko@ristin.ch,GitHub,noreply@github.com,2024-01-26 13:54:31+01:00,-3600,2024-01-26 13:54:31+01:00,-3600,True,False,"['common.py', 'common.py', 'description.py', '_generate.py', 'transpilation.py', 'unrolling.py', '_generate.py', '_generate.py', 'transpilation.py', 'unrolling.py', '_generate.py', 'common.py', 'description.py', '_generate.py', 'transpilation.py', 'unrolling.py', '_generate.py', '_pattern.py', '_translate.py', '_types.py', 'type_inference.py', '_translate.py', '_types.py', 'tree.py', 'naming.py', '_generate.py', 'transpilation.py', 'unrolling.py', '_generate.py', 'common.py', 'common.py', 'naming.py', '_generate.py', '_generate.py', 'transpilation.py', 'unrolling.py', '_generate.py', 'linear.py', 'precommit.py', 'setup.py']",['8d1185ef41993734c9b3e40337c5d4522cd6668e'],1790,1817,3607,40,1.0,0.0,1.0
